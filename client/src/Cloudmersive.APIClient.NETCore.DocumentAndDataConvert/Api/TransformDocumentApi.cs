/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransformDocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] TransformDocumentDocxReplace (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);

        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> TransformDocumentDocxReplaceWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);
        /// <summary>
        /// Fill in data in a table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        byte[] TransformDocumentDocxTableFillIn (DocxTableTableFillRequest request);

        /// <summary>
        /// Fill in data in a table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> TransformDocumentDocxTableFillInWithHttpInfo (DocxTableTableFillRequest request);
        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] TransformDocumentPptxReplace (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> TransformDocumentPptxReplaceWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> TransformDocumentDocxReplaceAsync (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);

        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> TransformDocumentDocxReplaceAsyncWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);
        /// <summary>
        /// Fill in data in a table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> TransformDocumentDocxTableFillInAsync (DocxTableTableFillRequest request);

        /// <summary>
        /// Fill in data in a table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> TransformDocumentDocxTableFillInAsyncWithHttpInfo (DocxTableTableFillRequest request);
        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> TransformDocumentPptxReplaceAsync (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> TransformDocumentPptxReplaceAsyncWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransformDocumentApi : ITransformDocumentApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransformDocumentApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformDocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransformDocumentApi(Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] TransformDocumentDocxReplace (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
             ApiResponse<byte[]> localVarResponse = TransformDocumentDocxReplaceWithHttpInfo(matchString, replaceString, inputFile, inputFileUrl, matchCase);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > TransformDocumentDocxReplaceWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
            // verify the required parameter 'matchString' is set
            if (matchString == null)
                throw new ApiException(400, "Missing required parameter 'matchString' when calling TransformDocumentApi->TransformDocumentDocxReplace");
            // verify the required parameter 'replaceString' is set
            if (replaceString == null)
                throw new ApiException(400, "Missing required parameter 'replaceString' when calling TransformDocumentApi->TransformDocumentDocxReplace");

            var localVarPath = "./convert/transform/docx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (matchString != null) localVarHeaderParams.Add("matchString", this.Configuration.ApiClient.ParameterToString(matchString)); // header parameter
            if (replaceString != null) localVarHeaderParams.Add("replaceString", this.Configuration.ApiClient.ParameterToString(replaceString)); // header parameter
            if (matchCase != null) localVarHeaderParams.Add("matchCase", this.Configuration.ApiClient.ParameterToString(matchCase)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformDocumentDocxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> TransformDocumentDocxReplaceAsync (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
             ApiResponse<byte[]> localVarResponse = await TransformDocumentDocxReplaceAsyncWithHttpInfo(matchString, replaceString, inputFile, inputFileUrl, matchCase);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> TransformDocumentDocxReplaceAsyncWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
            // verify the required parameter 'matchString' is set
            if (matchString == null)
                throw new ApiException(400, "Missing required parameter 'matchString' when calling TransformDocumentApi->TransformDocumentDocxReplace");
            // verify the required parameter 'replaceString' is set
            if (replaceString == null)
                throw new ApiException(400, "Missing required parameter 'replaceString' when calling TransformDocumentApi->TransformDocumentDocxReplace");

            var localVarPath = "./convert/transform/docx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (matchString != null) localVarHeaderParams.Add("matchString", this.Configuration.ApiClient.ParameterToString(matchString)); // header parameter
            if (replaceString != null) localVarHeaderParams.Add("replaceString", this.Configuration.ApiClient.ParameterToString(replaceString)); // header parameter
            if (matchCase != null) localVarHeaderParams.Add("matchCase", this.Configuration.ApiClient.ParameterToString(matchCase)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformDocumentDocxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Fill in data in a table in a Word DOCX document Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        public byte[] TransformDocumentDocxTableFillIn (DocxTableTableFillRequest request)
        {
             ApiResponse<byte[]> localVarResponse = TransformDocumentDocxTableFillInWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fill in data in a table in a Word DOCX document Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > TransformDocumentDocxTableFillInWithHttpInfo (DocxTableTableFillRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TransformDocumentApi->TransformDocumentDocxTableFillIn");

            var localVarPath = "./convert/transform/docx/table/fill/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformDocumentDocxTableFillIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Fill in data in a table in a Word DOCX document Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> TransformDocumentDocxTableFillInAsync (DocxTableTableFillRequest request)
        {
             ApiResponse<byte[]> localVarResponse = await TransformDocumentDocxTableFillInAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fill in data in a table in a Word DOCX document Replace placeholder rows ina  table in an Office Word Document (docx) using one or more templates
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> TransformDocumentDocxTableFillInAsyncWithHttpInfo (DocxTableTableFillRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TransformDocumentApi->TransformDocumentDocxTableFillIn");

            var localVarPath = "./convert/transform/docx/table/fill/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformDocumentDocxTableFillIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] TransformDocumentPptxReplace (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
             ApiResponse<byte[]> localVarResponse = TransformDocumentPptxReplaceWithHttpInfo(matchString, replaceString, inputFile, inputFileUrl, matchCase);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > TransformDocumentPptxReplaceWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
            // verify the required parameter 'matchString' is set
            if (matchString == null)
                throw new ApiException(400, "Missing required parameter 'matchString' when calling TransformDocumentApi->TransformDocumentPptxReplace");
            // verify the required parameter 'replaceString' is set
            if (replaceString == null)
                throw new ApiException(400, "Missing required parameter 'replaceString' when calling TransformDocumentApi->TransformDocumentPptxReplace");

            var localVarPath = "./convert/transform/pptx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (matchString != null) localVarHeaderParams.Add("matchString", this.Configuration.ApiClient.ParameterToString(matchString)); // header parameter
            if (replaceString != null) localVarHeaderParams.Add("replaceString", this.Configuration.ApiClient.ParameterToString(replaceString)); // header parameter
            if (matchCase != null) localVarHeaderParams.Add("matchCase", this.Configuration.ApiClient.ParameterToString(matchCase)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformDocumentPptxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> TransformDocumentPptxReplaceAsync (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
             ApiResponse<byte[]> localVarResponse = await TransformDocumentPptxReplaceAsyncWithHttpInfo(matchString, replaceString, inputFile, inputFileUrl, matchCase);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchString">String to search for and match against, to be replaced</param>
        /// <param name="replaceString">String to replace the matched values with</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="matchCase">Optional: True if the case should be matched, false for case insensitive match. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> TransformDocumentPptxReplaceAsyncWithHttpInfo (string matchString, string replaceString, System.IO.Stream inputFile = null, string inputFileUrl = null, bool? matchCase = null)
        {
            // verify the required parameter 'matchString' is set
            if (matchString == null)
                throw new ApiException(400, "Missing required parameter 'matchString' when calling TransformDocumentApi->TransformDocumentPptxReplace");
            // verify the required parameter 'replaceString' is set
            if (replaceString == null)
                throw new ApiException(400, "Missing required parameter 'replaceString' when calling TransformDocumentApi->TransformDocumentPptxReplace");

            var localVarPath = "./convert/transform/pptx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (matchString != null) localVarHeaderParams.Add("matchString", this.Configuration.ApiClient.ParameterToString(matchString)); // header parameter
            if (replaceString != null) localVarHeaderParams.Add("replaceString", this.Configuration.ApiClient.ParameterToString(replaceString)); // header parameter
            if (matchCase != null) localVarHeaderParams.Add("matchCase", this.Configuration.ApiClient.ParameterToString(matchCase)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformDocumentPptxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
