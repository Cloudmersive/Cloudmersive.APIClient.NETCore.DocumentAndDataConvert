/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvertDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert CSV to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert a CSV file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        Object ConvertDataCsvToJson (System.IO.Stream inputFile);

        /// <summary>
        /// Convert CSV to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert a CSV file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConvertDataCsvToJsonWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Convert JSON to XML conversion
        /// </summary>
        /// <remarks>
        /// Convert a JSON object into XML
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>byte[]</returns>
        byte[] ConvertDataJsonToXml (Object jsonObject);

        /// <summary>
        /// Convert JSON to XML conversion
        /// </summary>
        /// <remarks>
        /// Convert a JSON object into XML
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ConvertDataJsonToXmlWithHttpInfo (Object jsonObject);
        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel (97-2003) XLS file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        Object ConvertDataXlsToJson (System.IO.Stream inputFile);

        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel (97-2003) XLS file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConvertDataXlsToJsonWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Convert Excel XLSX to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel XLSX file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        Object ConvertDataXlsxToJson (System.IO.Stream inputFile);

        /// <summary>
        /// Convert Excel XLSX to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel XLSX file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConvertDataXlsxToJsonWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>XmlAddAttributeWithXPathResult</returns>
        XmlAddAttributeWithXPathResult ConvertDataXmlEditAddAttributeWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue);

        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>ApiResponse of XmlAddAttributeWithXPathResult</returns>
        ApiResponse<XmlAddAttributeWithXPathResult> ConvertDataXmlEditAddAttributeWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue);
        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>XmlAddChildWithXPathResult</returns>
        XmlAddChildWithXPathResult ConvertDataXmlEditAddChildWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd);

        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>ApiResponse of XmlAddChildWithXPathResult</returns>
        ApiResponse<XmlAddChildWithXPathResult> ConvertDataXmlEditAddChildWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd);
        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>XmlRemoveAllChildrenWithXPathResult</returns>
        XmlRemoveAllChildrenWithXPathResult ConvertDataXmlEditRemoveAllChildNodesWithXPath (System.IO.Stream inputFile, string xPathExpression);

        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>ApiResponse of XmlRemoveAllChildrenWithXPathResult</returns>
        ApiResponse<XmlRemoveAllChildrenWithXPathResult> ConvertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression);
        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>XmlReplaceWithXPathResult</returns>
        XmlReplaceWithXPathResult ConvertDataXmlEditReplaceWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement);

        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>ApiResponse of XmlReplaceWithXPathResult</returns>
        ApiResponse<XmlReplaceWithXPathResult> ConvertDataXmlEditReplaceWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement);
        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>XmlSetValueWithXPathResult</returns>
        XmlSetValueWithXPathResult ConvertDataXmlEditSetValueWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlValue);

        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>ApiResponse of XmlSetValueWithXPathResult</returns>
        ApiResponse<XmlSetValueWithXPathResult> ConvertDataXmlEditSetValueWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlValue);
        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>XmlFilterWithXPathResult</returns>
        XmlFilterWithXPathResult ConvertDataXmlFilterWithXPath (string xPathExpression, System.IO.Stream inputFile);

        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of XmlFilterWithXPathResult</returns>
        ApiResponse<XmlFilterWithXPathResult> ConvertDataXmlFilterWithXPathWithHttpInfo (string xPathExpression, System.IO.Stream inputFile);
        /// <summary>
        /// Query an XML file using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>XmlQueryWithXQueryResult</returns>
        XmlQueryWithXQueryResult ConvertDataXmlQueryWithXQuery (System.IO.Stream inputFile, string xQuery);

        /// <summary>
        /// Query an XML file using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>ApiResponse of XmlQueryWithXQueryResult</returns>
        ApiResponse<XmlQueryWithXQueryResult> ConvertDataXmlQueryWithXQueryWithHttpInfo (System.IO.Stream inputFile, string xQuery);
        /// <summary>
        /// Query multiple XML files using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>XmlQueryWithXQueryMultiResult</returns>
        XmlQueryWithXQueryMultiResult ConvertDataXmlQueryWithXQueryMulti (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Query multiple XML files using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of XmlQueryWithXQueryMultiResult</returns>
        ApiResponse<XmlQueryWithXQueryMultiResult> ConvertDataXmlQueryWithXQueryMultiWithHttpInfo (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>XmlRemoveWithXPathResult</returns>
        XmlRemoveWithXPathResult ConvertDataXmlRemoveWithXPath (string xPathExpression, System.IO.Stream inputFile);

        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of XmlRemoveWithXPathResult</returns>
        ApiResponse<XmlRemoveWithXPathResult> ConvertDataXmlRemoveWithXPathWithHttpInfo (string xPathExpression, System.IO.Stream inputFile);
        /// <summary>
        /// Convert XML to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        Object ConvertDataXmlToJson (System.IO.Stream inputFile);

        /// <summary>
        /// Convert XML to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConvertDataXmlToJsonWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Transform XML document file with XSLT into a new XML document
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>byte[]</returns>
        byte[] ConvertDataXmlTransformWithXsltToXml (System.IO.Stream inputFile, System.IO.Stream transformFile);

        /// <summary>
        /// Transform XML document file with XSLT into a new XML document
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ConvertDataXmlTransformWithXsltToXmlWithHttpInfo (System.IO.Stream inputFile, System.IO.Stream transformFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert CSV to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert a CSV file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConvertDataCsvToJsonAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Convert CSV to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert a CSV file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataCsvToJsonAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Convert JSON to XML conversion
        /// </summary>
        /// <remarks>
        /// Convert a JSON object into XML
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ConvertDataJsonToXmlAsync (Object jsonObject);

        /// <summary>
        /// Convert JSON to XML conversion
        /// </summary>
        /// <remarks>
        /// Convert a JSON object into XML
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ConvertDataJsonToXmlAsyncWithHttpInfo (Object jsonObject);
        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel (97-2003) XLS file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConvertDataXlsToJsonAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel (97-2003) XLS file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataXlsToJsonAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Convert Excel XLSX to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel XLSX file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConvertDataXlsxToJsonAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Convert Excel XLSX to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an Excel XLSX file to a JSON object array
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataXlsxToJsonAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>Task of XmlAddAttributeWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlAddAttributeWithXPathResult> ConvertDataXmlEditAddAttributeWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue);

        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>Task of ApiResponse (XmlAddAttributeWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlAddAttributeWithXPathResult>> ConvertDataXmlEditAddAttributeWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue);
        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>Task of XmlAddChildWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlAddChildWithXPathResult> ConvertDataXmlEditAddChildWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd);

        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>Task of ApiResponse (XmlAddChildWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlAddChildWithXPathResult>> ConvertDataXmlEditAddChildWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd);
        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>Task of XmlRemoveAllChildrenWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlRemoveAllChildrenWithXPathResult> ConvertDataXmlEditRemoveAllChildNodesWithXPathAsync (System.IO.Stream inputFile, string xPathExpression);

        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>Task of ApiResponse (XmlRemoveAllChildrenWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlRemoveAllChildrenWithXPathResult>> ConvertDataXmlEditRemoveAllChildNodesWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression);
        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>Task of XmlReplaceWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlReplaceWithXPathResult> ConvertDataXmlEditReplaceWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement);

        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>Task of ApiResponse (XmlReplaceWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlReplaceWithXPathResult>> ConvertDataXmlEditReplaceWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement);
        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>Task of XmlSetValueWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlSetValueWithXPathResult> ConvertDataXmlEditSetValueWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlValue);

        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>Task of ApiResponse (XmlSetValueWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlSetValueWithXPathResult>> ConvertDataXmlEditSetValueWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlValue);
        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of XmlFilterWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlFilterWithXPathResult> ConvertDataXmlFilterWithXPathAsync (string xPathExpression, System.IO.Stream inputFile);

        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (XmlFilterWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlFilterWithXPathResult>> ConvertDataXmlFilterWithXPathAsyncWithHttpInfo (string xPathExpression, System.IO.Stream inputFile);
        /// <summary>
        /// Query an XML file using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>Task of XmlQueryWithXQueryResult</returns>
        System.Threading.Tasks.Task<XmlQueryWithXQueryResult> ConvertDataXmlQueryWithXQueryAsync (System.IO.Stream inputFile, string xQuery);

        /// <summary>
        /// Query an XML file using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>Task of ApiResponse (XmlQueryWithXQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlQueryWithXQueryResult>> ConvertDataXmlQueryWithXQueryAsyncWithHttpInfo (System.IO.Stream inputFile, string xQuery);
        /// <summary>
        /// Query multiple XML files using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>Task of XmlQueryWithXQueryMultiResult</returns>
        System.Threading.Tasks.Task<XmlQueryWithXQueryMultiResult> ConvertDataXmlQueryWithXQueryMultiAsync (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Query multiple XML files using XQuery query, get results
        /// </summary>
        /// <remarks>
        /// Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (XmlQueryWithXQueryMultiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlQueryWithXQueryMultiResult>> ConvertDataXmlQueryWithXQueryMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of XmlRemoveWithXPathResult</returns>
        System.Threading.Tasks.Task<XmlRemoveWithXPathResult> ConvertDataXmlRemoveWithXPathAsync (string xPathExpression, System.IO.Stream inputFile);

        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression
        /// </summary>
        /// <remarks>
        /// Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (XmlRemoveWithXPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XmlRemoveWithXPathResult>> ConvertDataXmlRemoveWithXPathAsyncWithHttpInfo (string xPathExpression, System.IO.Stream inputFile);
        /// <summary>
        /// Convert XML to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConvertDataXmlToJsonAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Convert XML to JSON conversion
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataXmlToJsonAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Transform XML document file with XSLT into a new XML document
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ConvertDataXmlTransformWithXsltToXmlAsync (System.IO.Stream inputFile, System.IO.Stream transformFile);

        /// <summary>
        /// Transform XML document file with XSLT into a new XML document
        /// </summary>
        /// <remarks>
        /// Convert an XML string or file into JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ConvertDataXmlTransformWithXsltToXmlAsyncWithHttpInfo (System.IO.Stream inputFile, System.IO.Stream transformFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConvertDataApi : IConvertDataApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvertDataApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConvertDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert CSV to JSON conversion Convert a CSV file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        public Object ConvertDataCsvToJson (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = ConvertDataCsvToJsonWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert CSV to JSON conversion Convert a CSV file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConvertDataCsvToJsonWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataCsvToJson");

            var localVarPath = "/convert/csv/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataCsvToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert CSV to JSON conversion Convert a CSV file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConvertDataCsvToJsonAsync (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = await ConvertDataCsvToJsonAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert CSV to JSON conversion Convert a CSV file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataCsvToJsonAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataCsvToJson");

            var localVarPath = "/convert/csv/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataCsvToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert JSON to XML conversion Convert a JSON object into XML
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>byte[]</returns>
        public byte[] ConvertDataJsonToXml (Object jsonObject)
        {
             ApiResponse<byte[]> localVarResponse = ConvertDataJsonToXmlWithHttpInfo(jsonObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert JSON to XML conversion Convert a JSON object into XML
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ConvertDataJsonToXmlWithHttpInfo (Object jsonObject)
        {
            // verify the required parameter 'jsonObject' is set
            if (jsonObject == null)
                throw new ApiException(400, "Missing required parameter 'jsonObject' when calling ConvertDataApi->ConvertDataJsonToXml");

            var localVarPath = "/convert/json/to/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonObject != null && jsonObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(jsonObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonObject; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataJsonToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert JSON to XML conversion Convert a JSON object into XML
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ConvertDataJsonToXmlAsync (Object jsonObject)
        {
             ApiResponse<byte[]> localVarResponse = await ConvertDataJsonToXmlAsyncWithHttpInfo(jsonObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert JSON to XML conversion Convert a JSON object into XML
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonObject">Input JSON to convert to XML</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ConvertDataJsonToXmlAsyncWithHttpInfo (Object jsonObject)
        {
            // verify the required parameter 'jsonObject' is set
            if (jsonObject == null)
                throw new ApiException(400, "Missing required parameter 'jsonObject' when calling ConvertDataApi->ConvertDataJsonToXml");

            var localVarPath = "/convert/json/to/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonObject != null && jsonObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(jsonObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonObject; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataJsonToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion Convert an Excel (97-2003) XLS file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        public Object ConvertDataXlsToJson (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = ConvertDataXlsToJsonWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion Convert an Excel (97-2003) XLS file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConvertDataXlsToJsonWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXlsToJson");

            var localVarPath = "/convert/xls/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXlsToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion Convert an Excel (97-2003) XLS file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConvertDataXlsToJsonAsync (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = await ConvertDataXlsToJsonAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Excel (97-2003) XLS to JSON conversion Convert an Excel (97-2003) XLS file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataXlsToJsonAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXlsToJson");

            var localVarPath = "/convert/xls/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXlsToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert Excel XLSX to JSON conversion Convert an Excel XLSX file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        public Object ConvertDataXlsxToJson (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = ConvertDataXlsxToJsonWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Excel XLSX to JSON conversion Convert an Excel XLSX file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConvertDataXlsxToJsonWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXlsxToJson");

            var localVarPath = "/convert/xlsx/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXlsxToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert Excel XLSX to JSON conversion Convert an Excel XLSX file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConvertDataXlsxToJsonAsync (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = await ConvertDataXlsxToJsonAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Excel XLSX to JSON conversion Convert an Excel XLSX file to a JSON object array
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataXlsxToJsonAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXlsxToJson");

            var localVarPath = "/convert/xlsx/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXlsxToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>XmlAddAttributeWithXPathResult</returns>
        public XmlAddAttributeWithXPathResult ConvertDataXmlEditAddAttributeWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue)
        {
             ApiResponse<XmlAddAttributeWithXPathResult> localVarResponse = ConvertDataXmlEditAddAttributeWithXPathWithHttpInfo(inputFile, xPathExpression, xmlAttributeName, xmlAttributeValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>ApiResponse of XmlAddAttributeWithXPathResult</returns>
        public ApiResponse< XmlAddAttributeWithXPathResult > ConvertDataXmlEditAddAttributeWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");
            // verify the required parameter 'xmlAttributeName' is set
            if (xmlAttributeName == null)
                throw new ApiException(400, "Missing required parameter 'xmlAttributeName' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");
            // verify the required parameter 'xmlAttributeValue' is set
            if (xmlAttributeValue == null)
                throw new ApiException(400, "Missing required parameter 'xmlAttributeValue' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/add-attribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlAttributeName != null) localVarHeaderParams.Add("XmlAttributeName", Configuration.ApiClient.ParameterToString(xmlAttributeName)); // header parameter
            if (xmlAttributeValue != null) localVarHeaderParams.Add("XmlAttributeValue", Configuration.ApiClient.ParameterToString(xmlAttributeValue)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditAddAttributeWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlAddAttributeWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlAddAttributeWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlAddAttributeWithXPathResult)));
        }

        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>Task of XmlAddAttributeWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlAddAttributeWithXPathResult> ConvertDataXmlEditAddAttributeWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue)
        {
             ApiResponse<XmlAddAttributeWithXPathResult> localVarResponse = await ConvertDataXmlEditAddAttributeWithXPathAsyncWithHttpInfo(inputFile, xPathExpression, xmlAttributeName, xmlAttributeValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an attribute to all XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an attribute to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlAttributeName">Name of the XML attribute to add</param>
        /// <param name="xmlAttributeValue">Value of the XML attribute to add</param>
        /// <returns>Task of ApiResponse (XmlAddAttributeWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlAddAttributeWithXPathResult>> ConvertDataXmlEditAddAttributeWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlAttributeName, string xmlAttributeValue)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");
            // verify the required parameter 'xmlAttributeName' is set
            if (xmlAttributeName == null)
                throw new ApiException(400, "Missing required parameter 'xmlAttributeName' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");
            // verify the required parameter 'xmlAttributeValue' is set
            if (xmlAttributeValue == null)
                throw new ApiException(400, "Missing required parameter 'xmlAttributeValue' when calling ConvertDataApi->ConvertDataXmlEditAddAttributeWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/add-attribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlAttributeName != null) localVarHeaderParams.Add("XmlAttributeName", Configuration.ApiClient.ParameterToString(xmlAttributeName)); // header parameter
            if (xmlAttributeValue != null) localVarHeaderParams.Add("XmlAttributeValue", Configuration.ApiClient.ParameterToString(xmlAttributeValue)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditAddAttributeWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlAddAttributeWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlAddAttributeWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlAddAttributeWithXPathResult)));
        }

        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>XmlAddChildWithXPathResult</returns>
        public XmlAddChildWithXPathResult ConvertDataXmlEditAddChildWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd)
        {
             ApiResponse<XmlAddChildWithXPathResult> localVarResponse = ConvertDataXmlEditAddChildWithXPathWithHttpInfo(inputFile, xPathExpression, xmlNodeToAdd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>ApiResponse of XmlAddChildWithXPathResult</returns>
        public ApiResponse< XmlAddChildWithXPathResult > ConvertDataXmlEditAddChildWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditAddChildWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditAddChildWithXPath");
            // verify the required parameter 'xmlNodeToAdd' is set
            if (xmlNodeToAdd == null)
                throw new ApiException(400, "Missing required parameter 'xmlNodeToAdd' when calling ConvertDataApi->ConvertDataXmlEditAddChildWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/add-child";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlNodeToAdd != null) localVarHeaderParams.Add("XmlNodeToAdd", Configuration.ApiClient.ParameterToString(xmlNodeToAdd)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditAddChildWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlAddChildWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlAddChildWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlAddChildWithXPathResult)));
        }

        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>Task of XmlAddChildWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlAddChildWithXPathResult> ConvertDataXmlEditAddChildWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd)
        {
             ApiResponse<XmlAddChildWithXPathResult> localVarResponse = await ConvertDataXmlEditAddChildWithXPathAsyncWithHttpInfo(inputFile, xPathExpression, xmlNodeToAdd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an XML node as a child to XML nodes matching XPath expression Return the reuslts of editing an XML document by adding an XML node as a child to all of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeToAdd">XML Node to add as a child</param>
        /// <returns>Task of ApiResponse (XmlAddChildWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlAddChildWithXPathResult>> ConvertDataXmlEditAddChildWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeToAdd)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditAddChildWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditAddChildWithXPath");
            // verify the required parameter 'xmlNodeToAdd' is set
            if (xmlNodeToAdd == null)
                throw new ApiException(400, "Missing required parameter 'xmlNodeToAdd' when calling ConvertDataApi->ConvertDataXmlEditAddChildWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/add-child";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlNodeToAdd != null) localVarHeaderParams.Add("XmlNodeToAdd", Configuration.ApiClient.ParameterToString(xmlNodeToAdd)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditAddChildWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlAddChildWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlAddChildWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlAddChildWithXPathResult)));
        }

        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>XmlRemoveAllChildrenWithXPathResult</returns>
        public XmlRemoveAllChildrenWithXPathResult ConvertDataXmlEditRemoveAllChildNodesWithXPath (System.IO.Stream inputFile, string xPathExpression)
        {
             ApiResponse<XmlRemoveAllChildrenWithXPathResult> localVarResponse = ConvertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo(inputFile, xPathExpression);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>ApiResponse of XmlRemoveAllChildrenWithXPathResult</returns>
        public ApiResponse< XmlRemoveAllChildrenWithXPathResult > ConvertDataXmlEditRemoveAllChildNodesWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditRemoveAllChildNodesWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditRemoveAllChildNodesWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/remove-all-children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditRemoveAllChildNodesWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlRemoveAllChildrenWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlRemoveAllChildrenWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlRemoveAllChildrenWithXPathResult)));
        }

        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>Task of XmlRemoveAllChildrenWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlRemoveAllChildrenWithXPathResult> ConvertDataXmlEditRemoveAllChildNodesWithXPathAsync (System.IO.Stream inputFile, string xPathExpression)
        {
             ApiResponse<XmlRemoveAllChildrenWithXPathResult> localVarResponse = await ConvertDataXmlEditRemoveAllChildNodesWithXPathAsyncWithHttpInfo(inputFile, xPathExpression);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes, deletes all children of nodes matching XPath expression, but does not remove the nodes Return the reuslts of editing an XML document by removing all child nodes of the nodes that match an input XPath expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <returns>Task of ApiResponse (XmlRemoveAllChildrenWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlRemoveAllChildrenWithXPathResult>> ConvertDataXmlEditRemoveAllChildNodesWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditRemoveAllChildNodesWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditRemoveAllChildNodesWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/remove-all-children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditRemoveAllChildNodesWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlRemoveAllChildrenWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlRemoveAllChildrenWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlRemoveAllChildrenWithXPathResult)));
        }

        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>XmlReplaceWithXPathResult</returns>
        public XmlReplaceWithXPathResult ConvertDataXmlEditReplaceWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement)
        {
             ApiResponse<XmlReplaceWithXPathResult> localVarResponse = ConvertDataXmlEditReplaceWithXPathWithHttpInfo(inputFile, xPathExpression, xmlNodeReplacement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>ApiResponse of XmlReplaceWithXPathResult</returns>
        public ApiResponse< XmlReplaceWithXPathResult > ConvertDataXmlEditReplaceWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditReplaceWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditReplaceWithXPath");
            // verify the required parameter 'xmlNodeReplacement' is set
            if (xmlNodeReplacement == null)
                throw new ApiException(400, "Missing required parameter 'xmlNodeReplacement' when calling ConvertDataApi->ConvertDataXmlEditReplaceWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlNodeReplacement != null) localVarHeaderParams.Add("XmlNodeReplacement", Configuration.ApiClient.ParameterToString(xmlNodeReplacement)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditReplaceWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlReplaceWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlReplaceWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlReplaceWithXPathResult)));
        }

        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>Task of XmlReplaceWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlReplaceWithXPathResult> ConvertDataXmlEditReplaceWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement)
        {
             ApiResponse<XmlReplaceWithXPathResult> localVarResponse = await ConvertDataXmlEditReplaceWithXPathAsyncWithHttpInfo(inputFile, xPathExpression, xmlNodeReplacement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces XML nodes matching XPath expression with new node Return the reuslts of editing an XML document by replacing all of the nodes that match an input XPath expression with a new XML node expression.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlNodeReplacement">XML Node replacement content</param>
        /// <returns>Task of ApiResponse (XmlReplaceWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlReplaceWithXPathResult>> ConvertDataXmlEditReplaceWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlNodeReplacement)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditReplaceWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditReplaceWithXPath");
            // verify the required parameter 'xmlNodeReplacement' is set
            if (xmlNodeReplacement == null)
                throw new ApiException(400, "Missing required parameter 'xmlNodeReplacement' when calling ConvertDataApi->ConvertDataXmlEditReplaceWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlNodeReplacement != null) localVarHeaderParams.Add("XmlNodeReplacement", Configuration.ApiClient.ParameterToString(xmlNodeReplacement)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditReplaceWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlReplaceWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlReplaceWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlReplaceWithXPathResult)));
        }

        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>XmlSetValueWithXPathResult</returns>
        public XmlSetValueWithXPathResult ConvertDataXmlEditSetValueWithXPath (System.IO.Stream inputFile, string xPathExpression, string xmlValue)
        {
             ApiResponse<XmlSetValueWithXPathResult> localVarResponse = ConvertDataXmlEditSetValueWithXPathWithHttpInfo(inputFile, xPathExpression, xmlValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>ApiResponse of XmlSetValueWithXPathResult</returns>
        public ApiResponse< XmlSetValueWithXPathResult > ConvertDataXmlEditSetValueWithXPathWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlValue)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditSetValueWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditSetValueWithXPath");
            // verify the required parameter 'xmlValue' is set
            if (xmlValue == null)
                throw new ApiException(400, "Missing required parameter 'xmlValue' when calling ConvertDataApi->ConvertDataXmlEditSetValueWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/set-value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlValue != null) localVarHeaderParams.Add("XmlValue", Configuration.ApiClient.ParameterToString(xmlValue)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditSetValueWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlSetValueWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlSetValueWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlSetValueWithXPathResult)));
        }

        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>Task of XmlSetValueWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlSetValueWithXPathResult> ConvertDataXmlEditSetValueWithXPathAsync (System.IO.Stream inputFile, string xPathExpression, string xmlValue)
        {
             ApiResponse<XmlSetValueWithXPathResult> localVarResponse = await ConvertDataXmlEditSetValueWithXPathAsyncWithHttpInfo(inputFile, xPathExpression, xmlValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the value contents of XML nodes matching XPath expression Return the reuslts of editing an XML document by setting the contents of all of the nodes that match an input XPath expression.  Supports elements and attributes.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="xmlValue">XML Value to set into the matching XML nodes</param>
        /// <returns>Task of ApiResponse (XmlSetValueWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlSetValueWithXPathResult>> ConvertDataXmlEditSetValueWithXPathAsyncWithHttpInfo (System.IO.Stream inputFile, string xPathExpression, string xmlValue)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlEditSetValueWithXPath");
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlEditSetValueWithXPath");
            // verify the required parameter 'xmlValue' is set
            if (xmlValue == null)
                throw new ApiException(400, "Missing required parameter 'xmlValue' when calling ConvertDataApi->ConvertDataXmlEditSetValueWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/set-value";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (xmlValue != null) localVarHeaderParams.Add("XmlValue", Configuration.ApiClient.ParameterToString(xmlValue)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlEditSetValueWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlSetValueWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlSetValueWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlSetValueWithXPathResult)));
        }

        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>XmlFilterWithXPathResult</returns>
        public XmlFilterWithXPathResult ConvertDataXmlFilterWithXPath (string xPathExpression, System.IO.Stream inputFile)
        {
             ApiResponse<XmlFilterWithXPathResult> localVarResponse = ConvertDataXmlFilterWithXPathWithHttpInfo(xPathExpression, inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of XmlFilterWithXPathResult</returns>
        public ApiResponse< XmlFilterWithXPathResult > ConvertDataXmlFilterWithXPathWithHttpInfo (string xPathExpression, System.IO.Stream inputFile)
        {
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlFilterWithXPath");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlFilterWithXPath");

            var localVarPath = "/convert/xml/select/xpath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlFilterWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlFilterWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlFilterWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlFilterWithXPathResult)));
        }

        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of XmlFilterWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlFilterWithXPathResult> ConvertDataXmlFilterWithXPathAsync (string xPathExpression, System.IO.Stream inputFile)
        {
             ApiResponse<XmlFilterWithXPathResult> localVarResponse = await ConvertDataXmlFilterWithXPathAsyncWithHttpInfo(xPathExpression, inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Filter, select XML nodes using XPath expression, get results Return the reuslts of filtering, selecting an XML document with an XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (XmlFilterWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlFilterWithXPathResult>> ConvertDataXmlFilterWithXPathAsyncWithHttpInfo (string xPathExpression, System.IO.Stream inputFile)
        {
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlFilterWithXPath");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlFilterWithXPath");

            var localVarPath = "/convert/xml/select/xpath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlFilterWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlFilterWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlFilterWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlFilterWithXPathResult)));
        }

        /// <summary>
        /// Query an XML file using XQuery query, get results Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>XmlQueryWithXQueryResult</returns>
        public XmlQueryWithXQueryResult ConvertDataXmlQueryWithXQuery (System.IO.Stream inputFile, string xQuery)
        {
             ApiResponse<XmlQueryWithXQueryResult> localVarResponse = ConvertDataXmlQueryWithXQueryWithHttpInfo(inputFile, xQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query an XML file using XQuery query, get results Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>ApiResponse of XmlQueryWithXQueryResult</returns>
        public ApiResponse< XmlQueryWithXQueryResult > ConvertDataXmlQueryWithXQueryWithHttpInfo (System.IO.Stream inputFile, string xQuery)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlQueryWithXQuery");
            // verify the required parameter 'xQuery' is set
            if (xQuery == null)
                throw new ApiException(400, "Missing required parameter 'xQuery' when calling ConvertDataApi->ConvertDataXmlQueryWithXQuery");

            var localVarPath = "/convert/xml/query/xquery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xQuery != null) localVarHeaderParams.Add("XQuery", Configuration.ApiClient.ParameterToString(xQuery)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlQueryWithXQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlQueryWithXQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlQueryWithXQueryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlQueryWithXQueryResult)));
        }

        /// <summary>
        /// Query an XML file using XQuery query, get results Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>Task of XmlQueryWithXQueryResult</returns>
        public async System.Threading.Tasks.Task<XmlQueryWithXQueryResult> ConvertDataXmlQueryWithXQueryAsync (System.IO.Stream inputFile, string xQuery)
        {
             ApiResponse<XmlQueryWithXQueryResult> localVarResponse = await ConvertDataXmlQueryWithXQueryAsyncWithHttpInfo(inputFile, xQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query an XML file using XQuery query, get results Return the reuslts of querying a single XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for a single XML document as input.  Provided XML document is automatically loaded as the default context; to access elements in the document, simply refer to them without a document reference, such as bookstore/book
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <returns>Task of ApiResponse (XmlQueryWithXQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlQueryWithXQueryResult>> ConvertDataXmlQueryWithXQueryAsyncWithHttpInfo (System.IO.Stream inputFile, string xQuery)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlQueryWithXQuery");
            // verify the required parameter 'xQuery' is set
            if (xQuery == null)
                throw new ApiException(400, "Missing required parameter 'xQuery' when calling ConvertDataApi->ConvertDataXmlQueryWithXQuery");

            var localVarPath = "/convert/xml/query/xquery";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xQuery != null) localVarHeaderParams.Add("XQuery", Configuration.ApiClient.ParameterToString(xQuery)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlQueryWithXQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlQueryWithXQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlQueryWithXQueryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlQueryWithXQueryResult)));
        }

        /// <summary>
        /// Query multiple XML files using XQuery query, get results Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>XmlQueryWithXQueryMultiResult</returns>
        public XmlQueryWithXQueryMultiResult ConvertDataXmlQueryWithXQueryMulti (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<XmlQueryWithXQueryMultiResult> localVarResponse = ConvertDataXmlQueryWithXQueryMultiWithHttpInfo(inputFile1, xQuery, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query multiple XML files using XQuery query, get results Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of XmlQueryWithXQueryMultiResult</returns>
        public ApiResponse< XmlQueryWithXQueryMultiResult > ConvertDataXmlQueryWithXQueryMultiWithHttpInfo (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling ConvertDataApi->ConvertDataXmlQueryWithXQueryMulti");
            // verify the required parameter 'xQuery' is set
            if (xQuery == null)
                throw new ApiException(400, "Missing required parameter 'xQuery' when calling ConvertDataApi->ConvertDataXmlQueryWithXQueryMulti");

            var localVarPath = "/convert/xml/query/xquery/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xQuery != null) localVarHeaderParams.Add("XQuery", Configuration.ApiClient.ParameterToString(xQuery)); // header parameter
            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlQueryWithXQueryMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlQueryWithXQueryMultiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlQueryWithXQueryMultiResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlQueryWithXQueryMultiResult)));
        }

        /// <summary>
        /// Query multiple XML files using XQuery query, get results Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>Task of XmlQueryWithXQueryMultiResult</returns>
        public async System.Threading.Tasks.Task<XmlQueryWithXQueryMultiResult> ConvertDataXmlQueryWithXQueryMultiAsync (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<XmlQueryWithXQueryMultiResult> localVarResponse = await ConvertDataXmlQueryWithXQueryMultiAsyncWithHttpInfo(inputFile1, xQuery, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query multiple XML files using XQuery query, get results Return the reuslts of querying an XML document with an XQuery expression.  Supports XQuery 3.1 and earlier.  This API is optimized for multiple XML documents as input.  You can refer to the contents of a given document by name, for example doc(\&quot;books.xml\&quot;) or doc(\&quot;restaurants.xml\&quot;) if you included two input files named books.xml and restaurants.xml.  If input files contain no file name, they will default to file names input1.xml, input2.xml and so on.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input XML file to perform the operation on.</param>
        /// <param name="xQuery">Valid XML XQuery 3.1 or earlier query expression; multi-line expressions are supported</param>
        /// <param name="inputFile2">Second input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input XML file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input XML file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (XmlQueryWithXQueryMultiResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlQueryWithXQueryMultiResult>> ConvertDataXmlQueryWithXQueryMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, string xQuery, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling ConvertDataApi->ConvertDataXmlQueryWithXQueryMulti");
            // verify the required parameter 'xQuery' is set
            if (xQuery == null)
                throw new ApiException(400, "Missing required parameter 'xQuery' when calling ConvertDataApi->ConvertDataXmlQueryWithXQueryMulti");

            var localVarPath = "/convert/xml/query/xquery/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xQuery != null) localVarHeaderParams.Add("XQuery", Configuration.ApiClient.ParameterToString(xQuery)); // header parameter
            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlQueryWithXQueryMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlQueryWithXQueryMultiResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlQueryWithXQueryMultiResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlQueryWithXQueryMultiResult)));
        }

        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>XmlRemoveWithXPathResult</returns>
        public XmlRemoveWithXPathResult ConvertDataXmlRemoveWithXPath (string xPathExpression, System.IO.Stream inputFile)
        {
             ApiResponse<XmlRemoveWithXPathResult> localVarResponse = ConvertDataXmlRemoveWithXPathWithHttpInfo(xPathExpression, inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of XmlRemoveWithXPathResult</returns>
        public ApiResponse< XmlRemoveWithXPathResult > ConvertDataXmlRemoveWithXPathWithHttpInfo (string xPathExpression, System.IO.Stream inputFile)
        {
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlRemoveWithXPath");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlRemoveWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlRemoveWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlRemoveWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlRemoveWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlRemoveWithXPathResult)));
        }

        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of XmlRemoveWithXPathResult</returns>
        public async System.Threading.Tasks.Task<XmlRemoveWithXPathResult> ConvertDataXmlRemoveWithXPathAsync (string xPathExpression, System.IO.Stream inputFile)
        {
             ApiResponse<XmlRemoveWithXPathResult> localVarResponse = await ConvertDataXmlRemoveWithXPathAsyncWithHttpInfo(xPathExpression, inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove, delete XML nodes and items matching XPath expression Return the reuslts of editing an XML document by removing all of the nodes that match an input XPath expression
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPathExpression">Valid XML XPath query expression</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (XmlRemoveWithXPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XmlRemoveWithXPathResult>> ConvertDataXmlRemoveWithXPathAsyncWithHttpInfo (string xPathExpression, System.IO.Stream inputFile)
        {
            // verify the required parameter 'xPathExpression' is set
            if (xPathExpression == null)
                throw new ApiException(400, "Missing required parameter 'xPathExpression' when calling ConvertDataApi->ConvertDataXmlRemoveWithXPath");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlRemoveWithXPath");

            var localVarPath = "/convert/xml/edit/xpath/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPathExpression != null) localVarHeaderParams.Add("XPathExpression", Configuration.ApiClient.ParameterToString(xPathExpression)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlRemoveWithXPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XmlRemoveWithXPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XmlRemoveWithXPathResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XmlRemoveWithXPathResult)));
        }

        /// <summary>
        /// Convert XML to JSON conversion Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Object</returns>
        public Object ConvertDataXmlToJson (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = ConvertDataXmlToJsonWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert XML to JSON conversion Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConvertDataXmlToJsonWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlToJson");

            var localVarPath = "/convert/xml/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Convert XML to JSON conversion Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConvertDataXmlToJsonAsync (System.IO.Stream inputFile)
        {
             ApiResponse<Object> localVarResponse = await ConvertDataXmlToJsonAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert XML to JSON conversion Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertDataXmlToJsonAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlToJson");

            var localVarPath = "/convert/xml/to/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Transform XML document file with XSLT into a new XML document Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>byte[]</returns>
        public byte[] ConvertDataXmlTransformWithXsltToXml (System.IO.Stream inputFile, System.IO.Stream transformFile)
        {
             ApiResponse<byte[]> localVarResponse = ConvertDataXmlTransformWithXsltToXmlWithHttpInfo(inputFile, transformFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transform XML document file with XSLT into a new XML document Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ConvertDataXmlTransformWithXsltToXmlWithHttpInfo (System.IO.Stream inputFile, System.IO.Stream transformFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlTransformWithXsltToXml");
            // verify the required parameter 'transformFile' is set
            if (transformFile == null)
                throw new ApiException(400, "Missing required parameter 'transformFile' when calling ConvertDataApi->ConvertDataXmlTransformWithXsltToXml");

            var localVarPath = "/convert/xml/transform/xslt/to/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));
            if (transformFile != null) localVarFileParams.Add("transformFile", Configuration.ApiClient.ParameterToFile("transformFile", transformFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlTransformWithXsltToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Transform XML document file with XSLT into a new XML document Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ConvertDataXmlTransformWithXsltToXmlAsync (System.IO.Stream inputFile, System.IO.Stream transformFile)
        {
             ApiResponse<byte[]> localVarResponse = await ConvertDataXmlTransformWithXsltToXmlAsyncWithHttpInfo(inputFile, transformFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transform XML document file with XSLT into a new XML document Convert an XML string or file into JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input XML file to perform the operation on.</param>
        /// <param name="transformFile">Input XSLT file to use to transform the input XML file.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ConvertDataXmlTransformWithXsltToXmlAsyncWithHttpInfo (System.IO.Stream inputFile, System.IO.Stream transformFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ConvertDataApi->ConvertDataXmlTransformWithXsltToXml");
            // verify the required parameter 'transformFile' is set
            if (transformFile == null)
                throw new ApiException(400, "Missing required parameter 'transformFile' when calling ConvertDataApi->ConvertDataXmlTransformWithXsltToXml");

            var localVarPath = "/convert/xml/transform/xslt/to/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));
            if (transformFile != null) localVarFileParams.Add("transformFile", Configuration.ApiClient.ParameterToFile("transformFile", transformFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDataXmlTransformWithXsltToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
