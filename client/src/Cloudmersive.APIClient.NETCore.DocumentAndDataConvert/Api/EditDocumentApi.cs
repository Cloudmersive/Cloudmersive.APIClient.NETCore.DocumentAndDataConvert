/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEditDocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Begin editing a document
        /// </summary>
        /// <remarks>
        /// Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>string</returns>
        string EditDocumentBeginEditing (System.IO.Stream inputFile);

        /// <summary>
        /// Begin editing a document
        /// </summary>
        /// <remarks>
        /// Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EditDocumentBeginEditingWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxAcceptAllTrackChanges (System.IO.Stream inputFile);

        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxAcceptAllTrackChangesWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Get body from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxBodyResponse</returns>
        GetDocxBodyResponse EditDocumentDocxBody (GetDocxBodyRequest reqConfig);

        /// <summary>
        /// Get body from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxBodyResponse</returns>
        ApiResponse<GetDocxBodyResponse> EditDocumentDocxBodyWithHttpInfo (GetDocxBodyRequest reqConfig);
        /// <summary>
        /// Create a blank Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>CreateBlankDocxResponse</returns>
        CreateBlankDocxResponse EditDocumentDocxCreateBlankDocument (CreateBlankDocxRequest input);

        /// <summary>
        /// Create a blank Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of CreateBlankDocxResponse</returns>
        ApiResponse<CreateBlankDocxResponse> EditDocumentDocxCreateBlankDocumentWithHttpInfo (CreateBlankDocxRequest input);
        /// <summary>
        /// Delete, remove pages from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxDeletePages (RemoveDocxPagesRequest reqConfig);

        /// <summary>
        /// Delete, remove pages from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxDeletePagesWithHttpInfo (RemoveDocxPagesRequest reqConfig);
        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DeleteDocxTableRowResponse</returns>
        DeleteDocxTableRowResponse EditDocumentDocxDeleteTableRow (DeleteDocxTableRowRequest reqConfig);

        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DeleteDocxTableRowResponse</returns>
        ApiResponse<DeleteDocxTableRowResponse> EditDocumentDocxDeleteTableRowWithHttpInfo (DeleteDocxTableRowRequest reqConfig);
        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DeleteDocxTableRowRangeResponse</returns>
        DeleteDocxTableRowRangeResponse EditDocumentDocxDeleteTableRowRange (DeleteDocxTableRowRangeRequest reqConfig);

        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DeleteDocxTableRowRangeResponse</returns>
        ApiResponse<DeleteDocxTableRowRangeResponse> EditDocumentDocxDeleteTableRowRangeWithHttpInfo (DeleteDocxTableRowRangeRequest reqConfig);
        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxDisableTrackChanges (System.IO.Stream inputFile);

        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxDisableTrackChangesWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxEnableTrackChanges (System.IO.Stream inputFile);

        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxEnableTrackChangesWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Find matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>FindDocxParagraphResponse</returns>
        FindDocxParagraphResponse EditDocumentDocxFindParagraph (FindDocxParagraphRequest reqConfig);

        /// <summary>
        /// Find matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of FindDocxParagraphResponse</returns>
        ApiResponse<FindDocxParagraphResponse> EditDocumentDocxFindParagraphWithHttpInfo (FindDocxParagraphRequest reqConfig);
        /// <summary>
        /// Get comments from a Word DOCX document as a flat list
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxCommentsResponse</returns>
        GetDocxCommentsResponse EditDocumentDocxGetComments (GetDocxGetCommentsRequest reqConfig);

        /// <summary>
        /// Get comments from a Word DOCX document as a flat list
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxCommentsResponse</returns>
        ApiResponse<GetDocxCommentsResponse> EditDocumentDocxGetCommentsWithHttpInfo (GetDocxGetCommentsRequest reqConfig);
        /// <summary>
        /// Get comments from a Word DOCX document hierarchically
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxCommentsHierarchicalResponse</returns>
        GetDocxCommentsHierarchicalResponse EditDocumentDocxGetCommentsHierarchical (GetDocxGetCommentsHierarchicalRequest reqConfig);

        /// <summary>
        /// Get comments from a Word DOCX document hierarchically
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxCommentsHierarchicalResponse</returns>
        ApiResponse<GetDocxCommentsHierarchicalResponse> EditDocumentDocxGetCommentsHierarchicalWithHttpInfo (GetDocxGetCommentsHierarchicalRequest reqConfig);
        /// <summary>
        /// Get content of a footer from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the footer content from a Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxHeadersAndFootersResponse</returns>
        GetDocxHeadersAndFootersResponse EditDocumentDocxGetHeadersAndFooters (GetDocxHeadersAndFootersRequest reqConfig);

        /// <summary>
        /// Get content of a footer from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the footer content from a Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxHeadersAndFootersResponse</returns>
        ApiResponse<GetDocxHeadersAndFootersResponse> EditDocumentDocxGetHeadersAndFootersWithHttpInfo (GetDocxHeadersAndFootersRequest reqConfig);
        /// <summary>
        /// Get images from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxImagesResponse</returns>
        GetDocxImagesResponse EditDocumentDocxGetImages (GetDocxImagesRequest reqConfig);

        /// <summary>
        /// Get images from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxImagesResponse</returns>
        ApiResponse<GetDocxImagesResponse> EditDocumentDocxGetImagesWithHttpInfo (GetDocxImagesRequest reqConfig);
        /// <summary>
        /// Get all metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>GetDocxMetadataPropertiesResponse</returns>
        GetDocxMetadataPropertiesResponse EditDocumentDocxGetMetadataProperties (System.IO.Stream inputFile);

        /// <summary>
        /// Get all metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of GetDocxMetadataPropertiesResponse</returns>
        ApiResponse<GetDocxMetadataPropertiesResponse> EditDocumentDocxGetMetadataPropertiesWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Get sections from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the sections defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxSectionsResponse</returns>
        GetDocxSectionsResponse EditDocumentDocxGetSections (GetDocxSectionsRequest reqConfig);

        /// <summary>
        /// Get sections from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the sections defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxSectionsResponse</returns>
        ApiResponse<GetDocxSectionsResponse> EditDocumentDocxGetSectionsWithHttpInfo (GetDocxSectionsRequest reqConfig);
        /// <summary>
        /// Get styles from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the styles defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxStylesResponse</returns>
        GetDocxStylesResponse EditDocumentDocxGetStyles (GetDocxStylesRequest reqConfig);

        /// <summary>
        /// Get styles from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the styles defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxStylesResponse</returns>
        ApiResponse<GetDocxStylesResponse> EditDocumentDocxGetStylesWithHttpInfo (GetDocxStylesRequest reqConfig);
        /// <summary>
        /// Get a specific table by index in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxTableByIndexResponse</returns>
        GetDocxTableByIndexResponse EditDocumentDocxGetTableByIndex (GetDocxTableByIndexRequest reqConfig);

        /// <summary>
        /// Get a specific table by index in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxTableByIndexResponse</returns>
        ApiResponse<GetDocxTableByIndexResponse> EditDocumentDocxGetTableByIndexWithHttpInfo (GetDocxTableByIndexRequest reqConfig);
        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxTableRowResponse</returns>
        GetDocxTableRowResponse EditDocumentDocxGetTableRow (GetDocxTableRowRequest reqConfig);

        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxTableRowResponse</returns>
        ApiResponse<GetDocxTableRowResponse> EditDocumentDocxGetTableRowWithHttpInfo (GetDocxTableRowRequest reqConfig);
        /// <summary>
        /// Get all tables in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the table objects in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxTablesResponse</returns>
        GetDocxTablesResponse EditDocumentDocxGetTables (GetDocxTablesRequest reqConfig);

        /// <summary>
        /// Get all tables in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the table objects in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxTablesResponse</returns>
        ApiResponse<GetDocxTablesResponse> EditDocumentDocxGetTablesWithHttpInfo (GetDocxTablesRequest reqConfig);
        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph
        /// </summary>
        /// <remarks>
        /// Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxCommentOnParagraphResponse</returns>
        InsertDocxCommentOnParagraphResponse EditDocumentDocxInsertCommentOnParagraph (DocxInsertCommentOnParagraphRequest reqConfig);

        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph
        /// </summary>
        /// <remarks>
        /// Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxCommentOnParagraphResponse</returns>
        ApiResponse<InsertDocxCommentOnParagraphResponse> EditDocumentDocxInsertCommentOnParagraphWithHttpInfo (DocxInsertCommentOnParagraphRequest reqConfig);
        /// <summary>
        /// Insert image into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxInsertImageResponse</returns>
        DocxInsertImageResponse EditDocumentDocxInsertImage (DocxInsertImageRequest reqConfig);

        /// <summary>
        /// Insert image into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxInsertImageResponse</returns>
        ApiResponse<DocxInsertImageResponse> EditDocumentDocxInsertImageWithHttpInfo (DocxInsertImageRequest reqConfig);
        /// <summary>
        /// Insert a new paragraph into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxInsertParagraphResponse</returns>
        InsertDocxInsertParagraphResponse EditDocumentDocxInsertParagraph (InsertDocxInsertParagraphRequest reqConfig);

        /// <summary>
        /// Insert a new paragraph into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxInsertParagraphResponse</returns>
        ApiResponse<InsertDocxInsertParagraphResponse> EditDocumentDocxInsertParagraphWithHttpInfo (InsertDocxInsertParagraphRequest reqConfig);
        /// <summary>
        /// Insert a new table into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxTablesResponse</returns>
        InsertDocxTablesResponse EditDocumentDocxInsertTable (InsertDocxTablesRequest reqConfig);

        /// <summary>
        /// Insert a new table into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxTablesResponse</returns>
        ApiResponse<InsertDocxTablesResponse> EditDocumentDocxInsertTableWithHttpInfo (InsertDocxTablesRequest reqConfig);
        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxTableRowResponse</returns>
        InsertDocxTableRowResponse EditDocumentDocxInsertTableRow (InsertDocxTableRowRequest reqConfig);

        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxTableRowResponse</returns>
        ApiResponse<InsertDocxTableRowResponse> EditDocumentDocxInsertTableRowWithHttpInfo (InsertDocxTableRowRequest reqConfig);
        /// <summary>
        /// Get pages and content from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxPagesResponse</returns>
        GetDocxPagesResponse EditDocumentDocxPages (GetDocxPagesRequest reqConfig);

        /// <summary>
        /// Get pages and content from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxPagesResponse</returns>
        ApiResponse<GetDocxPagesResponse> EditDocumentDocxPagesWithHttpInfo (GetDocxPagesRequest reqConfig);
        /// <summary>
        /// Remove all comments from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Removes all of the comments from a Word Document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxRemoveAllComments (System.IO.Stream inputFile);

        /// <summary>
        /// Remove all comments from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Removes all of the comments from a Word Document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxRemoveAllCommentsWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Remove headers and footers from Word DOCX document
        /// </summary>
        /// <remarks>
        /// Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>RemoveDocxHeadersAndFootersResponse</returns>
        RemoveDocxHeadersAndFootersResponse EditDocumentDocxRemoveHeadersAndFooters (RemoveDocxHeadersAndFootersRequest reqConfig);

        /// <summary>
        /// Remove headers and footers from Word DOCX document
        /// </summary>
        /// <remarks>
        /// Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of RemoveDocxHeadersAndFootersResponse</returns>
        ApiResponse<RemoveDocxHeadersAndFootersResponse> EditDocumentDocxRemoveHeadersAndFootersWithHttpInfo (RemoveDocxHeadersAndFootersRequest reqConfig);
        /// <summary>
        /// Delete any object in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxRemoveObjectResponse</returns>
        DocxRemoveObjectResponse EditDocumentDocxRemoveObject (DocxRemoveObjectRequest reqConfig);

        /// <summary>
        /// Delete any object in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxRemoveObjectResponse</returns>
        ApiResponse<DocxRemoveObjectResponse> EditDocumentDocxRemoveObjectWithHttpInfo (DocxRemoveObjectRequest reqConfig);
        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxReplace (ReplaceStringRequest reqConfig);

        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxReplaceWithHttpInfo (ReplaceStringRequest reqConfig);
        /// <summary>
        /// Replace multiple strings in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of multiple strings in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxReplaceMulti (MultiReplaceStringRequest reqConfig);

        /// <summary>
        /// Replace multiple strings in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of multiple strings in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxReplaceMultiWithHttpInfo (MultiReplaceStringRequest reqConfig);
        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ReplaceDocxParagraphResponse</returns>
        ReplaceDocxParagraphResponse EditDocumentDocxReplaceParagraph (ReplaceDocxParagraphRequest reqConfig);

        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of ReplaceDocxParagraphResponse</returns>
        ApiResponse<ReplaceDocxParagraphResponse> EditDocumentDocxReplaceParagraphWithHttpInfo (ReplaceDocxParagraphRequest reqConfig);
        /// <summary>
        /// Set custom property metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentDocxSetCustomMetadataProperties (DocxSetCustomMetadataPropertiesRequest input);

        /// <summary>
        /// Set custom property metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentDocxSetCustomMetadataPropertiesWithHttpInfo (DocxSetCustomMetadataPropertiesRequest input);
        /// <summary>
        /// Set the footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxSetFooterResponse</returns>
        DocxSetFooterResponse EditDocumentDocxSetFooter (DocxSetFooterRequest reqConfig);

        /// <summary>
        /// Set the footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxSetFooterResponse</returns>
        ApiResponse<DocxSetFooterResponse> EditDocumentDocxSetFooterWithHttpInfo (DocxSetFooterRequest reqConfig);
        /// <summary>
        /// Add page number to footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxSetFooterResponse</returns>
        DocxSetFooterResponse EditDocumentDocxSetFooterAddPageNumber (DocxSetFooterAddPageNumberRequest reqConfig);

        /// <summary>
        /// Add page number to footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxSetFooterResponse</returns>
        ApiResponse<DocxSetFooterResponse> EditDocumentDocxSetFooterAddPageNumberWithHttpInfo (DocxSetFooterAddPageNumberRequest reqConfig);
        /// <summary>
        /// Set the header in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxSetHeaderResponse</returns>
        DocxSetHeaderResponse EditDocumentDocxSetHeader (DocxSetHeaderRequest reqConfig);

        /// <summary>
        /// Set the header in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxSetHeaderResponse</returns>
        ApiResponse<DocxSetHeaderResponse> EditDocumentDocxSetHeaderWithHttpInfo (DocxSetHeaderRequest reqConfig);
        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>UpdateDocxTableCellResponse</returns>
        UpdateDocxTableCellResponse EditDocumentDocxUpdateTableCell (UpdateDocxTableCellRequest reqConfig);

        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of UpdateDocxTableCellResponse</returns>
        ApiResponse<UpdateDocxTableCellResponse> EditDocumentDocxUpdateTableCellWithHttpInfo (UpdateDocxTableCellRequest reqConfig);
        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>UpdateDocxTableRowResponse</returns>
        UpdateDocxTableRowResponse EditDocumentDocxUpdateTableRow (UpdateDocxTableRowRequest reqConfig);

        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of UpdateDocxTableRowResponse</returns>
        ApiResponse<UpdateDocxTableRowResponse> EditDocumentDocxUpdateTableRowWithHttpInfo (UpdateDocxTableRowRequest reqConfig);
        /// <summary>
        /// Finish editing document, and download result from document editing
        /// </summary>
        /// <remarks>
        /// Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentFinishEditing (FinishEditingRequest reqConfig);

        /// <summary>
        /// Finish editing document, and download result from document editing
        /// </summary>
        /// <remarks>
        /// Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentFinishEditingWithHttpInfo (FinishEditingRequest reqConfig);
        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document
        /// </summary>
        /// <remarks>
        /// Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentPptxDeleteSlides (RemovePptxSlidesRequest reqConfig);

        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document
        /// </summary>
        /// <remarks>
        /// Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentPptxDeleteSlidesWithHttpInfo (RemovePptxSlidesRequest reqConfig);
        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentPptxReplace (ReplaceStringRequest reqConfig);

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentPptxReplaceWithHttpInfo (ReplaceStringRequest reqConfig);
        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>AppendXlsxRowResponse</returns>
        AppendXlsxRowResponse EditDocumentXlsxAppendRow (AppendXlsxRowRequest input);

        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of AppendXlsxRowResponse</returns>
        ApiResponse<AppendXlsxRowResponse> EditDocumentXlsxAppendRowWithHttpInfo (AppendXlsxRowRequest input);
        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ClearXlsxCellResponse</returns>
        ClearXlsxCellResponse EditDocumentXlsxClearCellByIndex (ClearXlsxCellRequest input);

        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of ClearXlsxCellResponse</returns>
        ApiResponse<ClearXlsxCellResponse> EditDocumentXlsxClearCellByIndexWithHttpInfo (ClearXlsxCellRequest input);
        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ClearXlsxRowResponse</returns>
        ClearXlsxRowResponse EditDocumentXlsxClearRow (ClearXlsxRowRequest input);

        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of ClearXlsxRowResponse</returns>
        ApiResponse<ClearXlsxRowResponse> EditDocumentXlsxClearRowWithHttpInfo (ClearXlsxRowRequest input);
        /// <summary>
        /// Create a blank Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>CreateBlankSpreadsheetResponse</returns>
        CreateBlankSpreadsheetResponse EditDocumentXlsxCreateBlankSpreadsheet (CreateBlankSpreadsheetRequest input);

        /// <summary>
        /// Create a blank Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of CreateBlankSpreadsheetResponse</returns>
        ApiResponse<CreateBlankSpreadsheetResponse> EditDocumentXlsxCreateBlankSpreadsheetWithHttpInfo (CreateBlankSpreadsheetRequest input);
        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data
        /// </summary>
        /// <remarks>
        /// Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>CreateSpreadsheetFromDataResponse</returns>
        CreateSpreadsheetFromDataResponse EditDocumentXlsxCreateSpreadsheetFromData (CreateSpreadsheetFromDataRequest input);

        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data
        /// </summary>
        /// <remarks>
        /// Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of CreateSpreadsheetFromDataResponse</returns>
        ApiResponse<CreateSpreadsheetFromDataResponse> EditDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo (CreateSpreadsheetFromDataRequest input);
        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>byte[]</returns>
        byte[] EditDocumentXlsxDeleteWorksheet (RemoveXlsxWorksheetRequest reqConfig);

        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDocumentXlsxDeleteWorksheetWithHttpInfo (RemoveXlsxWorksheetRequest reqConfig);
        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>DisableSharedWorkbookResponse</returns>
        DisableSharedWorkbookResponse EditDocumentXlsxDisableSharedWorkbook (DisableSharedWorkbookRequest input);

        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of DisableSharedWorkbookResponse</returns>
        ApiResponse<DisableSharedWorkbookResponse> EditDocumentXlsxDisableSharedWorkbookWithHttpInfo (DisableSharedWorkbookRequest input);
        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>EnableSharedWorkbookResponse</returns>
        EnableSharedWorkbookResponse EditDocumentXlsxEnableSharedWorkbook (EnableSharedWorkbookRequest input);

        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of EnableSharedWorkbookResponse</returns>
        ApiResponse<EnableSharedWorkbookResponse> EditDocumentXlsxEnableSharedWorkbookWithHttpInfo (EnableSharedWorkbookRequest input);
        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxCellByIdentifierResponse</returns>
        GetXlsxCellByIdentifierResponse EditDocumentXlsxGetCellByIdentifier (GetXlsxCellByIdentifierRequest input);

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxCellByIdentifierResponse</returns>
        ApiResponse<GetXlsxCellByIdentifierResponse> EditDocumentXlsxGetCellByIdentifierWithHttpInfo (GetXlsxCellByIdentifierRequest input);
        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxCellResponse</returns>
        GetXlsxCellResponse EditDocumentXlsxGetCellByIndex (GetXlsxCellRequest input);

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxCellResponse</returns>
        ApiResponse<GetXlsxCellResponse> EditDocumentXlsxGetCellByIndexWithHttpInfo (GetXlsxCellRequest input);
        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the columns defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxColumnsResponse</returns>
        GetXlsxColumnsResponse EditDocumentXlsxGetColumns (GetXlsxColumnsRequest input);

        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the columns defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxColumnsResponse</returns>
        ApiResponse<GetXlsxColumnsResponse> EditDocumentXlsxGetColumnsWithHttpInfo (GetXlsxColumnsRequest input);
        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxImagesResponse</returns>
        GetXlsxImagesResponse EditDocumentXlsxGetImages (GetXlsxImagesRequest input);

        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxImagesResponse</returns>
        ApiResponse<GetXlsxImagesResponse> EditDocumentXlsxGetImagesWithHttpInfo (GetXlsxImagesRequest input);
        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxRowsAndCellsResponse</returns>
        GetXlsxRowsAndCellsResponse EditDocumentXlsxGetRowsAndCells (GetXlsxRowsAndCellsRequest input);

        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxRowsAndCellsResponse</returns>
        ApiResponse<GetXlsxRowsAndCellsResponse> EditDocumentXlsxGetRowsAndCellsWithHttpInfo (GetXlsxRowsAndCellsRequest input);
        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path
        /// </summary>
        /// <remarks>
        /// Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxSpecificRowResponse</returns>
        GetXlsxSpecificRowResponse EditDocumentXlsxGetSpecificRow (GetXlsxSpecificRowRequest input);

        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path
        /// </summary>
        /// <remarks>
        /// Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxSpecificRowResponse</returns>
        ApiResponse<GetXlsxSpecificRowResponse> EditDocumentXlsxGetSpecificRowWithHttpInfo (GetXlsxSpecificRowRequest input);
        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the style defined in the Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxStylesResponse</returns>
        GetXlsxStylesResponse EditDocumentXlsxGetStyles (GetXlsxStylesRequest input);

        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the style defined in the Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxStylesResponse</returns>
        ApiResponse<GetXlsxStylesResponse> EditDocumentXlsxGetStylesWithHttpInfo (GetXlsxStylesRequest input);
        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxWorksheetsResponse</returns>
        GetXlsxWorksheetsResponse EditDocumentXlsxGetWorksheets (GetXlsxWorksheetsRequest input);

        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxWorksheetsResponse</returns>
        ApiResponse<GetXlsxWorksheetsResponse> EditDocumentXlsxGetWorksheetsWithHttpInfo (GetXlsxWorksheetsRequest input);
        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Inserts a new worksheet into an Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>InsertXlsxWorksheetResponse</returns>
        InsertXlsxWorksheetResponse EditDocumentXlsxInsertWorksheet (InsertXlsxWorksheetRequest input);

        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Inserts a new worksheet into an Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of InsertXlsxWorksheetResponse</returns>
        ApiResponse<InsertXlsxWorksheetResponse> EditDocumentXlsxInsertWorksheetWithHttpInfo (InsertXlsxWorksheetRequest input);
        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>RenameXlsxWorksheetResponse</returns>
        RenameXlsxWorksheetResponse EditDocumentXlsxRenameWorksheet (RenameXlsxWorksheetRequest input);

        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of RenameXlsxWorksheetResponse</returns>
        ApiResponse<RenameXlsxWorksheetResponse> EditDocumentXlsxRenameWorksheetWithHttpInfo (RenameXlsxWorksheetRequest input);
        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>SetXlsxCellByIdentifierResponse</returns>
        SetXlsxCellByIdentifierResponse EditDocumentXlsxSetCellByIdentifier (SetXlsxCellByIdentifierRequest input);

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of SetXlsxCellByIdentifierResponse</returns>
        ApiResponse<SetXlsxCellByIdentifierResponse> EditDocumentXlsxSetCellByIdentifierWithHttpInfo (SetXlsxCellByIdentifierRequest input);
        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>SetXlsxCellResponse</returns>
        SetXlsxCellResponse EditDocumentXlsxSetCellByIndex (SetXlsxCellRequest input);

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of SetXlsxCellResponse</returns>
        ApiResponse<SetXlsxCellResponse> EditDocumentXlsxSetCellByIndexWithHttpInfo (SetXlsxCellRequest input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Begin editing a document
        /// </summary>
        /// <remarks>
        /// Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EditDocumentBeginEditingAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Begin editing a document
        /// </summary>
        /// <remarks>
        /// Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EditDocumentBeginEditingAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxAcceptAllTrackChangesAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxAcceptAllTrackChangesAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Get body from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxBodyResponse</returns>
        System.Threading.Tasks.Task<GetDocxBodyResponse> EditDocumentDocxBodyAsync (GetDocxBodyRequest reqConfig);

        /// <summary>
        /// Get body from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxBodyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxBodyResponse>> EditDocumentDocxBodyAsyncWithHttpInfo (GetDocxBodyRequest reqConfig);
        /// <summary>
        /// Create a blank Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of CreateBlankDocxResponse</returns>
        System.Threading.Tasks.Task<CreateBlankDocxResponse> EditDocumentDocxCreateBlankDocumentAsync (CreateBlankDocxRequest input);

        /// <summary>
        /// Create a blank Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (CreateBlankDocxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateBlankDocxResponse>> EditDocumentDocxCreateBlankDocumentAsyncWithHttpInfo (CreateBlankDocxRequest input);
        /// <summary>
        /// Delete, remove pages from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxDeletePagesAsync (RemoveDocxPagesRequest reqConfig);

        /// <summary>
        /// Delete, remove pages from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxDeletePagesAsyncWithHttpInfo (RemoveDocxPagesRequest reqConfig);
        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DeleteDocxTableRowResponse</returns>
        System.Threading.Tasks.Task<DeleteDocxTableRowResponse> EditDocumentDocxDeleteTableRowAsync (DeleteDocxTableRowRequest reqConfig);

        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DeleteDocxTableRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDocxTableRowResponse>> EditDocumentDocxDeleteTableRowAsyncWithHttpInfo (DeleteDocxTableRowRequest reqConfig);
        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DeleteDocxTableRowRangeResponse</returns>
        System.Threading.Tasks.Task<DeleteDocxTableRowRangeResponse> EditDocumentDocxDeleteTableRowRangeAsync (DeleteDocxTableRowRangeRequest reqConfig);

        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DeleteDocxTableRowRangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDocxTableRowRangeResponse>> EditDocumentDocxDeleteTableRowRangeAsyncWithHttpInfo (DeleteDocxTableRowRangeRequest reqConfig);
        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxDisableTrackChangesAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxDisableTrackChangesAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxEnableTrackChangesAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxEnableTrackChangesAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Find matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of FindDocxParagraphResponse</returns>
        System.Threading.Tasks.Task<FindDocxParagraphResponse> EditDocumentDocxFindParagraphAsync (FindDocxParagraphRequest reqConfig);

        /// <summary>
        /// Find matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (FindDocxParagraphResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindDocxParagraphResponse>> EditDocumentDocxFindParagraphAsyncWithHttpInfo (FindDocxParagraphRequest reqConfig);
        /// <summary>
        /// Get comments from a Word DOCX document as a flat list
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxCommentsResponse</returns>
        System.Threading.Tasks.Task<GetDocxCommentsResponse> EditDocumentDocxGetCommentsAsync (GetDocxGetCommentsRequest reqConfig);

        /// <summary>
        /// Get comments from a Word DOCX document as a flat list
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxCommentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxCommentsResponse>> EditDocumentDocxGetCommentsAsyncWithHttpInfo (GetDocxGetCommentsRequest reqConfig);
        /// <summary>
        /// Get comments from a Word DOCX document hierarchically
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxCommentsHierarchicalResponse</returns>
        System.Threading.Tasks.Task<GetDocxCommentsHierarchicalResponse> EditDocumentDocxGetCommentsHierarchicalAsync (GetDocxGetCommentsHierarchicalRequest reqConfig);

        /// <summary>
        /// Get comments from a Word DOCX document hierarchically
        /// </summary>
        /// <remarks>
        /// Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxCommentsHierarchicalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxCommentsHierarchicalResponse>> EditDocumentDocxGetCommentsHierarchicalAsyncWithHttpInfo (GetDocxGetCommentsHierarchicalRequest reqConfig);
        /// <summary>
        /// Get content of a footer from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the footer content from a Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxHeadersAndFootersResponse</returns>
        System.Threading.Tasks.Task<GetDocxHeadersAndFootersResponse> EditDocumentDocxGetHeadersAndFootersAsync (GetDocxHeadersAndFootersRequest reqConfig);

        /// <summary>
        /// Get content of a footer from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the footer content from a Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxHeadersAndFootersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxHeadersAndFootersResponse>> EditDocumentDocxGetHeadersAndFootersAsyncWithHttpInfo (GetDocxHeadersAndFootersRequest reqConfig);
        /// <summary>
        /// Get images from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxImagesResponse</returns>
        System.Threading.Tasks.Task<GetDocxImagesResponse> EditDocumentDocxGetImagesAsync (GetDocxImagesRequest reqConfig);

        /// <summary>
        /// Get images from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxImagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxImagesResponse>> EditDocumentDocxGetImagesAsyncWithHttpInfo (GetDocxImagesRequest reqConfig);
        /// <summary>
        /// Get all metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of GetDocxMetadataPropertiesResponse</returns>
        System.Threading.Tasks.Task<GetDocxMetadataPropertiesResponse> EditDocumentDocxGetMetadataPropertiesAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Get all metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (GetDocxMetadataPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxMetadataPropertiesResponse>> EditDocumentDocxGetMetadataPropertiesAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Get sections from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the sections defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxSectionsResponse</returns>
        System.Threading.Tasks.Task<GetDocxSectionsResponse> EditDocumentDocxGetSectionsAsync (GetDocxSectionsRequest reqConfig);

        /// <summary>
        /// Get sections from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the sections defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxSectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxSectionsResponse>> EditDocumentDocxGetSectionsAsyncWithHttpInfo (GetDocxSectionsRequest reqConfig);
        /// <summary>
        /// Get styles from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the styles defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxStylesResponse</returns>
        System.Threading.Tasks.Task<GetDocxStylesResponse> EditDocumentDocxGetStylesAsync (GetDocxStylesRequest reqConfig);

        /// <summary>
        /// Get styles from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the styles defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxStylesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxStylesResponse>> EditDocumentDocxGetStylesAsyncWithHttpInfo (GetDocxStylesRequest reqConfig);
        /// <summary>
        /// Get a specific table by index in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxTableByIndexResponse</returns>
        System.Threading.Tasks.Task<GetDocxTableByIndexResponse> EditDocumentDocxGetTableByIndexAsync (GetDocxTableByIndexRequest reqConfig);

        /// <summary>
        /// Get a specific table by index in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxTableByIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxTableByIndexResponse>> EditDocumentDocxGetTableByIndexAsyncWithHttpInfo (GetDocxTableByIndexRequest reqConfig);
        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxTableRowResponse</returns>
        System.Threading.Tasks.Task<GetDocxTableRowResponse> EditDocumentDocxGetTableRowAsync (GetDocxTableRowRequest reqConfig);

        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxTableRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxTableRowResponse>> EditDocumentDocxGetTableRowAsyncWithHttpInfo (GetDocxTableRowRequest reqConfig);
        /// <summary>
        /// Get all tables in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the table objects in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxTablesResponse</returns>
        System.Threading.Tasks.Task<GetDocxTablesResponse> EditDocumentDocxGetTablesAsync (GetDocxTablesRequest reqConfig);

        /// <summary>
        /// Get all tables in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns all the table objects in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxTablesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxTablesResponse>> EditDocumentDocxGetTablesAsyncWithHttpInfo (GetDocxTablesRequest reqConfig);
        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph
        /// </summary>
        /// <remarks>
        /// Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxCommentOnParagraphResponse</returns>
        System.Threading.Tasks.Task<InsertDocxCommentOnParagraphResponse> EditDocumentDocxInsertCommentOnParagraphAsync (DocxInsertCommentOnParagraphRequest reqConfig);

        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph
        /// </summary>
        /// <remarks>
        /// Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxCommentOnParagraphResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertDocxCommentOnParagraphResponse>> EditDocumentDocxInsertCommentOnParagraphAsyncWithHttpInfo (DocxInsertCommentOnParagraphRequest reqConfig);
        /// <summary>
        /// Insert image into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxInsertImageResponse</returns>
        System.Threading.Tasks.Task<DocxInsertImageResponse> EditDocumentDocxInsertImageAsync (DocxInsertImageRequest reqConfig);

        /// <summary>
        /// Insert image into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxInsertImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocxInsertImageResponse>> EditDocumentDocxInsertImageAsyncWithHttpInfo (DocxInsertImageRequest reqConfig);
        /// <summary>
        /// Insert a new paragraph into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxInsertParagraphResponse</returns>
        System.Threading.Tasks.Task<InsertDocxInsertParagraphResponse> EditDocumentDocxInsertParagraphAsync (InsertDocxInsertParagraphRequest reqConfig);

        /// <summary>
        /// Insert a new paragraph into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxInsertParagraphResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertDocxInsertParagraphResponse>> EditDocumentDocxInsertParagraphAsyncWithHttpInfo (InsertDocxInsertParagraphRequest reqConfig);
        /// <summary>
        /// Insert a new table into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxTablesResponse</returns>
        System.Threading.Tasks.Task<InsertDocxTablesResponse> EditDocumentDocxInsertTableAsync (InsertDocxTablesRequest reqConfig);

        /// <summary>
        /// Insert a new table into a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxTablesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertDocxTablesResponse>> EditDocumentDocxInsertTableAsyncWithHttpInfo (InsertDocxTablesRequest reqConfig);
        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxTableRowResponse</returns>
        System.Threading.Tasks.Task<InsertDocxTableRowResponse> EditDocumentDocxInsertTableRowAsync (InsertDocxTableRowRequest reqConfig);

        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxTableRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertDocxTableRowResponse>> EditDocumentDocxInsertTableRowAsyncWithHttpInfo (InsertDocxTableRowRequest reqConfig);
        /// <summary>
        /// Get pages and content from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxPagesResponse</returns>
        System.Threading.Tasks.Task<GetDocxPagesResponse> EditDocumentDocxPagesAsync (GetDocxPagesRequest reqConfig);

        /// <summary>
        /// Get pages and content from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocxPagesResponse>> EditDocumentDocxPagesAsyncWithHttpInfo (GetDocxPagesRequest reqConfig);
        /// <summary>
        /// Remove all comments from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Removes all of the comments from a Word Document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxRemoveAllCommentsAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Remove all comments from a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Removes all of the comments from a Word Document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxRemoveAllCommentsAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Remove headers and footers from Word DOCX document
        /// </summary>
        /// <remarks>
        /// Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of RemoveDocxHeadersAndFootersResponse</returns>
        System.Threading.Tasks.Task<RemoveDocxHeadersAndFootersResponse> EditDocumentDocxRemoveHeadersAndFootersAsync (RemoveDocxHeadersAndFootersRequest reqConfig);

        /// <summary>
        /// Remove headers and footers from Word DOCX document
        /// </summary>
        /// <remarks>
        /// Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (RemoveDocxHeadersAndFootersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveDocxHeadersAndFootersResponse>> EditDocumentDocxRemoveHeadersAndFootersAsyncWithHttpInfo (RemoveDocxHeadersAndFootersRequest reqConfig);
        /// <summary>
        /// Delete any object in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxRemoveObjectResponse</returns>
        System.Threading.Tasks.Task<DocxRemoveObjectResponse> EditDocumentDocxRemoveObjectAsync (DocxRemoveObjectRequest reqConfig);

        /// <summary>
        /// Delete any object in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxRemoveObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocxRemoveObjectResponse>> EditDocumentDocxRemoveObjectAsyncWithHttpInfo (DocxRemoveObjectRequest reqConfig);
        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxReplaceAsync (ReplaceStringRequest reqConfig);

        /// <summary>
        /// Replace string in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxReplaceAsyncWithHttpInfo (ReplaceStringRequest reqConfig);
        /// <summary>
        /// Replace multiple strings in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of multiple strings in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxReplaceMultiAsync (MultiReplaceStringRequest reqConfig);

        /// <summary>
        /// Replace multiple strings in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Replace all instances of multiple strings in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxReplaceMultiAsyncWithHttpInfo (MultiReplaceStringRequest reqConfig);
        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ReplaceDocxParagraphResponse</returns>
        System.Threading.Tasks.Task<ReplaceDocxParagraphResponse> EditDocumentDocxReplaceParagraphAsync (ReplaceDocxParagraphRequest reqConfig);

        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (ReplaceDocxParagraphResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceDocxParagraphResponse>> EditDocumentDocxReplaceParagraphAsyncWithHttpInfo (ReplaceDocxParagraphRequest reqConfig);
        /// <summary>
        /// Set custom property metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentDocxSetCustomMetadataPropertiesAsync (DocxSetCustomMetadataPropertiesRequest input);

        /// <summary>
        /// Set custom property metadata properties in Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxSetCustomMetadataPropertiesAsyncWithHttpInfo (DocxSetCustomMetadataPropertiesRequest input);
        /// <summary>
        /// Set the footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxSetFooterResponse</returns>
        System.Threading.Tasks.Task<DocxSetFooterResponse> EditDocumentDocxSetFooterAsync (DocxSetFooterRequest reqConfig);

        /// <summary>
        /// Set the footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxSetFooterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocxSetFooterResponse>> EditDocumentDocxSetFooterAsyncWithHttpInfo (DocxSetFooterRequest reqConfig);
        /// <summary>
        /// Add page number to footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxSetFooterResponse</returns>
        System.Threading.Tasks.Task<DocxSetFooterResponse> EditDocumentDocxSetFooterAddPageNumberAsync (DocxSetFooterAddPageNumberRequest reqConfig);

        /// <summary>
        /// Add page number to footer in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxSetFooterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocxSetFooterResponse>> EditDocumentDocxSetFooterAddPageNumberAsyncWithHttpInfo (DocxSetFooterAddPageNumberRequest reqConfig);
        /// <summary>
        /// Set the header in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxSetHeaderResponse</returns>
        System.Threading.Tasks.Task<DocxSetHeaderResponse> EditDocumentDocxSetHeaderAsync (DocxSetHeaderRequest reqConfig);

        /// <summary>
        /// Set the header in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxSetHeaderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocxSetHeaderResponse>> EditDocumentDocxSetHeaderAsyncWithHttpInfo (DocxSetHeaderRequest reqConfig);
        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of UpdateDocxTableCellResponse</returns>
        System.Threading.Tasks.Task<UpdateDocxTableCellResponse> EditDocumentDocxUpdateTableCellAsync (UpdateDocxTableCellRequest reqConfig);

        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (UpdateDocxTableCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDocxTableCellResponse>> EditDocumentDocxUpdateTableCellAsyncWithHttpInfo (UpdateDocxTableCellRequest reqConfig);
        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of UpdateDocxTableRowResponse</returns>
        System.Threading.Tasks.Task<UpdateDocxTableRowResponse> EditDocumentDocxUpdateTableRowAsync (UpdateDocxTableRowRequest reqConfig);

        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document
        /// </summary>
        /// <remarks>
        /// Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (UpdateDocxTableRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDocxTableRowResponse>> EditDocumentDocxUpdateTableRowAsyncWithHttpInfo (UpdateDocxTableRowRequest reqConfig);
        /// <summary>
        /// Finish editing document, and download result from document editing
        /// </summary>
        /// <remarks>
        /// Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentFinishEditingAsync (FinishEditingRequest reqConfig);

        /// <summary>
        /// Finish editing document, and download result from document editing
        /// </summary>
        /// <remarks>
        /// Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentFinishEditingAsyncWithHttpInfo (FinishEditingRequest reqConfig);
        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document
        /// </summary>
        /// <remarks>
        /// Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentPptxDeleteSlidesAsync (RemovePptxSlidesRequest reqConfig);

        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document
        /// </summary>
        /// <remarks>
        /// Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentPptxDeleteSlidesAsyncWithHttpInfo (RemovePptxSlidesRequest reqConfig);
        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentPptxReplaceAsync (ReplaceStringRequest reqConfig);

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation
        /// </summary>
        /// <remarks>
        /// Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentPptxReplaceAsyncWithHttpInfo (ReplaceStringRequest reqConfig);
        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of AppendXlsxRowResponse</returns>
        System.Threading.Tasks.Task<AppendXlsxRowResponse> EditDocumentXlsxAppendRowAsync (AppendXlsxRowRequest input);

        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (AppendXlsxRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppendXlsxRowResponse>> EditDocumentXlsxAppendRowAsyncWithHttpInfo (AppendXlsxRowRequest input);
        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ClearXlsxCellResponse</returns>
        System.Threading.Tasks.Task<ClearXlsxCellResponse> EditDocumentXlsxClearCellByIndexAsync (ClearXlsxCellRequest input);

        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (ClearXlsxCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClearXlsxCellResponse>> EditDocumentXlsxClearCellByIndexAsyncWithHttpInfo (ClearXlsxCellRequest input);
        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ClearXlsxRowResponse</returns>
        System.Threading.Tasks.Task<ClearXlsxRowResponse> EditDocumentXlsxClearRowAsync (ClearXlsxRowRequest input);

        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (ClearXlsxRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClearXlsxRowResponse>> EditDocumentXlsxClearRowAsyncWithHttpInfo (ClearXlsxRowRequest input);
        /// <summary>
        /// Create a blank Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of CreateBlankSpreadsheetResponse</returns>
        System.Threading.Tasks.Task<CreateBlankSpreadsheetResponse> EditDocumentXlsxCreateBlankSpreadsheetAsync (CreateBlankSpreadsheetRequest input);

        /// <summary>
        /// Create a blank Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (CreateBlankSpreadsheetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateBlankSpreadsheetResponse>> EditDocumentXlsxCreateBlankSpreadsheetAsyncWithHttpInfo (CreateBlankSpreadsheetRequest input);
        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data
        /// </summary>
        /// <remarks>
        /// Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of CreateSpreadsheetFromDataResponse</returns>
        System.Threading.Tasks.Task<CreateSpreadsheetFromDataResponse> EditDocumentXlsxCreateSpreadsheetFromDataAsync (CreateSpreadsheetFromDataRequest input);

        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data
        /// </summary>
        /// <remarks>
        /// Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (CreateSpreadsheetFromDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSpreadsheetFromDataResponse>> EditDocumentXlsxCreateSpreadsheetFromDataAsyncWithHttpInfo (CreateSpreadsheetFromDataRequest input);
        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDocumentXlsxDeleteWorksheetAsync (RemoveXlsxWorksheetRequest reqConfig);

        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentXlsxDeleteWorksheetAsyncWithHttpInfo (RemoveXlsxWorksheetRequest reqConfig);
        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of DisableSharedWorkbookResponse</returns>
        System.Threading.Tasks.Task<DisableSharedWorkbookResponse> EditDocumentXlsxDisableSharedWorkbookAsync (DisableSharedWorkbookRequest input);

        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (DisableSharedWorkbookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisableSharedWorkbookResponse>> EditDocumentXlsxDisableSharedWorkbookAsyncWithHttpInfo (DisableSharedWorkbookRequest input);
        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of EnableSharedWorkbookResponse</returns>
        System.Threading.Tasks.Task<EnableSharedWorkbookResponse> EditDocumentXlsxEnableSharedWorkbookAsync (EnableSharedWorkbookRequest input);

        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (EnableSharedWorkbookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnableSharedWorkbookResponse>> EditDocumentXlsxEnableSharedWorkbookAsyncWithHttpInfo (EnableSharedWorkbookRequest input);
        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxCellByIdentifierResponse</returns>
        System.Threading.Tasks.Task<GetXlsxCellByIdentifierResponse> EditDocumentXlsxGetCellByIdentifierAsync (GetXlsxCellByIdentifierRequest input);

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxCellByIdentifierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxCellByIdentifierResponse>> EditDocumentXlsxGetCellByIdentifierAsyncWithHttpInfo (GetXlsxCellByIdentifierRequest input);
        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxCellResponse</returns>
        System.Threading.Tasks.Task<GetXlsxCellResponse> EditDocumentXlsxGetCellByIndexAsync (GetXlsxCellRequest input);

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxCellResponse>> EditDocumentXlsxGetCellByIndexAsyncWithHttpInfo (GetXlsxCellRequest input);
        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the columns defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxColumnsResponse</returns>
        System.Threading.Tasks.Task<GetXlsxColumnsResponse> EditDocumentXlsxGetColumnsAsync (GetXlsxColumnsRequest input);

        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the columns defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxColumnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxColumnsResponse>> EditDocumentXlsxGetColumnsAsyncWithHttpInfo (GetXlsxColumnsRequest input);
        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxImagesResponse</returns>
        System.Threading.Tasks.Task<GetXlsxImagesResponse> EditDocumentXlsxGetImagesAsync (GetXlsxImagesRequest input);

        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the images defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxImagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxImagesResponse>> EditDocumentXlsxGetImagesAsyncWithHttpInfo (GetXlsxImagesRequest input);
        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxRowsAndCellsResponse</returns>
        System.Threading.Tasks.Task<GetXlsxRowsAndCellsResponse> EditDocumentXlsxGetRowsAndCellsAsync (GetXlsxRowsAndCellsRequest input);

        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxRowsAndCellsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxRowsAndCellsResponse>> EditDocumentXlsxGetRowsAndCellsAsyncWithHttpInfo (GetXlsxRowsAndCellsRequest input);
        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path
        /// </summary>
        /// <remarks>
        /// Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxSpecificRowResponse</returns>
        System.Threading.Tasks.Task<GetXlsxSpecificRowResponse> EditDocumentXlsxGetSpecificRowAsync (GetXlsxSpecificRowRequest input);

        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path
        /// </summary>
        /// <remarks>
        /// Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxSpecificRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxSpecificRowResponse>> EditDocumentXlsxGetSpecificRowAsyncWithHttpInfo (GetXlsxSpecificRowRequest input);
        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the style defined in the Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxStylesResponse</returns>
        System.Threading.Tasks.Task<GetXlsxStylesResponse> EditDocumentXlsxGetStylesAsync (GetXlsxStylesRequest input);

        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <remarks>
        /// Returns the style defined in the Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxStylesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxStylesResponse>> EditDocumentXlsxGetStylesAsyncWithHttpInfo (GetXlsxStylesRequest input);
        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxWorksheetsResponse</returns>
        System.Threading.Tasks.Task<GetXlsxWorksheetsResponse> EditDocumentXlsxGetWorksheetsAsync (GetXlsxWorksheetsRequest input);

        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxWorksheetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetXlsxWorksheetsResponse>> EditDocumentXlsxGetWorksheetsAsyncWithHttpInfo (GetXlsxWorksheetsRequest input);
        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Inserts a new worksheet into an Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of InsertXlsxWorksheetResponse</returns>
        System.Threading.Tasks.Task<InsertXlsxWorksheetResponse> EditDocumentXlsxInsertWorksheetAsync (InsertXlsxWorksheetRequest input);

        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Inserts a new worksheet into an Excel Spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (InsertXlsxWorksheetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertXlsxWorksheetResponse>> EditDocumentXlsxInsertWorksheetAsyncWithHttpInfo (InsertXlsxWorksheetRequest input);
        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of RenameXlsxWorksheetResponse</returns>
        System.Threading.Tasks.Task<RenameXlsxWorksheetResponse> EditDocumentXlsxRenameWorksheetAsync (RenameXlsxWorksheetRequest input);

        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet
        /// </summary>
        /// <remarks>
        /// Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (RenameXlsxWorksheetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RenameXlsxWorksheetResponse>> EditDocumentXlsxRenameWorksheetAsyncWithHttpInfo (RenameXlsxWorksheetRequest input);
        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of SetXlsxCellByIdentifierResponse</returns>
        System.Threading.Tasks.Task<SetXlsxCellByIdentifierResponse> EditDocumentXlsxSetCellByIdentifierAsync (SetXlsxCellByIdentifierRequest input);

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (SetXlsxCellByIdentifierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetXlsxCellByIdentifierResponse>> EditDocumentXlsxSetCellByIdentifierAsyncWithHttpInfo (SetXlsxCellByIdentifierRequest input);
        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of SetXlsxCellResponse</returns>
        System.Threading.Tasks.Task<SetXlsxCellResponse> EditDocumentXlsxSetCellByIndexAsync (SetXlsxCellRequest input);

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index
        /// </summary>
        /// <remarks>
        /// Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (SetXlsxCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetXlsxCellResponse>> EditDocumentXlsxSetCellByIndexAsyncWithHttpInfo (SetXlsxCellRequest input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EditDocumentApi : IEditDocumentApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EditDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditDocumentApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditDocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EditDocumentApi(Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Begin editing a document Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>string</returns>
        public string EditDocumentBeginEditing (System.IO.Stream inputFile)
        {
             ApiResponse<string> localVarResponse = EditDocumentBeginEditingWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Begin editing a document Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > EditDocumentBeginEditingWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentBeginEditing");

            var localVarPath = "./convert/edit/begin-editing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentBeginEditing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Begin editing a document Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EditDocumentBeginEditingAsync (System.IO.Stream inputFile)
        {
             ApiResponse<string> localVarResponse = await EditDocumentBeginEditingAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Begin editing a document Uploads a document to Cloudmersive to begin a series of one or more editing operations.  To edit a document, first call Begin Editing on the document.  Then perform operations on the document using the secure URL returned from BeginEditing, such as Word DOCX Delete Pages and Insert Table.  Finally, perform finish editing on the URL to return the resulting edited document.  The editing URL is temporary and only stored in-memory cache, and will automatically expire from the cache after 30 minutes, and cannot be directly accessed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EditDocumentBeginEditingAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentBeginEditing");

            var localVarPath = "./convert/edit/begin-editing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentBeginEditing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxAcceptAllTrackChanges (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxAcceptAllTrackChangesWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxAcceptAllTrackChangesWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxAcceptAllTrackChanges");

            var localVarPath = "./convert/edit/docx/track-changes/accept-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxAcceptAllTrackChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxAcceptAllTrackChangesAsync (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxAcceptAllTrackChangesAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept all tracked changes, revisions in a Word DOCX document Accepts all tracked changes and revisions in a Word DOCX document.  This will accept all pending changes in the document when tracked changes is turned on.  Track changes will remain on (if it is on) after this oepration is completed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxAcceptAllTrackChangesAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxAcceptAllTrackChanges");

            var localVarPath = "./convert/edit/docx/track-changes/accept-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxAcceptAllTrackChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get body from a Word DOCX document Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxBodyResponse</returns>
        public GetDocxBodyResponse EditDocumentDocxBody (GetDocxBodyRequest reqConfig)
        {
             ApiResponse<GetDocxBodyResponse> localVarResponse = EditDocumentDocxBodyWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get body from a Word DOCX document Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxBodyResponse</returns>
        public ApiResponse< GetDocxBodyResponse > EditDocumentDocxBodyWithHttpInfo (GetDocxBodyRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxBody");

            var localVarPath = "./convert/edit/docx/get-body";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxBody", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxBodyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxBodyResponse)));
        }

        /// <summary>
        /// Get body from a Word DOCX document Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxBodyResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxBodyResponse> EditDocumentDocxBodyAsync (GetDocxBodyRequest reqConfig)
        {
             ApiResponse<GetDocxBodyResponse> localVarResponse = await EditDocumentDocxBodyAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get body from a Word DOCX document Returns the body defined in the Word Document (DOCX) format file; this is the main content part of a DOCX document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxBodyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxBodyResponse>> EditDocumentDocxBodyAsyncWithHttpInfo (GetDocxBodyRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxBody");

            var localVarPath = "./convert/edit/docx/get-body";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxBody", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxBodyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxBodyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxBodyResponse)));
        }

        /// <summary>
        /// Create a blank Word DOCX document Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>CreateBlankDocxResponse</returns>
        public CreateBlankDocxResponse EditDocumentDocxCreateBlankDocument (CreateBlankDocxRequest input)
        {
             ApiResponse<CreateBlankDocxResponse> localVarResponse = EditDocumentDocxCreateBlankDocumentWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a blank Word DOCX document Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of CreateBlankDocxResponse</returns>
        public ApiResponse< CreateBlankDocxResponse > EditDocumentDocxCreateBlankDocumentWithHttpInfo (CreateBlankDocxRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentDocxCreateBlankDocument");

            var localVarPath = "./convert/edit/docx/create/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxCreateBlankDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBlankDocxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateBlankDocxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBlankDocxResponse)));
        }

        /// <summary>
        /// Create a blank Word DOCX document Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of CreateBlankDocxResponse</returns>
        public async System.Threading.Tasks.Task<CreateBlankDocxResponse> EditDocumentDocxCreateBlankDocumentAsync (CreateBlankDocxRequest input)
        {
             ApiResponse<CreateBlankDocxResponse> localVarResponse = await EditDocumentDocxCreateBlankDocumentAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a blank Word DOCX document Returns a blank Word DOCX Document format file.  The file is blank, with no contents.  Use additional editing commands such as Insert Paragraph or Insert Table or Insert Image to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (CreateBlankDocxResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateBlankDocxResponse>> EditDocumentDocxCreateBlankDocumentAsyncWithHttpInfo (CreateBlankDocxRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentDocxCreateBlankDocument");

            var localVarPath = "./convert/edit/docx/create/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxCreateBlankDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBlankDocxResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateBlankDocxResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBlankDocxResponse)));
        }

        /// <summary>
        /// Delete, remove pages from a Word DOCX document Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxDeletePages (RemoveDocxPagesRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxDeletePagesWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete, remove pages from a Word DOCX document Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxDeletePagesWithHttpInfo (RemoveDocxPagesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxDeletePages");

            var localVarPath = "./convert/edit/docx/delete-pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDeletePages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Delete, remove pages from a Word DOCX document Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxDeletePagesAsync (RemoveDocxPagesRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxDeletePagesAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete, remove pages from a Word DOCX document Returns the edited Word Document in the Word Document (DOCX) format file with the specified pages removed
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxDeletePagesAsyncWithHttpInfo (RemoveDocxPagesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxDeletePages");

            var localVarPath = "./convert/edit/docx/delete-pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDeletePages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DeleteDocxTableRowResponse</returns>
        public DeleteDocxTableRowResponse EditDocumentDocxDeleteTableRow (DeleteDocxTableRowRequest reqConfig)
        {
             ApiResponse<DeleteDocxTableRowResponse> localVarResponse = EditDocumentDocxDeleteTableRowWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DeleteDocxTableRowResponse</returns>
        public ApiResponse< DeleteDocxTableRowResponse > EditDocumentDocxDeleteTableRowWithHttpInfo (DeleteDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxDeleteTableRow");

            var localVarPath = "./convert/edit/docx/delete-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDeleteTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeleteDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDocxTableRowResponse)));
        }

        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DeleteDocxTableRowResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDocxTableRowResponse> EditDocumentDocxDeleteTableRowAsync (DeleteDocxTableRowRequest reqConfig)
        {
             ApiResponse<DeleteDocxTableRowResponse> localVarResponse = await EditDocumentDocxDeleteTableRowAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a table row in an existing table in a Word DOCX document Deletes an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DeleteDocxTableRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteDocxTableRowResponse>> EditDocumentDocxDeleteTableRowAsyncWithHttpInfo (DeleteDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxDeleteTableRow");

            var localVarPath = "./convert/edit/docx/delete-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDeleteTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeleteDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDocxTableRowResponse)));
        }

        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DeleteDocxTableRowRangeResponse</returns>
        public DeleteDocxTableRowRangeResponse EditDocumentDocxDeleteTableRowRange (DeleteDocxTableRowRangeRequest reqConfig)
        {
             ApiResponse<DeleteDocxTableRowRangeResponse> localVarResponse = EditDocumentDocxDeleteTableRowRangeWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DeleteDocxTableRowRangeResponse</returns>
        public ApiResponse< DeleteDocxTableRowRangeResponse > EditDocumentDocxDeleteTableRowRangeWithHttpInfo (DeleteDocxTableRowRangeRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxDeleteTableRowRange");

            var localVarPath = "./convert/edit/docx/delete-table-row/range";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDeleteTableRowRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDocxTableRowRangeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeleteDocxTableRowRangeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDocxTableRowRangeResponse)));
        }

        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DeleteDocxTableRowRangeResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDocxTableRowRangeResponse> EditDocumentDocxDeleteTableRowRangeAsync (DeleteDocxTableRowRangeRequest reqConfig)
        {
             ApiResponse<DeleteDocxTableRowRangeResponse> localVarResponse = await EditDocumentDocxDeleteTableRowRangeAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a range of multiple table rows in an existing table in a Word DOCX document Deletes a range of 1 or more existing table rows in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DeleteDocxTableRowRangeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteDocxTableRowRangeResponse>> EditDocumentDocxDeleteTableRowRangeAsyncWithHttpInfo (DeleteDocxTableRowRangeRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxDeleteTableRowRange");

            var localVarPath = "./convert/edit/docx/delete-table-row/range";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDeleteTableRowRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDocxTableRowRangeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DeleteDocxTableRowRangeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDocxTableRowRangeResponse)));
        }

        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxDisableTrackChanges (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxDisableTrackChangesWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxDisableTrackChangesWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxDisableTrackChanges");

            var localVarPath = "./convert/edit/docx/track-changes/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDisableTrackChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxDisableTrackChangesAsync (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxDisableTrackChangesAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable track changes, revisions in a Word DOCX document Diables tracking of changes and revisions in a Word DOCX document, and accepts any pending changes.  Users editing the document will no longer see changes tracked automatically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxDisableTrackChangesAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxDisableTrackChanges");

            var localVarPath = "./convert/edit/docx/track-changes/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxDisableTrackChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxEnableTrackChanges (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxEnableTrackChangesWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxEnableTrackChangesWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxEnableTrackChanges");

            var localVarPath = "./convert/edit/docx/track-changes/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxEnableTrackChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxEnableTrackChangesAsync (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxEnableTrackChangesAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable track changes, revisions in a Word DOCX document Enables tracking of changes and revisions in a Word DOCX document.  Users editing the document will see changes tracked automatically, with edits highlighted, and the ability to accept or reject changes made to the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxEnableTrackChangesAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxEnableTrackChanges");

            var localVarPath = "./convert/edit/docx/track-changes/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxEnableTrackChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Find matching paragraphs in a Word DOCX document Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>FindDocxParagraphResponse</returns>
        public FindDocxParagraphResponse EditDocumentDocxFindParagraph (FindDocxParagraphRequest reqConfig)
        {
             ApiResponse<FindDocxParagraphResponse> localVarResponse = EditDocumentDocxFindParagraphWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find matching paragraphs in a Word DOCX document Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of FindDocxParagraphResponse</returns>
        public ApiResponse< FindDocxParagraphResponse > EditDocumentDocxFindParagraphWithHttpInfo (FindDocxParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxFindParagraph");

            var localVarPath = "./convert/edit/docx/find/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxFindParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindDocxParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FindDocxParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindDocxParagraphResponse)));
        }

        /// <summary>
        /// Find matching paragraphs in a Word DOCX document Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of FindDocxParagraphResponse</returns>
        public async System.Threading.Tasks.Task<FindDocxParagraphResponse> EditDocumentDocxFindParagraphAsync (FindDocxParagraphRequest reqConfig)
        {
             ApiResponse<FindDocxParagraphResponse> localVarResponse = await EditDocumentDocxFindParagraphAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find matching paragraphs in a Word DOCX document Returns the paragraphs defined in the Word Document (DOCX) format file that match the input criteria
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (FindDocxParagraphResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FindDocxParagraphResponse>> EditDocumentDocxFindParagraphAsyncWithHttpInfo (FindDocxParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxFindParagraph");

            var localVarPath = "./convert/edit/docx/find/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxFindParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindDocxParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FindDocxParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindDocxParagraphResponse)));
        }

        /// <summary>
        /// Get comments from a Word DOCX document as a flat list Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxCommentsResponse</returns>
        public GetDocxCommentsResponse EditDocumentDocxGetComments (GetDocxGetCommentsRequest reqConfig)
        {
             ApiResponse<GetDocxCommentsResponse> localVarResponse = EditDocumentDocxGetCommentsWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get comments from a Word DOCX document as a flat list Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxCommentsResponse</returns>
        public ApiResponse< GetDocxCommentsResponse > EditDocumentDocxGetCommentsWithHttpInfo (GetDocxGetCommentsRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetComments");

            var localVarPath = "./convert/edit/docx/get-comments/flat-list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxCommentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxCommentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxCommentsResponse)));
        }

        /// <summary>
        /// Get comments from a Word DOCX document as a flat list Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxCommentsResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxCommentsResponse> EditDocumentDocxGetCommentsAsync (GetDocxGetCommentsRequest reqConfig)
        {
             ApiResponse<GetDocxCommentsResponse> localVarResponse = await EditDocumentDocxGetCommentsAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get comments from a Word DOCX document as a flat list Returns the comments and review annotations stored in the Word Document (DOCX) format file as a flattened list (not as a hierarchy of comments and replies).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxCommentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxCommentsResponse>> EditDocumentDocxGetCommentsAsyncWithHttpInfo (GetDocxGetCommentsRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetComments");

            var localVarPath = "./convert/edit/docx/get-comments/flat-list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxCommentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxCommentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxCommentsResponse)));
        }

        /// <summary>
        /// Get comments from a Word DOCX document hierarchically Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxCommentsHierarchicalResponse</returns>
        public GetDocxCommentsHierarchicalResponse EditDocumentDocxGetCommentsHierarchical (GetDocxGetCommentsHierarchicalRequest reqConfig)
        {
             ApiResponse<GetDocxCommentsHierarchicalResponse> localVarResponse = EditDocumentDocxGetCommentsHierarchicalWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get comments from a Word DOCX document hierarchically Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxCommentsHierarchicalResponse</returns>
        public ApiResponse< GetDocxCommentsHierarchicalResponse > EditDocumentDocxGetCommentsHierarchicalWithHttpInfo (GetDocxGetCommentsHierarchicalRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetCommentsHierarchical");

            var localVarPath = "./convert/edit/docx/get-comments/hierarchical";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetCommentsHierarchical", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxCommentsHierarchicalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxCommentsHierarchicalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxCommentsHierarchicalResponse)));
        }

        /// <summary>
        /// Get comments from a Word DOCX document hierarchically Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxCommentsHierarchicalResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxCommentsHierarchicalResponse> EditDocumentDocxGetCommentsHierarchicalAsync (GetDocxGetCommentsHierarchicalRequest reqConfig)
        {
             ApiResponse<GetDocxCommentsHierarchicalResponse> localVarResponse = await EditDocumentDocxGetCommentsHierarchicalAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get comments from a Word DOCX document hierarchically Returns the comments and review annotations stored in the Word Document (DOCX) format file hierarchically, where reply comments are nested as children under top-level comments in the results returned.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxCommentsHierarchicalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxCommentsHierarchicalResponse>> EditDocumentDocxGetCommentsHierarchicalAsyncWithHttpInfo (GetDocxGetCommentsHierarchicalRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetCommentsHierarchical");

            var localVarPath = "./convert/edit/docx/get-comments/hierarchical";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetCommentsHierarchical", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxCommentsHierarchicalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxCommentsHierarchicalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxCommentsHierarchicalResponse)));
        }

        /// <summary>
        /// Get content of a footer from a Word DOCX document Returns the footer content from a Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxHeadersAndFootersResponse</returns>
        public GetDocxHeadersAndFootersResponse EditDocumentDocxGetHeadersAndFooters (GetDocxHeadersAndFootersRequest reqConfig)
        {
             ApiResponse<GetDocxHeadersAndFootersResponse> localVarResponse = EditDocumentDocxGetHeadersAndFootersWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get content of a footer from a Word DOCX document Returns the footer content from a Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxHeadersAndFootersResponse</returns>
        public ApiResponse< GetDocxHeadersAndFootersResponse > EditDocumentDocxGetHeadersAndFootersWithHttpInfo (GetDocxHeadersAndFootersRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetHeadersAndFooters");

            var localVarPath = "./convert/edit/docx/get-headers-and-footers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetHeadersAndFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxHeadersAndFootersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxHeadersAndFootersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxHeadersAndFootersResponse)));
        }

        /// <summary>
        /// Get content of a footer from a Word DOCX document Returns the footer content from a Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxHeadersAndFootersResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxHeadersAndFootersResponse> EditDocumentDocxGetHeadersAndFootersAsync (GetDocxHeadersAndFootersRequest reqConfig)
        {
             ApiResponse<GetDocxHeadersAndFootersResponse> localVarResponse = await EditDocumentDocxGetHeadersAndFootersAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get content of a footer from a Word DOCX document Returns the footer content from a Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxHeadersAndFootersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxHeadersAndFootersResponse>> EditDocumentDocxGetHeadersAndFootersAsyncWithHttpInfo (GetDocxHeadersAndFootersRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetHeadersAndFooters");

            var localVarPath = "./convert/edit/docx/get-headers-and-footers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetHeadersAndFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxHeadersAndFootersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxHeadersAndFootersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxHeadersAndFootersResponse)));
        }

        /// <summary>
        /// Get images from a Word DOCX document Returns the images defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxImagesResponse</returns>
        public GetDocxImagesResponse EditDocumentDocxGetImages (GetDocxImagesRequest reqConfig)
        {
             ApiResponse<GetDocxImagesResponse> localVarResponse = EditDocumentDocxGetImagesWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get images from a Word DOCX document Returns the images defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxImagesResponse</returns>
        public ApiResponse< GetDocxImagesResponse > EditDocumentDocxGetImagesWithHttpInfo (GetDocxImagesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetImages");

            var localVarPath = "./convert/edit/docx/get-images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxImagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxImagesResponse)));
        }

        /// <summary>
        /// Get images from a Word DOCX document Returns the images defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxImagesResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxImagesResponse> EditDocumentDocxGetImagesAsync (GetDocxImagesRequest reqConfig)
        {
             ApiResponse<GetDocxImagesResponse> localVarResponse = await EditDocumentDocxGetImagesAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get images from a Word DOCX document Returns the images defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxImagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxImagesResponse>> EditDocumentDocxGetImagesAsyncWithHttpInfo (GetDocxImagesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetImages");

            var localVarPath = "./convert/edit/docx/get-images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxImagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxImagesResponse)));
        }

        /// <summary>
        /// Get all metadata properties in Word DOCX document Returns all the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>GetDocxMetadataPropertiesResponse</returns>
        public GetDocxMetadataPropertiesResponse EditDocumentDocxGetMetadataProperties (System.IO.Stream inputFile)
        {
             ApiResponse<GetDocxMetadataPropertiesResponse> localVarResponse = EditDocumentDocxGetMetadataPropertiesWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all metadata properties in Word DOCX document Returns all the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of GetDocxMetadataPropertiesResponse</returns>
        public ApiResponse< GetDocxMetadataPropertiesResponse > EditDocumentDocxGetMetadataPropertiesWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxGetMetadataProperties");

            var localVarPath = "./convert/edit/docx/get-metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetMetadataProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxMetadataPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxMetadataPropertiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxMetadataPropertiesResponse)));
        }

        /// <summary>
        /// Get all metadata properties in Word DOCX document Returns all the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of GetDocxMetadataPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxMetadataPropertiesResponse> EditDocumentDocxGetMetadataPropertiesAsync (System.IO.Stream inputFile)
        {
             ApiResponse<GetDocxMetadataPropertiesResponse> localVarResponse = await EditDocumentDocxGetMetadataPropertiesAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all metadata properties in Word DOCX document Returns all the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (GetDocxMetadataPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxMetadataPropertiesResponse>> EditDocumentDocxGetMetadataPropertiesAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxGetMetadataProperties");

            var localVarPath = "./convert/edit/docx/get-metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetMetadataProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxMetadataPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxMetadataPropertiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxMetadataPropertiesResponse)));
        }

        /// <summary>
        /// Get sections from a Word DOCX document Returns the sections defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxSectionsResponse</returns>
        public GetDocxSectionsResponse EditDocumentDocxGetSections (GetDocxSectionsRequest reqConfig)
        {
             ApiResponse<GetDocxSectionsResponse> localVarResponse = EditDocumentDocxGetSectionsWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sections from a Word DOCX document Returns the sections defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxSectionsResponse</returns>
        public ApiResponse< GetDocxSectionsResponse > EditDocumentDocxGetSectionsWithHttpInfo (GetDocxSectionsRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetSections");

            var localVarPath = "./convert/edit/docx/get-sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxSectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxSectionsResponse)));
        }

        /// <summary>
        /// Get sections from a Word DOCX document Returns the sections defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxSectionsResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxSectionsResponse> EditDocumentDocxGetSectionsAsync (GetDocxSectionsRequest reqConfig)
        {
             ApiResponse<GetDocxSectionsResponse> localVarResponse = await EditDocumentDocxGetSectionsAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sections from a Word DOCX document Returns the sections defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxSectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxSectionsResponse>> EditDocumentDocxGetSectionsAsyncWithHttpInfo (GetDocxSectionsRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetSections");

            var localVarPath = "./convert/edit/docx/get-sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxSectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxSectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxSectionsResponse)));
        }

        /// <summary>
        /// Get styles from a Word DOCX document Returns the styles defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxStylesResponse</returns>
        public GetDocxStylesResponse EditDocumentDocxGetStyles (GetDocxStylesRequest reqConfig)
        {
             ApiResponse<GetDocxStylesResponse> localVarResponse = EditDocumentDocxGetStylesWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get styles from a Word DOCX document Returns the styles defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxStylesResponse</returns>
        public ApiResponse< GetDocxStylesResponse > EditDocumentDocxGetStylesWithHttpInfo (GetDocxStylesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetStyles");

            var localVarPath = "./convert/edit/docx/get-styles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetStyles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxStylesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxStylesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxStylesResponse)));
        }

        /// <summary>
        /// Get styles from a Word DOCX document Returns the styles defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxStylesResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxStylesResponse> EditDocumentDocxGetStylesAsync (GetDocxStylesRequest reqConfig)
        {
             ApiResponse<GetDocxStylesResponse> localVarResponse = await EditDocumentDocxGetStylesAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get styles from a Word DOCX document Returns the styles defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxStylesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxStylesResponse>> EditDocumentDocxGetStylesAsyncWithHttpInfo (GetDocxStylesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetStyles");

            var localVarPath = "./convert/edit/docx/get-styles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetStyles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxStylesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxStylesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxStylesResponse)));
        }

        /// <summary>
        /// Get a specific table by index in a Word DOCX document Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxTableByIndexResponse</returns>
        public GetDocxTableByIndexResponse EditDocumentDocxGetTableByIndex (GetDocxTableByIndexRequest reqConfig)
        {
             ApiResponse<GetDocxTableByIndexResponse> localVarResponse = EditDocumentDocxGetTableByIndexWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific table by index in a Word DOCX document Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxTableByIndexResponse</returns>
        public ApiResponse< GetDocxTableByIndexResponse > EditDocumentDocxGetTableByIndexWithHttpInfo (GetDocxTableByIndexRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetTableByIndex");

            var localVarPath = "./convert/edit/docx/get-table/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetTableByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxTableByIndexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxTableByIndexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxTableByIndexResponse)));
        }

        /// <summary>
        /// Get a specific table by index in a Word DOCX document Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxTableByIndexResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxTableByIndexResponse> EditDocumentDocxGetTableByIndexAsync (GetDocxTableByIndexRequest reqConfig)
        {
             ApiResponse<GetDocxTableByIndexResponse> localVarResponse = await EditDocumentDocxGetTableByIndexAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific table by index in a Word DOCX document Returns the specific table object by its 0-based index in an Office Word Document (DOCX)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxTableByIndexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxTableByIndexResponse>> EditDocumentDocxGetTableByIndexAsyncWithHttpInfo (GetDocxTableByIndexRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetTableByIndex");

            var localVarPath = "./convert/edit/docx/get-table/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetTableByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxTableByIndexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxTableByIndexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxTableByIndexResponse)));
        }

        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxTableRowResponse</returns>
        public GetDocxTableRowResponse EditDocumentDocxGetTableRow (GetDocxTableRowRequest reqConfig)
        {
             ApiResponse<GetDocxTableRowResponse> localVarResponse = EditDocumentDocxGetTableRowWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxTableRowResponse</returns>
        public ApiResponse< GetDocxTableRowResponse > EditDocumentDocxGetTableRowWithHttpInfo (GetDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetTableRow");

            var localVarPath = "./convert/edit/docx/get-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxTableRowResponse)));
        }

        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxTableRowResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxTableRowResponse> EditDocumentDocxGetTableRowAsync (GetDocxTableRowRequest reqConfig)
        {
             ApiResponse<GetDocxTableRowResponse> localVarResponse = await EditDocumentDocxGetTableRowAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contents of an existing table row in an existing table in a Word DOCX document Gets the contents of an existing table row in a Word DOCX Document and returns the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxTableRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxTableRowResponse>> EditDocumentDocxGetTableRowAsyncWithHttpInfo (GetDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetTableRow");

            var localVarPath = "./convert/edit/docx/get-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxTableRowResponse)));
        }

        /// <summary>
        /// Get all tables in Word DOCX document Returns all the table objects in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxTablesResponse</returns>
        public GetDocxTablesResponse EditDocumentDocxGetTables (GetDocxTablesRequest reqConfig)
        {
             ApiResponse<GetDocxTablesResponse> localVarResponse = EditDocumentDocxGetTablesWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all tables in Word DOCX document Returns all the table objects in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxTablesResponse</returns>
        public ApiResponse< GetDocxTablesResponse > EditDocumentDocxGetTablesWithHttpInfo (GetDocxTablesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetTables");

            var localVarPath = "./convert/edit/docx/get-tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxTablesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxTablesResponse)));
        }

        /// <summary>
        /// Get all tables in Word DOCX document Returns all the table objects in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxTablesResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxTablesResponse> EditDocumentDocxGetTablesAsync (GetDocxTablesRequest reqConfig)
        {
             ApiResponse<GetDocxTablesResponse> localVarResponse = await EditDocumentDocxGetTablesAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all tables in Word DOCX document Returns all the table objects in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxTablesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxTablesResponse>> EditDocumentDocxGetTablesAsyncWithHttpInfo (GetDocxTablesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxGetTables");

            var localVarPath = "./convert/edit/docx/get-tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxGetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxTablesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxTablesResponse)));
        }

        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxCommentOnParagraphResponse</returns>
        public InsertDocxCommentOnParagraphResponse EditDocumentDocxInsertCommentOnParagraph (DocxInsertCommentOnParagraphRequest reqConfig)
        {
             ApiResponse<InsertDocxCommentOnParagraphResponse> localVarResponse = EditDocumentDocxInsertCommentOnParagraphWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxCommentOnParagraphResponse</returns>
        public ApiResponse< InsertDocxCommentOnParagraphResponse > EditDocumentDocxInsertCommentOnParagraphWithHttpInfo (DocxInsertCommentOnParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertCommentOnParagraph");

            var localVarPath = "./convert/edit/docx/insert-comment/on/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertCommentOnParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxCommentOnParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxCommentOnParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxCommentOnParagraphResponse)));
        }

        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxCommentOnParagraphResponse</returns>
        public async System.Threading.Tasks.Task<InsertDocxCommentOnParagraphResponse> EditDocumentDocxInsertCommentOnParagraphAsync (DocxInsertCommentOnParagraphRequest reqConfig)
        {
             ApiResponse<InsertDocxCommentOnParagraphResponse> localVarResponse = await EditDocumentDocxInsertCommentOnParagraphAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new comment into a Word DOCX document attached to a paragraph Adds a new comment into a Word DOCX document attached to a paragraph and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxCommentOnParagraphResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InsertDocxCommentOnParagraphResponse>> EditDocumentDocxInsertCommentOnParagraphAsyncWithHttpInfo (DocxInsertCommentOnParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertCommentOnParagraph");

            var localVarPath = "./convert/edit/docx/insert-comment/on/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertCommentOnParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxCommentOnParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxCommentOnParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxCommentOnParagraphResponse)));
        }

        /// <summary>
        /// Insert image into a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxInsertImageResponse</returns>
        public DocxInsertImageResponse EditDocumentDocxInsertImage (DocxInsertImageRequest reqConfig)
        {
             ApiResponse<DocxInsertImageResponse> localVarResponse = EditDocumentDocxInsertImageWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert image into a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxInsertImageResponse</returns>
        public ApiResponse< DocxInsertImageResponse > EditDocumentDocxInsertImageWithHttpInfo (DocxInsertImageRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertImage");

            var localVarPath = "./convert/edit/docx/insert-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxInsertImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxInsertImageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxInsertImageResponse)));
        }

        /// <summary>
        /// Insert image into a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxInsertImageResponse</returns>
        public async System.Threading.Tasks.Task<DocxInsertImageResponse> EditDocumentDocxInsertImageAsync (DocxInsertImageRequest reqConfig)
        {
             ApiResponse<DocxInsertImageResponse> localVarResponse = await EditDocumentDocxInsertImageAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert image into a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxInsertImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocxInsertImageResponse>> EditDocumentDocxInsertImageAsyncWithHttpInfo (DocxInsertImageRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertImage");

            var localVarPath = "./convert/edit/docx/insert-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxInsertImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxInsertImageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxInsertImageResponse)));
        }

        /// <summary>
        /// Insert a new paragraph into a Word DOCX document Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxInsertParagraphResponse</returns>
        public InsertDocxInsertParagraphResponse EditDocumentDocxInsertParagraph (InsertDocxInsertParagraphRequest reqConfig)
        {
             ApiResponse<InsertDocxInsertParagraphResponse> localVarResponse = EditDocumentDocxInsertParagraphWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new paragraph into a Word DOCX document Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxInsertParagraphResponse</returns>
        public ApiResponse< InsertDocxInsertParagraphResponse > EditDocumentDocxInsertParagraphWithHttpInfo (InsertDocxInsertParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertParagraph");

            var localVarPath = "./convert/edit/docx/insert-paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxInsertParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxInsertParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxInsertParagraphResponse)));
        }

        /// <summary>
        /// Insert a new paragraph into a Word DOCX document Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxInsertParagraphResponse</returns>
        public async System.Threading.Tasks.Task<InsertDocxInsertParagraphResponse> EditDocumentDocxInsertParagraphAsync (InsertDocxInsertParagraphRequest reqConfig)
        {
             ApiResponse<InsertDocxInsertParagraphResponse> localVarResponse = await EditDocumentDocxInsertParagraphAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new paragraph into a Word DOCX document Adds a new paragraph into a DOCX and returns the result.  You can insert at the beginning/end of a document, or before/after an existing object using its Path (location within the document).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxInsertParagraphResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InsertDocxInsertParagraphResponse>> EditDocumentDocxInsertParagraphAsyncWithHttpInfo (InsertDocxInsertParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertParagraph");

            var localVarPath = "./convert/edit/docx/insert-paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxInsertParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxInsertParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxInsertParagraphResponse)));
        }

        /// <summary>
        /// Insert a new table into a Word DOCX document Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxTablesResponse</returns>
        public InsertDocxTablesResponse EditDocumentDocxInsertTable (InsertDocxTablesRequest reqConfig)
        {
             ApiResponse<InsertDocxTablesResponse> localVarResponse = EditDocumentDocxInsertTableWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new table into a Word DOCX document Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxTablesResponse</returns>
        public ApiResponse< InsertDocxTablesResponse > EditDocumentDocxInsertTableWithHttpInfo (InsertDocxTablesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertTable");

            var localVarPath = "./convert/edit/docx/insert-table";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxTablesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxTablesResponse)));
        }

        /// <summary>
        /// Insert a new table into a Word DOCX document Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxTablesResponse</returns>
        public async System.Threading.Tasks.Task<InsertDocxTablesResponse> EditDocumentDocxInsertTableAsync (InsertDocxTablesRequest reqConfig)
        {
             ApiResponse<InsertDocxTablesResponse> localVarResponse = await EditDocumentDocxInsertTableAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new table into a Word DOCX document Adds a new table into a DOCX and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxTablesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InsertDocxTablesResponse>> EditDocumentDocxInsertTableAsyncWithHttpInfo (InsertDocxTablesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertTable");

            var localVarPath = "./convert/edit/docx/insert-table";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxTablesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxTablesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxTablesResponse)));
        }

        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>InsertDocxTableRowResponse</returns>
        public InsertDocxTableRowResponse EditDocumentDocxInsertTableRow (InsertDocxTableRowRequest reqConfig)
        {
             ApiResponse<InsertDocxTableRowResponse> localVarResponse = EditDocumentDocxInsertTableRowWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of InsertDocxTableRowResponse</returns>
        public ApiResponse< InsertDocxTableRowResponse > EditDocumentDocxInsertTableRowWithHttpInfo (InsertDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertTableRow");

            var localVarPath = "./convert/edit/docx/insert-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxTableRowResponse)));
        }

        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of InsertDocxTableRowResponse</returns>
        public async System.Threading.Tasks.Task<InsertDocxTableRowResponse> EditDocumentDocxInsertTableRowAsync (InsertDocxTableRowRequest reqConfig)
        {
             ApiResponse<InsertDocxTableRowResponse> localVarResponse = await EditDocumentDocxInsertTableRowAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new row into an existing table in a Word DOCX document Adds a new table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (InsertDocxTableRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InsertDocxTableRowResponse>> EditDocumentDocxInsertTableRowAsyncWithHttpInfo (InsertDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxInsertTableRow");

            var localVarPath = "./convert/edit/docx/insert-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxInsertTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocxTableRowResponse)));
        }

        /// <summary>
        /// Get pages and content from a Word DOCX document Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>GetDocxPagesResponse</returns>
        public GetDocxPagesResponse EditDocumentDocxPages (GetDocxPagesRequest reqConfig)
        {
             ApiResponse<GetDocxPagesResponse> localVarResponse = EditDocumentDocxPagesWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get pages and content from a Word DOCX document Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of GetDocxPagesResponse</returns>
        public ApiResponse< GetDocxPagesResponse > EditDocumentDocxPagesWithHttpInfo (GetDocxPagesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxPages");

            var localVarPath = "./convert/edit/docx/get-pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxPagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxPagesResponse)));
        }

        /// <summary>
        /// Get pages and content from a Word DOCX document Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of GetDocxPagesResponse</returns>
        public async System.Threading.Tasks.Task<GetDocxPagesResponse> EditDocumentDocxPagesAsync (GetDocxPagesRequest reqConfig)
        {
             ApiResponse<GetDocxPagesResponse> localVarResponse = await EditDocumentDocxPagesAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get pages and content from a Word DOCX document Returns the pages and contents of each page defined in the Word Document (DOCX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (GetDocxPagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocxPagesResponse>> EditDocumentDocxPagesAsyncWithHttpInfo (GetDocxPagesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxPages");

            var localVarPath = "./convert/edit/docx/get-pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocxPagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetDocxPagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocxPagesResponse)));
        }

        /// <summary>
        /// Remove all comments from a Word DOCX document Removes all of the comments from a Word Document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxRemoveAllComments (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxRemoveAllCommentsWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all comments from a Word DOCX document Removes all of the comments from a Word Document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxRemoveAllCommentsWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxRemoveAllComments");

            var localVarPath = "./convert/edit/docx/comments/remove-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxRemoveAllComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Remove all comments from a Word DOCX document Removes all of the comments from a Word Document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxRemoveAllCommentsAsync (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxRemoveAllCommentsAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove all comments from a Word DOCX document Removes all of the comments from a Word Document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxRemoveAllCommentsAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditDocumentApi->EditDocumentDocxRemoveAllComments");

            var localVarPath = "./convert/edit/docx/comments/remove-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxRemoveAllComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Remove headers and footers from Word DOCX document Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>RemoveDocxHeadersAndFootersResponse</returns>
        public RemoveDocxHeadersAndFootersResponse EditDocumentDocxRemoveHeadersAndFooters (RemoveDocxHeadersAndFootersRequest reqConfig)
        {
             ApiResponse<RemoveDocxHeadersAndFootersResponse> localVarResponse = EditDocumentDocxRemoveHeadersAndFootersWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove headers and footers from Word DOCX document Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of RemoveDocxHeadersAndFootersResponse</returns>
        public ApiResponse< RemoveDocxHeadersAndFootersResponse > EditDocumentDocxRemoveHeadersAndFootersWithHttpInfo (RemoveDocxHeadersAndFootersRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxRemoveHeadersAndFooters");

            var localVarPath = "./convert/edit/docx/remove-headers-and-footers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxRemoveHeadersAndFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveDocxHeadersAndFootersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RemoveDocxHeadersAndFootersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveDocxHeadersAndFootersResponse)));
        }

        /// <summary>
        /// Remove headers and footers from Word DOCX document Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of RemoveDocxHeadersAndFootersResponse</returns>
        public async System.Threading.Tasks.Task<RemoveDocxHeadersAndFootersResponse> EditDocumentDocxRemoveHeadersAndFootersAsync (RemoveDocxHeadersAndFootersRequest reqConfig)
        {
             ApiResponse<RemoveDocxHeadersAndFootersResponse> localVarResponse = await EditDocumentDocxRemoveHeadersAndFootersAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove headers and footers from Word DOCX document Remove all headers, or footers, or both from a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (RemoveDocxHeadersAndFootersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveDocxHeadersAndFootersResponse>> EditDocumentDocxRemoveHeadersAndFootersAsyncWithHttpInfo (RemoveDocxHeadersAndFootersRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxRemoveHeadersAndFooters");

            var localVarPath = "./convert/edit/docx/remove-headers-and-footers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxRemoveHeadersAndFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveDocxHeadersAndFootersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RemoveDocxHeadersAndFootersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveDocxHeadersAndFootersResponse)));
        }

        /// <summary>
        /// Delete any object in a Word DOCX document Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxRemoveObjectResponse</returns>
        public DocxRemoveObjectResponse EditDocumentDocxRemoveObject (DocxRemoveObjectRequest reqConfig)
        {
             ApiResponse<DocxRemoveObjectResponse> localVarResponse = EditDocumentDocxRemoveObjectWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete any object in a Word DOCX document Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxRemoveObjectResponse</returns>
        public ApiResponse< DocxRemoveObjectResponse > EditDocumentDocxRemoveObjectWithHttpInfo (DocxRemoveObjectRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxRemoveObject");

            var localVarPath = "./convert/edit/docx/remove-object";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxRemoveObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxRemoveObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxRemoveObjectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxRemoveObjectResponse)));
        }

        /// <summary>
        /// Delete any object in a Word DOCX document Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxRemoveObjectResponse</returns>
        public async System.Threading.Tasks.Task<DocxRemoveObjectResponse> EditDocumentDocxRemoveObjectAsync (DocxRemoveObjectRequest reqConfig)
        {
             ApiResponse<DocxRemoveObjectResponse> localVarResponse = await EditDocumentDocxRemoveObjectAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete any object in a Word DOCX document Delete any object, such as a paragraph, table, image, etc. from a Word Document (DOCX).  Pass in the Path of the object you would like to delete.  You can call other functions such as Get-Tables, Get-Images, Get-Body, etc. to get the paths of the objects in the document.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxRemoveObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocxRemoveObjectResponse>> EditDocumentDocxRemoveObjectAsyncWithHttpInfo (DocxRemoveObjectRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxRemoveObject");

            var localVarPath = "./convert/edit/docx/remove-object";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxRemoveObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxRemoveObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxRemoveObjectResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxRemoveObjectResponse)));
        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxReplace (ReplaceStringRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxReplaceWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxReplaceWithHttpInfo (ReplaceStringRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxReplace");

            var localVarPath = "./convert/edit/docx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxReplaceAsync (ReplaceStringRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxReplaceAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace string in Word DOCX document Replace all instances of a string in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxReplaceAsyncWithHttpInfo (ReplaceStringRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxReplace");

            var localVarPath = "./convert/edit/docx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace multiple strings in Word DOCX document Replace all instances of multiple strings in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxReplaceMulti (MultiReplaceStringRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxReplaceMultiWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace multiple strings in Word DOCX document Replace all instances of multiple strings in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxReplaceMultiWithHttpInfo (MultiReplaceStringRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxReplaceMulti");

            var localVarPath = "./convert/edit/docx/replace-all/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxReplaceMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace multiple strings in Word DOCX document Replace all instances of multiple strings in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxReplaceMultiAsync (MultiReplaceStringRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxReplaceMultiAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace multiple strings in Word DOCX document Replace all instances of multiple strings in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document string replacement configuration input</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxReplaceMultiAsyncWithHttpInfo (MultiReplaceStringRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxReplaceMulti");

            var localVarPath = "./convert/edit/docx/replace-all/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxReplaceMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ReplaceDocxParagraphResponse</returns>
        public ReplaceDocxParagraphResponse EditDocumentDocxReplaceParagraph (ReplaceDocxParagraphRequest reqConfig)
        {
             ApiResponse<ReplaceDocxParagraphResponse> localVarResponse = EditDocumentDocxReplaceParagraphWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of ReplaceDocxParagraphResponse</returns>
        public ApiResponse< ReplaceDocxParagraphResponse > EditDocumentDocxReplaceParagraphWithHttpInfo (ReplaceDocxParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxReplaceParagraph");

            var localVarPath = "./convert/edit/docx/replace/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxReplaceParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceDocxParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReplaceDocxParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceDocxParagraphResponse)));
        }

        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ReplaceDocxParagraphResponse</returns>
        public async System.Threading.Tasks.Task<ReplaceDocxParagraphResponse> EditDocumentDocxReplaceParagraphAsync (ReplaceDocxParagraphRequest reqConfig)
        {
             ApiResponse<ReplaceDocxParagraphResponse> localVarResponse = await EditDocumentDocxReplaceParagraphAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace matching paragraphs in a Word DOCX document Returns the edited Word Document (DOCX) format file with the matching paragraphs replaced as requested.  Replace a paragraph with another object such as an image.  Useful for performing templating operations.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (ReplaceDocxParagraphResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplaceDocxParagraphResponse>> EditDocumentDocxReplaceParagraphAsyncWithHttpInfo (ReplaceDocxParagraphRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxReplaceParagraph");

            var localVarPath = "./convert/edit/docx/replace/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxReplaceParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceDocxParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReplaceDocxParagraphResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceDocxParagraphResponse)));
        }

        /// <summary>
        /// Set custom property metadata properties in Word DOCX document Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentDocxSetCustomMetadataProperties (DocxSetCustomMetadataPropertiesRequest input)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentDocxSetCustomMetadataPropertiesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set custom property metadata properties in Word DOCX document Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentDocxSetCustomMetadataPropertiesWithHttpInfo (DocxSetCustomMetadataPropertiesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentDocxSetCustomMetadataProperties");

            var localVarPath = "./convert/edit/docx/set-metadata/custom-property";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetCustomMetadataProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Set custom property metadata properties in Word DOCX document Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentDocxSetCustomMetadataPropertiesAsync (DocxSetCustomMetadataPropertiesRequest input)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentDocxSetCustomMetadataPropertiesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set custom property metadata properties in Word DOCX document Sets the custom property metadata for the metadata properties in an Office Word Document (docx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentDocxSetCustomMetadataPropertiesAsyncWithHttpInfo (DocxSetCustomMetadataPropertiesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentDocxSetCustomMetadataProperties");

            var localVarPath = "./convert/edit/docx/set-metadata/custom-property";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetCustomMetadataProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Set the footer in a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxSetFooterResponse</returns>
        public DocxSetFooterResponse EditDocumentDocxSetFooter (DocxSetFooterRequest reqConfig)
        {
             ApiResponse<DocxSetFooterResponse> localVarResponse = EditDocumentDocxSetFooterWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the footer in a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxSetFooterResponse</returns>
        public ApiResponse< DocxSetFooterResponse > EditDocumentDocxSetFooterWithHttpInfo (DocxSetFooterRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxSetFooter");

            var localVarPath = "./convert/edit/docx/set-footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxSetFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxSetFooterResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxSetFooterResponse)));
        }

        /// <summary>
        /// Set the footer in a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxSetFooterResponse</returns>
        public async System.Threading.Tasks.Task<DocxSetFooterResponse> EditDocumentDocxSetFooterAsync (DocxSetFooterRequest reqConfig)
        {
             ApiResponse<DocxSetFooterResponse> localVarResponse = await EditDocumentDocxSetFooterAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the footer in a Word DOCX document Set the footer in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxSetFooterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocxSetFooterResponse>> EditDocumentDocxSetFooterAsyncWithHttpInfo (DocxSetFooterRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxSetFooter");

            var localVarPath = "./convert/edit/docx/set-footer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxSetFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxSetFooterResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxSetFooterResponse)));
        }

        /// <summary>
        /// Add page number to footer in a Word DOCX document Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxSetFooterResponse</returns>
        public DocxSetFooterResponse EditDocumentDocxSetFooterAddPageNumber (DocxSetFooterAddPageNumberRequest reqConfig)
        {
             ApiResponse<DocxSetFooterResponse> localVarResponse = EditDocumentDocxSetFooterAddPageNumberWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add page number to footer in a Word DOCX document Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxSetFooterResponse</returns>
        public ApiResponse< DocxSetFooterResponse > EditDocumentDocxSetFooterAddPageNumberWithHttpInfo (DocxSetFooterAddPageNumberRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxSetFooterAddPageNumber");

            var localVarPath = "./convert/edit/docx/set-footer/add-page-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetFooterAddPageNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxSetFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxSetFooterResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxSetFooterResponse)));
        }

        /// <summary>
        /// Add page number to footer in a Word DOCX document Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxSetFooterResponse</returns>
        public async System.Threading.Tasks.Task<DocxSetFooterResponse> EditDocumentDocxSetFooterAddPageNumberAsync (DocxSetFooterAddPageNumberRequest reqConfig)
        {
             ApiResponse<DocxSetFooterResponse> localVarResponse = await EditDocumentDocxSetFooterAddPageNumberAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add page number to footer in a Word DOCX document Set the footer in a Word Document (DOCX) to contain a page number.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxSetFooterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocxSetFooterResponse>> EditDocumentDocxSetFooterAddPageNumberAsyncWithHttpInfo (DocxSetFooterAddPageNumberRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxSetFooterAddPageNumber");

            var localVarPath = "./convert/edit/docx/set-footer/add-page-number";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetFooterAddPageNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxSetFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxSetFooterResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxSetFooterResponse)));
        }

        /// <summary>
        /// Set the header in a Word DOCX document Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>DocxSetHeaderResponse</returns>
        public DocxSetHeaderResponse EditDocumentDocxSetHeader (DocxSetHeaderRequest reqConfig)
        {
             ApiResponse<DocxSetHeaderResponse> localVarResponse = EditDocumentDocxSetHeaderWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the header in a Word DOCX document Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of DocxSetHeaderResponse</returns>
        public ApiResponse< DocxSetHeaderResponse > EditDocumentDocxSetHeaderWithHttpInfo (DocxSetHeaderRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxSetHeader");

            var localVarPath = "./convert/edit/docx/set-header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxSetHeaderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxSetHeaderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxSetHeaderResponse)));
        }

        /// <summary>
        /// Set the header in a Word DOCX document Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of DocxSetHeaderResponse</returns>
        public async System.Threading.Tasks.Task<DocxSetHeaderResponse> EditDocumentDocxSetHeaderAsync (DocxSetHeaderRequest reqConfig)
        {
             ApiResponse<DocxSetHeaderResponse> localVarResponse = await EditDocumentDocxSetHeaderAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the header in a Word DOCX document Set the header in a Word Document (DOCX).  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (DocxSetHeaderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocxSetHeaderResponse>> EditDocumentDocxSetHeaderAsyncWithHttpInfo (DocxSetHeaderRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxSetHeader");

            var localVarPath = "./convert/edit/docx/set-header";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxSetHeader", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocxSetHeaderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DocxSetHeaderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocxSetHeaderResponse)));
        }

        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>UpdateDocxTableCellResponse</returns>
        public UpdateDocxTableCellResponse EditDocumentDocxUpdateTableCell (UpdateDocxTableCellRequest reqConfig)
        {
             ApiResponse<UpdateDocxTableCellResponse> localVarResponse = EditDocumentDocxUpdateTableCellWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of UpdateDocxTableCellResponse</returns>
        public ApiResponse< UpdateDocxTableCellResponse > EditDocumentDocxUpdateTableCellWithHttpInfo (UpdateDocxTableCellRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxUpdateTableCell");

            var localVarPath = "./convert/edit/docx/update-table-cell";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxUpdateTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDocxTableCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UpdateDocxTableCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDocxTableCellResponse)));
        }

        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of UpdateDocxTableCellResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDocxTableCellResponse> EditDocumentDocxUpdateTableCellAsync (UpdateDocxTableCellRequest reqConfig)
        {
             ApiResponse<UpdateDocxTableCellResponse> localVarResponse = await EditDocumentDocxUpdateTableCellAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update, set contents of a table cell in an existing table in a Word DOCX document Sets the contents of a table cell into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (UpdateDocxTableCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDocxTableCellResponse>> EditDocumentDocxUpdateTableCellAsyncWithHttpInfo (UpdateDocxTableCellRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxUpdateTableCell");

            var localVarPath = "./convert/edit/docx/update-table-cell";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxUpdateTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDocxTableCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UpdateDocxTableCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDocxTableCellResponse)));
        }

        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>UpdateDocxTableRowResponse</returns>
        public UpdateDocxTableRowResponse EditDocumentDocxUpdateTableRow (UpdateDocxTableRowRequest reqConfig)
        {
             ApiResponse<UpdateDocxTableRowResponse> localVarResponse = EditDocumentDocxUpdateTableRowWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>ApiResponse of UpdateDocxTableRowResponse</returns>
        public ApiResponse< UpdateDocxTableRowResponse > EditDocumentDocxUpdateTableRowWithHttpInfo (UpdateDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxUpdateTableRow");

            var localVarPath = "./convert/edit/docx/update-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxUpdateTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UpdateDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDocxTableRowResponse)));
        }

        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of UpdateDocxTableRowResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDocxTableRowResponse> EditDocumentDocxUpdateTableRowAsync (UpdateDocxTableRowRequest reqConfig)
        {
             ApiResponse<UpdateDocxTableRowResponse> localVarResponse = await EditDocumentDocxUpdateTableRowAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update, set contents of a table row in an existing table in a Word DOCX document Sets the contents of a table row into a DOCX Document and returns the result.  Call Finish Editing on the output URL to complete the operation.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Document input request</param>
        /// <returns>Task of ApiResponse (UpdateDocxTableRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDocxTableRowResponse>> EditDocumentDocxUpdateTableRowAsyncWithHttpInfo (UpdateDocxTableRowRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentDocxUpdateTableRow");

            var localVarPath = "./convert/edit/docx/update-table-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentDocxUpdateTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDocxTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UpdateDocxTableRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDocxTableRowResponse)));
        }

        /// <summary>
        /// Finish editing document, and download result from document editing Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentFinishEditing (FinishEditingRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentFinishEditingWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finish editing document, and download result from document editing Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentFinishEditingWithHttpInfo (FinishEditingRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentFinishEditing");

            var localVarPath = "./convert/edit/finish-editing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentFinishEditing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Finish editing document, and download result from document editing Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentFinishEditingAsync (FinishEditingRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentFinishEditingAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finish editing document, and download result from document editing Once done editing a document, download the result.  Begin editing a document by calling begin-editing, then perform operations, then call finish-editing to get the result.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Cloudmersive Document URL to complete editing on</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentFinishEditingAsyncWithHttpInfo (FinishEditingRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentFinishEditing");

            var localVarPath = "./convert/edit/finish-editing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentFinishEditing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentPptxDeleteSlides (RemovePptxSlidesRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentPptxDeleteSlidesWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentPptxDeleteSlidesWithHttpInfo (RemovePptxSlidesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentPptxDeleteSlides");

            var localVarPath = "./convert/edit/pptx/delete-slides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentPptxDeleteSlides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentPptxDeleteSlidesAsync (RemovePptxSlidesRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentPptxDeleteSlidesAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete, remove slides from a PowerPoint PPTX presentation document Edits the input PowerPoint PPTX presentation document to remove the specified slides
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Presentation input request</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentPptxDeleteSlidesAsyncWithHttpInfo (RemovePptxSlidesRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentPptxDeleteSlides");

            var localVarPath = "./convert/edit/pptx/delete-slides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentPptxDeleteSlides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentPptxReplace (ReplaceStringRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentPptxReplaceWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentPptxReplaceWithHttpInfo (ReplaceStringRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentPptxReplace");

            var localVarPath = "./convert/edit/pptx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentPptxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentPptxReplaceAsync (ReplaceStringRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentPptxReplaceAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace string in PowerPoint PPTX presentation Replace all instances of a string in an Office PowerPoint Document (pptx)
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Replacement document configuration input</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentPptxReplaceAsyncWithHttpInfo (ReplaceStringRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentPptxReplace");

            var localVarPath = "./convert/edit/pptx/replace-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentPptxReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>AppendXlsxRowResponse</returns>
        public AppendXlsxRowResponse EditDocumentXlsxAppendRow (AppendXlsxRowRequest input)
        {
             ApiResponse<AppendXlsxRowResponse> localVarResponse = EditDocumentXlsxAppendRowWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of AppendXlsxRowResponse</returns>
        public ApiResponse< AppendXlsxRowResponse > EditDocumentXlsxAppendRowWithHttpInfo (AppendXlsxRowRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxAppendRow");

            var localVarPath = "./convert/edit/xlsx/append-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxAppendRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppendXlsxRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AppendXlsxRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppendXlsxRowResponse)));
        }

        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of AppendXlsxRowResponse</returns>
        public async System.Threading.Tasks.Task<AppendXlsxRowResponse> EditDocumentXlsxAppendRowAsync (AppendXlsxRowRequest input)
        {
             ApiResponse<AppendXlsxRowResponse> localVarResponse = await EditDocumentXlsxAppendRowAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append row to a Excel XLSX spreadsheet, worksheet Appends a row to the end of an Excel Spreadsheet worksheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (AppendXlsxRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppendXlsxRowResponse>> EditDocumentXlsxAppendRowAsyncWithHttpInfo (AppendXlsxRowRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxAppendRow");

            var localVarPath = "./convert/edit/xlsx/append-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxAppendRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppendXlsxRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AppendXlsxRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppendXlsxRowResponse)));
        }

        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ClearXlsxCellResponse</returns>
        public ClearXlsxCellResponse EditDocumentXlsxClearCellByIndex (ClearXlsxCellRequest input)
        {
             ApiResponse<ClearXlsxCellResponse> localVarResponse = EditDocumentXlsxClearCellByIndexWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of ClearXlsxCellResponse</returns>
        public ApiResponse< ClearXlsxCellResponse > EditDocumentXlsxClearCellByIndexWithHttpInfo (ClearXlsxCellRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxClearCellByIndex");

            var localVarPath = "./convert/edit/xlsx/clear-cell/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxClearCellByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClearXlsxCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ClearXlsxCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClearXlsxCellResponse)));
        }

        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ClearXlsxCellResponse</returns>
        public async System.Threading.Tasks.Task<ClearXlsxCellResponse> EditDocumentXlsxClearCellByIndexAsync (ClearXlsxCellRequest input)
        {
             ApiResponse<ClearXlsxCellResponse> localVarResponse = await EditDocumentXlsxClearCellByIndexAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear cell contents in an Excel XLSX spreadsheet, worksheet by index Clears, sets to blank, the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (ClearXlsxCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClearXlsxCellResponse>> EditDocumentXlsxClearCellByIndexAsyncWithHttpInfo (ClearXlsxCellRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxClearCellByIndex");

            var localVarPath = "./convert/edit/xlsx/clear-cell/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxClearCellByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClearXlsxCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ClearXlsxCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClearXlsxCellResponse)));
        }

        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ClearXlsxRowResponse</returns>
        public ClearXlsxRowResponse EditDocumentXlsxClearRow (ClearXlsxRowRequest input)
        {
             ApiResponse<ClearXlsxRowResponse> localVarResponse = EditDocumentXlsxClearRowWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of ClearXlsxRowResponse</returns>
        public ApiResponse< ClearXlsxRowResponse > EditDocumentXlsxClearRowWithHttpInfo (ClearXlsxRowRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxClearRow");

            var localVarPath = "./convert/edit/xlsx/clear-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxClearRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClearXlsxRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ClearXlsxRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClearXlsxRowResponse)));
        }

        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ClearXlsxRowResponse</returns>
        public async System.Threading.Tasks.Task<ClearXlsxRowResponse> EditDocumentXlsxClearRowAsync (ClearXlsxRowRequest input)
        {
             ApiResponse<ClearXlsxRowResponse> localVarResponse = await EditDocumentXlsxClearRowAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear row from a Excel XLSX spreadsheet, worksheet Clears data from a specific row in the Excel Spreadsheet worksheet, leaving a blank row. Use the Get Rows And Cells API to enumerate available rows in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (ClearXlsxRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClearXlsxRowResponse>> EditDocumentXlsxClearRowAsyncWithHttpInfo (ClearXlsxRowRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxClearRow");

            var localVarPath = "./convert/edit/xlsx/clear-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxClearRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClearXlsxRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ClearXlsxRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClearXlsxRowResponse)));
        }

        /// <summary>
        /// Create a blank Excel XLSX spreadsheet Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>CreateBlankSpreadsheetResponse</returns>
        public CreateBlankSpreadsheetResponse EditDocumentXlsxCreateBlankSpreadsheet (CreateBlankSpreadsheetRequest input)
        {
             ApiResponse<CreateBlankSpreadsheetResponse> localVarResponse = EditDocumentXlsxCreateBlankSpreadsheetWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a blank Excel XLSX spreadsheet Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of CreateBlankSpreadsheetResponse</returns>
        public ApiResponse< CreateBlankSpreadsheetResponse > EditDocumentXlsxCreateBlankSpreadsheetWithHttpInfo (CreateBlankSpreadsheetRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxCreateBlankSpreadsheet");

            var localVarPath = "./convert/edit/xlsx/create/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxCreateBlankSpreadsheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBlankSpreadsheetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateBlankSpreadsheetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBlankSpreadsheetResponse)));
        }

        /// <summary>
        /// Create a blank Excel XLSX spreadsheet Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of CreateBlankSpreadsheetResponse</returns>
        public async System.Threading.Tasks.Task<CreateBlankSpreadsheetResponse> EditDocumentXlsxCreateBlankSpreadsheetAsync (CreateBlankSpreadsheetRequest input)
        {
             ApiResponse<CreateBlankSpreadsheetResponse> localVarResponse = await EditDocumentXlsxCreateBlankSpreadsheetAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a blank Excel XLSX spreadsheet Returns a blank Excel XLSX Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (CreateBlankSpreadsheetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateBlankSpreadsheetResponse>> EditDocumentXlsxCreateBlankSpreadsheetAsyncWithHttpInfo (CreateBlankSpreadsheetRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxCreateBlankSpreadsheet");

            var localVarPath = "./convert/edit/xlsx/create/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxCreateBlankSpreadsheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateBlankSpreadsheetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateBlankSpreadsheetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateBlankSpreadsheetResponse)));
        }

        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>CreateSpreadsheetFromDataResponse</returns>
        public CreateSpreadsheetFromDataResponse EditDocumentXlsxCreateSpreadsheetFromData (CreateSpreadsheetFromDataRequest input)
        {
             ApiResponse<CreateSpreadsheetFromDataResponse> localVarResponse = EditDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of CreateSpreadsheetFromDataResponse</returns>
        public ApiResponse< CreateSpreadsheetFromDataResponse > EditDocumentXlsxCreateSpreadsheetFromDataWithHttpInfo (CreateSpreadsheetFromDataRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxCreateSpreadsheetFromData");

            var localVarPath = "./convert/edit/xlsx/create/from/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxCreateSpreadsheetFromData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSpreadsheetFromDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSpreadsheetFromDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSpreadsheetFromDataResponse)));
        }

        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of CreateSpreadsheetFromDataResponse</returns>
        public async System.Threading.Tasks.Task<CreateSpreadsheetFromDataResponse> EditDocumentXlsxCreateSpreadsheetFromDataAsync (CreateSpreadsheetFromDataRequest input)
        {
             ApiResponse<CreateSpreadsheetFromDataResponse> localVarResponse = await EditDocumentXlsxCreateSpreadsheetFromDataAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Excel XLSX spreadsheet from column and row data Returns a new Excel XLSX Spreadsheet (XLSX) format file populated with column and row data specified as input
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (CreateSpreadsheetFromDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSpreadsheetFromDataResponse>> EditDocumentXlsxCreateSpreadsheetFromDataAsyncWithHttpInfo (CreateSpreadsheetFromDataRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxCreateSpreadsheetFromData");

            var localVarPath = "./convert/edit/xlsx/create/from/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxCreateSpreadsheetFromData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSpreadsheetFromDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateSpreadsheetFromDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSpreadsheetFromDataResponse)));
        }

        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>byte[]</returns>
        public byte[] EditDocumentXlsxDeleteWorksheet (RemoveXlsxWorksheetRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = EditDocumentXlsxDeleteWorksheetWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDocumentXlsxDeleteWorksheetWithHttpInfo (RemoveXlsxWorksheetRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentXlsxDeleteWorksheet");

            var localVarPath = "./convert/edit/xlsx/delete-worksheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxDeleteWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDocumentXlsxDeleteWorksheetAsync (RemoveXlsxWorksheetRequest reqConfig)
        {
             ApiResponse<byte[]> localVarResponse = await EditDocumentXlsxDeleteWorksheetAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete, remove worksheet from an Excel XLSX spreadsheet document Edits the input Excel XLSX spreadsheet document to remove the specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">Spreadsheet input request</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDocumentXlsxDeleteWorksheetAsyncWithHttpInfo (RemoveXlsxWorksheetRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling EditDocumentApi->EditDocumentXlsxDeleteWorksheet");

            var localVarPath = "./convert/edit/xlsx/delete-worksheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxDeleteWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>DisableSharedWorkbookResponse</returns>
        public DisableSharedWorkbookResponse EditDocumentXlsxDisableSharedWorkbook (DisableSharedWorkbookRequest input)
        {
             ApiResponse<DisableSharedWorkbookResponse> localVarResponse = EditDocumentXlsxDisableSharedWorkbookWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of DisableSharedWorkbookResponse</returns>
        public ApiResponse< DisableSharedWorkbookResponse > EditDocumentXlsxDisableSharedWorkbookWithHttpInfo (DisableSharedWorkbookRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxDisableSharedWorkbook");

            var localVarPath = "./convert/edit/xlsx/configuration/disable-shared-workbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxDisableSharedWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisableSharedWorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DisableSharedWorkbookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisableSharedWorkbookResponse)));
        }

        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of DisableSharedWorkbookResponse</returns>
        public async System.Threading.Tasks.Task<DisableSharedWorkbookResponse> EditDocumentXlsxDisableSharedWorkbookAsync (DisableSharedWorkbookRequest input)
        {
             ApiResponse<DisableSharedWorkbookResponse> localVarResponse = await EditDocumentXlsxDisableSharedWorkbookAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable Shared Workbook (legacy) in Excel XLSX spreadsheet Disable the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (DisableSharedWorkbookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DisableSharedWorkbookResponse>> EditDocumentXlsxDisableSharedWorkbookAsyncWithHttpInfo (DisableSharedWorkbookRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxDisableSharedWorkbook");

            var localVarPath = "./convert/edit/xlsx/configuration/disable-shared-workbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxDisableSharedWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisableSharedWorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DisableSharedWorkbookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisableSharedWorkbookResponse)));
        }

        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>EnableSharedWorkbookResponse</returns>
        public EnableSharedWorkbookResponse EditDocumentXlsxEnableSharedWorkbook (EnableSharedWorkbookRequest input)
        {
             ApiResponse<EnableSharedWorkbookResponse> localVarResponse = EditDocumentXlsxEnableSharedWorkbookWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of EnableSharedWorkbookResponse</returns>
        public ApiResponse< EnableSharedWorkbookResponse > EditDocumentXlsxEnableSharedWorkbookWithHttpInfo (EnableSharedWorkbookRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxEnableSharedWorkbook");

            var localVarPath = "./convert/edit/xlsx/configuration/enable-shared-workbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxEnableSharedWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnableSharedWorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EnableSharedWorkbookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnableSharedWorkbookResponse)));
        }

        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of EnableSharedWorkbookResponse</returns>
        public async System.Threading.Tasks.Task<EnableSharedWorkbookResponse> EditDocumentXlsxEnableSharedWorkbookAsync (EnableSharedWorkbookRequest input)
        {
             ApiResponse<EnableSharedWorkbookResponse> localVarResponse = await EditDocumentXlsxEnableSharedWorkbookAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable Shared Workbook (legacy) in Excel XLSX spreadsheet Enables the Shared Workbook (legacy) mode in an Excel XLSX spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (EnableSharedWorkbookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnableSharedWorkbookResponse>> EditDocumentXlsxEnableSharedWorkbookAsyncWithHttpInfo (EnableSharedWorkbookRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxEnableSharedWorkbook");

            var localVarPath = "./convert/edit/xlsx/configuration/enable-shared-workbook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxEnableSharedWorkbook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnableSharedWorkbookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EnableSharedWorkbookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnableSharedWorkbookResponse)));
        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxCellByIdentifierResponse</returns>
        public GetXlsxCellByIdentifierResponse EditDocumentXlsxGetCellByIdentifier (GetXlsxCellByIdentifierRequest input)
        {
             ApiResponse<GetXlsxCellByIdentifierResponse> localVarResponse = EditDocumentXlsxGetCellByIdentifierWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxCellByIdentifierResponse</returns>
        public ApiResponse< GetXlsxCellByIdentifierResponse > EditDocumentXlsxGetCellByIdentifierWithHttpInfo (GetXlsxCellByIdentifierRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetCellByIdentifier");

            var localVarPath = "./convert/edit/xlsx/get-cell/by-identifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetCellByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxCellByIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxCellByIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxCellByIdentifierResponse)));
        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxCellByIdentifierResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxCellByIdentifierResponse> EditDocumentXlsxGetCellByIdentifierAsync (GetXlsxCellByIdentifierRequest input)
        {
             ApiResponse<GetXlsxCellByIdentifierResponse> localVarResponse = await EditDocumentXlsxGetCellByIdentifierAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by cell identifier Returns the value of a specific cell based on its identifier (e.g. A1, B22, C33, etc.) in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxCellByIdentifierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxCellByIdentifierResponse>> EditDocumentXlsxGetCellByIdentifierAsyncWithHttpInfo (GetXlsxCellByIdentifierRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetCellByIdentifier");

            var localVarPath = "./convert/edit/xlsx/get-cell/by-identifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetCellByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxCellByIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxCellByIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxCellByIdentifierResponse)));
        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxCellResponse</returns>
        public GetXlsxCellResponse EditDocumentXlsxGetCellByIndex (GetXlsxCellRequest input)
        {
             ApiResponse<GetXlsxCellResponse> localVarResponse = EditDocumentXlsxGetCellByIndexWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxCellResponse</returns>
        public ApiResponse< GetXlsxCellResponse > EditDocumentXlsxGetCellByIndexWithHttpInfo (GetXlsxCellRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetCellByIndex");

            var localVarPath = "./convert/edit/xlsx/get-cell/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetCellByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxCellResponse)));
        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxCellResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxCellResponse> EditDocumentXlsxGetCellByIndexAsync (GetXlsxCellRequest input)
        {
             ApiResponse<GetXlsxCellResponse> localVarResponse = await EditDocumentXlsxGetCellByIndexAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cell from an Excel XLSX spreadsheet, worksheet by index Returns the value and definition of a specific cell in a specific row in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxCellResponse>> EditDocumentXlsxGetCellByIndexAsyncWithHttpInfo (GetXlsxCellRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetCellByIndex");

            var localVarPath = "./convert/edit/xlsx/get-cell/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetCellByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxCellResponse)));
        }

        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet Returns the columns defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxColumnsResponse</returns>
        public GetXlsxColumnsResponse EditDocumentXlsxGetColumns (GetXlsxColumnsRequest input)
        {
             ApiResponse<GetXlsxColumnsResponse> localVarResponse = EditDocumentXlsxGetColumnsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet Returns the columns defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxColumnsResponse</returns>
        public ApiResponse< GetXlsxColumnsResponse > EditDocumentXlsxGetColumnsWithHttpInfo (GetXlsxColumnsRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetColumns");

            var localVarPath = "./convert/edit/xlsx/get-columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxColumnsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxColumnsResponse)));
        }

        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet Returns the columns defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxColumnsResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxColumnsResponse> EditDocumentXlsxGetColumnsAsync (GetXlsxColumnsRequest input)
        {
             ApiResponse<GetXlsxColumnsResponse> localVarResponse = await EditDocumentXlsxGetColumnsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get columns from a Excel XLSX spreadsheet, worksheet Returns the columns defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxColumnsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxColumnsResponse>> EditDocumentXlsxGetColumnsAsyncWithHttpInfo (GetXlsxColumnsRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetColumns");

            var localVarPath = "./convert/edit/xlsx/get-columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxColumnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxColumnsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxColumnsResponse)));
        }

        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet Returns the images defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxImagesResponse</returns>
        public GetXlsxImagesResponse EditDocumentXlsxGetImages (GetXlsxImagesRequest input)
        {
             ApiResponse<GetXlsxImagesResponse> localVarResponse = EditDocumentXlsxGetImagesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet Returns the images defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxImagesResponse</returns>
        public ApiResponse< GetXlsxImagesResponse > EditDocumentXlsxGetImagesWithHttpInfo (GetXlsxImagesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetImages");

            var localVarPath = "./convert/edit/xlsx/get-images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxImagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxImagesResponse)));
        }

        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet Returns the images defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxImagesResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxImagesResponse> EditDocumentXlsxGetImagesAsync (GetXlsxImagesRequest input)
        {
             ApiResponse<GetXlsxImagesResponse> localVarResponse = await EditDocumentXlsxGetImagesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get images from a Excel XLSX spreadsheet, worksheet Returns the images defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxImagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxImagesResponse>> EditDocumentXlsxGetImagesAsyncWithHttpInfo (GetXlsxImagesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetImages");

            var localVarPath = "./convert/edit/xlsx/get-images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxImagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxImagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxImagesResponse)));
        }

        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxRowsAndCellsResponse</returns>
        public GetXlsxRowsAndCellsResponse EditDocumentXlsxGetRowsAndCells (GetXlsxRowsAndCellsRequest input)
        {
             ApiResponse<GetXlsxRowsAndCellsResponse> localVarResponse = EditDocumentXlsxGetRowsAndCellsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxRowsAndCellsResponse</returns>
        public ApiResponse< GetXlsxRowsAndCellsResponse > EditDocumentXlsxGetRowsAndCellsWithHttpInfo (GetXlsxRowsAndCellsRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetRowsAndCells");

            var localVarPath = "./convert/edit/xlsx/get-rows-and-cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetRowsAndCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxRowsAndCellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxRowsAndCellsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxRowsAndCellsResponse)));
        }

        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxRowsAndCellsResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxRowsAndCellsResponse> EditDocumentXlsxGetRowsAndCellsAsync (GetXlsxRowsAndCellsRequest input)
        {
             ApiResponse<GetXlsxRowsAndCellsResponse> localVarResponse = await EditDocumentXlsxGetRowsAndCellsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get rows and cells from a Excel XLSX spreadsheet, worksheet Returns the rows and cells defined in the Excel Spreadsheet worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxRowsAndCellsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxRowsAndCellsResponse>> EditDocumentXlsxGetRowsAndCellsAsyncWithHttpInfo (GetXlsxRowsAndCellsRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetRowsAndCells");

            var localVarPath = "./convert/edit/xlsx/get-rows-and-cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetRowsAndCells", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxRowsAndCellsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxRowsAndCellsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxRowsAndCellsResponse)));
        }

        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxSpecificRowResponse</returns>
        public GetXlsxSpecificRowResponse EditDocumentXlsxGetSpecificRow (GetXlsxSpecificRowRequest input)
        {
             ApiResponse<GetXlsxSpecificRowResponse> localVarResponse = EditDocumentXlsxGetSpecificRowWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxSpecificRowResponse</returns>
        public ApiResponse< GetXlsxSpecificRowResponse > EditDocumentXlsxGetSpecificRowWithHttpInfo (GetXlsxSpecificRowRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetSpecificRow");

            var localVarPath = "./convert/edit/xlsx/get-specific-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetSpecificRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxSpecificRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxSpecificRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxSpecificRowResponse)));
        }

        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxSpecificRowResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxSpecificRowResponse> EditDocumentXlsxGetSpecificRowAsync (GetXlsxSpecificRowRequest input)
        {
             ApiResponse<GetXlsxSpecificRowResponse> localVarResponse = await EditDocumentXlsxGetSpecificRowAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific row from a Excel XLSX spreadsheet, worksheet by path Returns the specific row and its cells defined in the Excel Spreadsheet worksheet based on the specified path.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxSpecificRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxSpecificRowResponse>> EditDocumentXlsxGetSpecificRowAsyncWithHttpInfo (GetXlsxSpecificRowRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetSpecificRow");

            var localVarPath = "./convert/edit/xlsx/get-specific-row";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetSpecificRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxSpecificRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxSpecificRowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxSpecificRowResponse)));
        }

        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet Returns the style defined in the Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxStylesResponse</returns>
        public GetXlsxStylesResponse EditDocumentXlsxGetStyles (GetXlsxStylesRequest input)
        {
             ApiResponse<GetXlsxStylesResponse> localVarResponse = EditDocumentXlsxGetStylesWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet Returns the style defined in the Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxStylesResponse</returns>
        public ApiResponse< GetXlsxStylesResponse > EditDocumentXlsxGetStylesWithHttpInfo (GetXlsxStylesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetStyles");

            var localVarPath = "./convert/edit/xlsx/get-styles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetStyles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxStylesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxStylesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxStylesResponse)));
        }

        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet Returns the style defined in the Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxStylesResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxStylesResponse> EditDocumentXlsxGetStylesAsync (GetXlsxStylesRequest input)
        {
             ApiResponse<GetXlsxStylesResponse> localVarResponse = await EditDocumentXlsxGetStylesAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get styles from a Excel XLSX spreadsheet, worksheet Returns the style defined in the Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxStylesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxStylesResponse>> EditDocumentXlsxGetStylesAsyncWithHttpInfo (GetXlsxStylesRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetStyles");

            var localVarPath = "./convert/edit/xlsx/get-styles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetStyles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxStylesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxStylesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxStylesResponse)));
        }

        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>GetXlsxWorksheetsResponse</returns>
        public GetXlsxWorksheetsResponse EditDocumentXlsxGetWorksheets (GetXlsxWorksheetsRequest input)
        {
             ApiResponse<GetXlsxWorksheetsResponse> localVarResponse = EditDocumentXlsxGetWorksheetsWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of GetXlsxWorksheetsResponse</returns>
        public ApiResponse< GetXlsxWorksheetsResponse > EditDocumentXlsxGetWorksheetsWithHttpInfo (GetXlsxWorksheetsRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetWorksheets");

            var localVarPath = "./convert/edit/xlsx/get-worksheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetWorksheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxWorksheetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxWorksheetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxWorksheetsResponse)));
        }

        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of GetXlsxWorksheetsResponse</returns>
        public async System.Threading.Tasks.Task<GetXlsxWorksheetsResponse> EditDocumentXlsxGetWorksheetsAsync (GetXlsxWorksheetsRequest input)
        {
             ApiResponse<GetXlsxWorksheetsResponse> localVarResponse = await EditDocumentXlsxGetWorksheetsAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get worksheets from a Excel XLSX spreadsheet Returns the worksheets (tabs) defined in the Excel Spreadsheet (XLSX) format file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (GetXlsxWorksheetsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetXlsxWorksheetsResponse>> EditDocumentXlsxGetWorksheetsAsyncWithHttpInfo (GetXlsxWorksheetsRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxGetWorksheets");

            var localVarPath = "./convert/edit/xlsx/get-worksheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxGetWorksheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetXlsxWorksheetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetXlsxWorksheetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetXlsxWorksheetsResponse)));
        }

        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet Inserts a new worksheet into an Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>InsertXlsxWorksheetResponse</returns>
        public InsertXlsxWorksheetResponse EditDocumentXlsxInsertWorksheet (InsertXlsxWorksheetRequest input)
        {
             ApiResponse<InsertXlsxWorksheetResponse> localVarResponse = EditDocumentXlsxInsertWorksheetWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet Inserts a new worksheet into an Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of InsertXlsxWorksheetResponse</returns>
        public ApiResponse< InsertXlsxWorksheetResponse > EditDocumentXlsxInsertWorksheetWithHttpInfo (InsertXlsxWorksheetRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxInsertWorksheet");

            var localVarPath = "./convert/edit/xlsx/insert-worksheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxInsertWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertXlsxWorksheetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertXlsxWorksheetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertXlsxWorksheetResponse)));
        }

        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet Inserts a new worksheet into an Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of InsertXlsxWorksheetResponse</returns>
        public async System.Threading.Tasks.Task<InsertXlsxWorksheetResponse> EditDocumentXlsxInsertWorksheetAsync (InsertXlsxWorksheetRequest input)
        {
             ApiResponse<InsertXlsxWorksheetResponse> localVarResponse = await EditDocumentXlsxInsertWorksheetAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert a new worksheet into an Excel XLSX spreadsheet Inserts a new worksheet into an Excel Spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (InsertXlsxWorksheetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InsertXlsxWorksheetResponse>> EditDocumentXlsxInsertWorksheetAsyncWithHttpInfo (InsertXlsxWorksheetRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxInsertWorksheet");

            var localVarPath = "./convert/edit/xlsx/insert-worksheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxInsertWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertXlsxWorksheetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InsertXlsxWorksheetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertXlsxWorksheetResponse)));
        }

        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>RenameXlsxWorksheetResponse</returns>
        public RenameXlsxWorksheetResponse EditDocumentXlsxRenameWorksheet (RenameXlsxWorksheetRequest input)
        {
             ApiResponse<RenameXlsxWorksheetResponse> localVarResponse = EditDocumentXlsxRenameWorksheetWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of RenameXlsxWorksheetResponse</returns>
        public ApiResponse< RenameXlsxWorksheetResponse > EditDocumentXlsxRenameWorksheetWithHttpInfo (RenameXlsxWorksheetRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxRenameWorksheet");

            var localVarPath = "./convert/edit/xlsx/rename-worksheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxRenameWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RenameXlsxWorksheetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RenameXlsxWorksheetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RenameXlsxWorksheetResponse)));
        }

        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of RenameXlsxWorksheetResponse</returns>
        public async System.Threading.Tasks.Task<RenameXlsxWorksheetResponse> EditDocumentXlsxRenameWorksheetAsync (RenameXlsxWorksheetRequest input)
        {
             ApiResponse<RenameXlsxWorksheetResponse> localVarResponse = await EditDocumentXlsxRenameWorksheetAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rename a specific worksheet in a Excel XLSX spreadsheet Edits the input Excel XLSX spreadsheet document to rename a specified worksheet (tab).  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (RenameXlsxWorksheetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RenameXlsxWorksheetResponse>> EditDocumentXlsxRenameWorksheetAsyncWithHttpInfo (RenameXlsxWorksheetRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxRenameWorksheet");

            var localVarPath = "./convert/edit/xlsx/rename-worksheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxRenameWorksheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RenameXlsxWorksheetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RenameXlsxWorksheetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RenameXlsxWorksheetResponse)));
        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>SetXlsxCellByIdentifierResponse</returns>
        public SetXlsxCellByIdentifierResponse EditDocumentXlsxSetCellByIdentifier (SetXlsxCellByIdentifierRequest input)
        {
             ApiResponse<SetXlsxCellByIdentifierResponse> localVarResponse = EditDocumentXlsxSetCellByIdentifierWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of SetXlsxCellByIdentifierResponse</returns>
        public ApiResponse< SetXlsxCellByIdentifierResponse > EditDocumentXlsxSetCellByIdentifierWithHttpInfo (SetXlsxCellByIdentifierRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxSetCellByIdentifier");

            var localVarPath = "./convert/edit/xlsx/set-cell/by-identifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxSetCellByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetXlsxCellByIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SetXlsxCellByIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetXlsxCellByIdentifierResponse)));
        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of SetXlsxCellByIdentifierResponse</returns>
        public async System.Threading.Tasks.Task<SetXlsxCellByIdentifierResponse> EditDocumentXlsxSetCellByIdentifierAsync (SetXlsxCellByIdentifierRequest input)
        {
             ApiResponse<SetXlsxCellByIdentifierResponse> localVarResponse = await EditDocumentXlsxSetCellByIdentifierAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by cell identifier Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet using its cell identifier (e.g. A1, B22, C33) in the worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (SetXlsxCellByIdentifierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetXlsxCellByIdentifierResponse>> EditDocumentXlsxSetCellByIdentifierAsyncWithHttpInfo (SetXlsxCellByIdentifierRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxSetCellByIdentifier");

            var localVarPath = "./convert/edit/xlsx/set-cell/by-identifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxSetCellByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetXlsxCellByIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SetXlsxCellByIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetXlsxCellByIdentifierResponse)));
        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>SetXlsxCellResponse</returns>
        public SetXlsxCellResponse EditDocumentXlsxSetCellByIndex (SetXlsxCellRequest input)
        {
             ApiResponse<SetXlsxCellResponse> localVarResponse = EditDocumentXlsxSetCellByIndexWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>ApiResponse of SetXlsxCellResponse</returns>
        public ApiResponse< SetXlsxCellResponse > EditDocumentXlsxSetCellByIndexWithHttpInfo (SetXlsxCellRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxSetCellByIndex");

            var localVarPath = "./convert/edit/xlsx/set-cell/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxSetCellByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetXlsxCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SetXlsxCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetXlsxCellResponse)));
        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of SetXlsxCellResponse</returns>
        public async System.Threading.Tasks.Task<SetXlsxCellResponse> EditDocumentXlsxSetCellByIndexAsync (SetXlsxCellRequest input)
        {
             ApiResponse<SetXlsxCellResponse> localVarResponse = await EditDocumentXlsxSetCellByIndexAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set, update cell contents in an Excel XLSX spreadsheet, worksheet by index Sets, updates the contents of a specific cell in an Excel XLSX spreadsheet, worksheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Document input request</param>
        /// <returns>Task of ApiResponse (SetXlsxCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetXlsxCellResponse>> EditDocumentXlsxSetCellByIndexAsyncWithHttpInfo (SetXlsxCellRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling EditDocumentApi->EditDocumentXlsxSetCellByIndex");

            var localVarPath = "./convert/edit/xlsx/set-cell/by-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDocumentXlsxSetCellByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetXlsxCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SetXlsxCellResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetXlsxCellResponse)));
        }

    }
}
