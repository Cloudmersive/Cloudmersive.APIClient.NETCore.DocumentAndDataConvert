/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEditTextApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content
        /// </summary>
        /// <remarks>
        /// Decodes / converts base 64 UTF-8 text string to binary content
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Base64DecodeResponse</returns>
        Base64DecodeResponse EditTextBase64Decode (Base64DecodeRequest request);

        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content
        /// </summary>
        /// <remarks>
        /// Decodes / converts base 64 UTF-8 text string to binary content
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Base64DecodeResponse</returns>
        ApiResponse<Base64DecodeResponse> EditTextBase64DecodeWithHttpInfo (Base64DecodeRequest request);
        /// <summary>
        /// Detect, check if text string is base 64 encoded
        /// </summary>
        /// <remarks>
        /// Checks, detects if input string is base 64 encoded
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Base64DetectResponse</returns>
        Base64DetectResponse EditTextBase64Detect (Base64DetectRequest request);

        /// <summary>
        /// Detect, check if text string is base 64 encoded
        /// </summary>
        /// <remarks>
        /// Checks, detects if input string is base 64 encoded
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Base64DetectResponse</returns>
        ApiResponse<Base64DetectResponse> EditTextBase64DetectWithHttpInfo (Base64DetectRequest request);
        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string
        /// </summary>
        /// <remarks>
        /// Encodes / converts binary or file data to a text string
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Base64EncodeResponse</returns>
        Base64EncodeResponse EditTextBase64Encode (Base64EncodeRequest request);

        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string
        /// </summary>
        /// <remarks>
        /// Encodes / converts binary or file data to a text string
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Base64EncodeResponse</returns>
        ApiResponse<Base64EncodeResponse> EditTextBase64EncodeWithHttpInfo (Base64EncodeRequest request);
        /// <summary>
        /// Set, change line endings of a text file
        /// </summary>
        /// <remarks>
        /// Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ChangeLineEndingResponse</returns>
        ChangeLineEndingResponse EditTextChangeLineEndings (string lineEndingType, System.IO.Stream inputFile);

        /// <summary>
        /// Set, change line endings of a text file
        /// </summary>
        /// <remarks>
        /// Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of ChangeLineEndingResponse</returns>
        ApiResponse<ChangeLineEndingResponse> EditTextChangeLineEndingsWithHttpInfo (string lineEndingType, System.IO.Stream inputFile);
        /// <summary>
        /// Detect line endings of a text file
        /// </summary>
        /// <remarks>
        /// Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>DetectLineEndingsResponse</returns>
        DetectLineEndingsResponse EditTextDetectLineEndings (System.IO.Stream inputFile);

        /// <summary>
        /// Detect line endings of a text file
        /// </summary>
        /// <remarks>
        /// Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of DetectLineEndingsResponse</returns>
        ApiResponse<DetectLineEndingsResponse> EditTextDetectLineEndingsWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Find a regular expression regex in text input
        /// </summary>
        /// <remarks>
        /// Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>FindStringRegexResponse</returns>
        FindStringRegexResponse EditTextFindRegex (FindStringRegexRequest request);

        /// <summary>
        /// Find a regular expression regex in text input
        /// </summary>
        /// <remarks>
        /// Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of FindStringRegexResponse</returns>
        ApiResponse<FindStringRegexResponse> EditTextFindRegexWithHttpInfo (FindStringRegexRequest request);
        /// <summary>
        /// Find a string in text input
        /// </summary>
        /// <remarks>
        /// Finds all occurrences of the input string in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>FindStringSimpleResponse</returns>
        FindStringSimpleResponse EditTextFindSimple (FindStringSimpleRequest request);

        /// <summary>
        /// Find a string in text input
        /// </summary>
        /// <remarks>
        /// Finds all occurrences of the input string in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of FindStringSimpleResponse</returns>
        ApiResponse<FindStringSimpleResponse> EditTextFindSimpleWithHttpInfo (FindStringSimpleRequest request);
        /// <summary>
        /// Remove whitespace from text string
        /// </summary>
        /// <remarks>
        /// Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>RemoveWhitespaceFromTextResponse</returns>
        RemoveWhitespaceFromTextResponse EditTextRemoveAllWhitespace (RemoveWhitespaceFromTextRequest request);

        /// <summary>
        /// Remove whitespace from text string
        /// </summary>
        /// <remarks>
        /// Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of RemoveWhitespaceFromTextResponse</returns>
        ApiResponse<RemoveWhitespaceFromTextResponse> EditTextRemoveAllWhitespaceWithHttpInfo (RemoveWhitespaceFromTextRequest request);
        /// <summary>
        /// Remove HTML from text string
        /// </summary>
        /// <remarks>
        /// Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>RemoveHtmlFromTextResponse</returns>
        RemoveHtmlFromTextResponse EditTextRemoveHtml (RemoveHtmlFromTextRequest request);

        /// <summary>
        /// Remove HTML from text string
        /// </summary>
        /// <remarks>
        /// Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of RemoveHtmlFromTextResponse</returns>
        ApiResponse<RemoveHtmlFromTextResponse> EditTextRemoveHtmlWithHttpInfo (RemoveHtmlFromTextRequest request);
        /// <summary>
        /// Replace a string in text with a regex regular expression string
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ReplaceStringRegexResponse</returns>
        ReplaceStringRegexResponse EditTextReplaceRegex (ReplaceStringRegexRequest request);

        /// <summary>
        /// Replace a string in text with a regex regular expression string
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of ReplaceStringRegexResponse</returns>
        ApiResponse<ReplaceStringRegexResponse> EditTextReplaceRegexWithHttpInfo (ReplaceStringRegexRequest request);
        /// <summary>
        /// Replace a string in text with another string value
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ReplaceStringSimpleResponse</returns>
        ReplaceStringSimpleResponse EditTextReplaceSimple (ReplaceStringSimpleRequest request);

        /// <summary>
        /// Replace a string in text with another string value
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of ReplaceStringSimpleResponse</returns>
        ApiResponse<ReplaceStringSimpleResponse> EditTextReplaceSimpleWithHttpInfo (ReplaceStringSimpleRequest request);
        /// <summary>
        /// Detect text encoding of file
        /// </summary>
        /// <remarks>
        /// Checks text encoding of file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>TextEncodingDetectResponse</returns>
        TextEncodingDetectResponse EditTextTextEncodingDetect (System.IO.Stream inputFile);

        /// <summary>
        /// Detect text encoding of file
        /// </summary>
        /// <remarks>
        /// Checks text encoding of file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of TextEncodingDetectResponse</returns>
        ApiResponse<TextEncodingDetectResponse> EditTextTextEncodingDetectWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Trim leading and trailing whitespace from text string
        /// </summary>
        /// <remarks>
        /// Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>RemoveWhitespaceFromTextResponse</returns>
        RemoveWhitespaceFromTextResponse EditTextTrimWhitespace (RemoveWhitespaceFromTextRequest request);

        /// <summary>
        /// Trim leading and trailing whitespace from text string
        /// </summary>
        /// <remarks>
        /// Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of RemoveWhitespaceFromTextResponse</returns>
        ApiResponse<RemoveWhitespaceFromTextResponse> EditTextTrimWhitespaceWithHttpInfo (RemoveWhitespaceFromTextRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content
        /// </summary>
        /// <remarks>
        /// Decodes / converts base 64 UTF-8 text string to binary content
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Base64DecodeResponse</returns>
        System.Threading.Tasks.Task<Base64DecodeResponse> EditTextBase64DecodeAsync (Base64DecodeRequest request);

        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content
        /// </summary>
        /// <remarks>
        /// Decodes / converts base 64 UTF-8 text string to binary content
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Base64DecodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64DecodeResponse>> EditTextBase64DecodeAsyncWithHttpInfo (Base64DecodeRequest request);
        /// <summary>
        /// Detect, check if text string is base 64 encoded
        /// </summary>
        /// <remarks>
        /// Checks, detects if input string is base 64 encoded
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Base64DetectResponse</returns>
        System.Threading.Tasks.Task<Base64DetectResponse> EditTextBase64DetectAsync (Base64DetectRequest request);

        /// <summary>
        /// Detect, check if text string is base 64 encoded
        /// </summary>
        /// <remarks>
        /// Checks, detects if input string is base 64 encoded
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Base64DetectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64DetectResponse>> EditTextBase64DetectAsyncWithHttpInfo (Base64DetectRequest request);
        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string
        /// </summary>
        /// <remarks>
        /// Encodes / converts binary or file data to a text string
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Base64EncodeResponse</returns>
        System.Threading.Tasks.Task<Base64EncodeResponse> EditTextBase64EncodeAsync (Base64EncodeRequest request);

        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string
        /// </summary>
        /// <remarks>
        /// Encodes / converts binary or file data to a text string
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Base64EncodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64EncodeResponse>> EditTextBase64EncodeAsyncWithHttpInfo (Base64EncodeRequest request);
        /// <summary>
        /// Set, change line endings of a text file
        /// </summary>
        /// <remarks>
        /// Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ChangeLineEndingResponse</returns>
        System.Threading.Tasks.Task<ChangeLineEndingResponse> EditTextChangeLineEndingsAsync (string lineEndingType, System.IO.Stream inputFile);

        /// <summary>
        /// Set, change line endings of a text file
        /// </summary>
        /// <remarks>
        /// Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (ChangeLineEndingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangeLineEndingResponse>> EditTextChangeLineEndingsAsyncWithHttpInfo (string lineEndingType, System.IO.Stream inputFile);
        /// <summary>
        /// Detect line endings of a text file
        /// </summary>
        /// <remarks>
        /// Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of DetectLineEndingsResponse</returns>
        System.Threading.Tasks.Task<DetectLineEndingsResponse> EditTextDetectLineEndingsAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Detect line endings of a text file
        /// </summary>
        /// <remarks>
        /// Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (DetectLineEndingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectLineEndingsResponse>> EditTextDetectLineEndingsAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Find a regular expression regex in text input
        /// </summary>
        /// <remarks>
        /// Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of FindStringRegexResponse</returns>
        System.Threading.Tasks.Task<FindStringRegexResponse> EditTextFindRegexAsync (FindStringRegexRequest request);

        /// <summary>
        /// Find a regular expression regex in text input
        /// </summary>
        /// <remarks>
        /// Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (FindStringRegexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindStringRegexResponse>> EditTextFindRegexAsyncWithHttpInfo (FindStringRegexRequest request);
        /// <summary>
        /// Find a string in text input
        /// </summary>
        /// <remarks>
        /// Finds all occurrences of the input string in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of FindStringSimpleResponse</returns>
        System.Threading.Tasks.Task<FindStringSimpleResponse> EditTextFindSimpleAsync (FindStringSimpleRequest request);

        /// <summary>
        /// Find a string in text input
        /// </summary>
        /// <remarks>
        /// Finds all occurrences of the input string in the input content, and returns the matches
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (FindStringSimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindStringSimpleResponse>> EditTextFindSimpleAsyncWithHttpInfo (FindStringSimpleRequest request);
        /// <summary>
        /// Remove whitespace from text string
        /// </summary>
        /// <remarks>
        /// Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of RemoveWhitespaceFromTextResponse</returns>
        System.Threading.Tasks.Task<RemoveWhitespaceFromTextResponse> EditTextRemoveAllWhitespaceAsync (RemoveWhitespaceFromTextRequest request);

        /// <summary>
        /// Remove whitespace from text string
        /// </summary>
        /// <remarks>
        /// Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (RemoveWhitespaceFromTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveWhitespaceFromTextResponse>> EditTextRemoveAllWhitespaceAsyncWithHttpInfo (RemoveWhitespaceFromTextRequest request);
        /// <summary>
        /// Remove HTML from text string
        /// </summary>
        /// <remarks>
        /// Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of RemoveHtmlFromTextResponse</returns>
        System.Threading.Tasks.Task<RemoveHtmlFromTextResponse> EditTextRemoveHtmlAsync (RemoveHtmlFromTextRequest request);

        /// <summary>
        /// Remove HTML from text string
        /// </summary>
        /// <remarks>
        /// Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (RemoveHtmlFromTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveHtmlFromTextResponse>> EditTextRemoveHtmlAsyncWithHttpInfo (RemoveHtmlFromTextRequest request);
        /// <summary>
        /// Replace a string in text with a regex regular expression string
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ReplaceStringRegexResponse</returns>
        System.Threading.Tasks.Task<ReplaceStringRegexResponse> EditTextReplaceRegexAsync (ReplaceStringRegexRequest request);

        /// <summary>
        /// Replace a string in text with a regex regular expression string
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (ReplaceStringRegexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceStringRegexResponse>> EditTextReplaceRegexAsyncWithHttpInfo (ReplaceStringRegexRequest request);
        /// <summary>
        /// Replace a string in text with another string value
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ReplaceStringSimpleResponse</returns>
        System.Threading.Tasks.Task<ReplaceStringSimpleResponse> EditTextReplaceSimpleAsync (ReplaceStringSimpleRequest request);

        /// <summary>
        /// Replace a string in text with another string value
        /// </summary>
        /// <remarks>
        /// Replaces all occurrences of the input string in the input content, and returns the result
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (ReplaceStringSimpleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceStringSimpleResponse>> EditTextReplaceSimpleAsyncWithHttpInfo (ReplaceStringSimpleRequest request);
        /// <summary>
        /// Detect text encoding of file
        /// </summary>
        /// <remarks>
        /// Checks text encoding of file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of TextEncodingDetectResponse</returns>
        System.Threading.Tasks.Task<TextEncodingDetectResponse> EditTextTextEncodingDetectAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Detect text encoding of file
        /// </summary>
        /// <remarks>
        /// Checks text encoding of file
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (TextEncodingDetectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextEncodingDetectResponse>> EditTextTextEncodingDetectAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Trim leading and trailing whitespace from text string
        /// </summary>
        /// <remarks>
        /// Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of RemoveWhitespaceFromTextResponse</returns>
        System.Threading.Tasks.Task<RemoveWhitespaceFromTextResponse> EditTextTrimWhitespaceAsync (RemoveWhitespaceFromTextRequest request);

        /// <summary>
        /// Trim leading and trailing whitespace from text string
        /// </summary>
        /// <remarks>
        /// Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (RemoveWhitespaceFromTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveWhitespaceFromTextResponse>> EditTextTrimWhitespaceAsyncWithHttpInfo (RemoveWhitespaceFromTextRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EditTextApi : IEditTextApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EditTextApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditTextApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditTextApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EditTextApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content Decodes / converts base 64 UTF-8 text string to binary content
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Base64DecodeResponse</returns>
        public Base64DecodeResponse EditTextBase64Decode (Base64DecodeRequest request)
        {
             ApiResponse<Base64DecodeResponse> localVarResponse = EditTextBase64DecodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content Decodes / converts base 64 UTF-8 text string to binary content
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Base64DecodeResponse</returns>
        public ApiResponse< Base64DecodeResponse > EditTextBase64DecodeWithHttpInfo (Base64DecodeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextBase64Decode");

            var localVarPath = "/convert/edit/text/encoding/base64/decode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextBase64Decode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64DecodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64DecodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64DecodeResponse)));
        }

        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content Decodes / converts base 64 UTF-8 text string to binary content
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Base64DecodeResponse</returns>
        public async System.Threading.Tasks.Task<Base64DecodeResponse> EditTextBase64DecodeAsync (Base64DecodeRequest request)
        {
             ApiResponse<Base64DecodeResponse> localVarResponse = await EditTextBase64DecodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Base 64 decode, convert base 64 string to binary content Decodes / converts base 64 UTF-8 text string to binary content
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Base64DecodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64DecodeResponse>> EditTextBase64DecodeAsyncWithHttpInfo (Base64DecodeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextBase64Decode");

            var localVarPath = "/convert/edit/text/encoding/base64/decode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextBase64Decode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64DecodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64DecodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64DecodeResponse)));
        }

        /// <summary>
        /// Detect, check if text string is base 64 encoded Checks, detects if input string is base 64 encoded
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Base64DetectResponse</returns>
        public Base64DetectResponse EditTextBase64Detect (Base64DetectRequest request)
        {
             ApiResponse<Base64DetectResponse> localVarResponse = EditTextBase64DetectWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect, check if text string is base 64 encoded Checks, detects if input string is base 64 encoded
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Base64DetectResponse</returns>
        public ApiResponse< Base64DetectResponse > EditTextBase64DetectWithHttpInfo (Base64DetectRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextBase64Detect");

            var localVarPath = "/convert/edit/text/encoding/base64/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextBase64Detect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64DetectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64DetectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64DetectResponse)));
        }

        /// <summary>
        /// Detect, check if text string is base 64 encoded Checks, detects if input string is base 64 encoded
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Base64DetectResponse</returns>
        public async System.Threading.Tasks.Task<Base64DetectResponse> EditTextBase64DetectAsync (Base64DetectRequest request)
        {
             ApiResponse<Base64DetectResponse> localVarResponse = await EditTextBase64DetectAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect, check if text string is base 64 encoded Checks, detects if input string is base 64 encoded
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Base64DetectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64DetectResponse>> EditTextBase64DetectAsyncWithHttpInfo (Base64DetectRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextBase64Detect");

            var localVarPath = "/convert/edit/text/encoding/base64/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextBase64Detect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64DetectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64DetectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64DetectResponse)));
        }

        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string Encodes / converts binary or file data to a text string
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Base64EncodeResponse</returns>
        public Base64EncodeResponse EditTextBase64Encode (Base64EncodeRequest request)
        {
             ApiResponse<Base64EncodeResponse> localVarResponse = EditTextBase64EncodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string Encodes / converts binary or file data to a text string
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Base64EncodeResponse</returns>
        public ApiResponse< Base64EncodeResponse > EditTextBase64EncodeWithHttpInfo (Base64EncodeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextBase64Encode");

            var localVarPath = "/convert/edit/text/encoding/base64/encode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextBase64Encode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64EncodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64EncodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64EncodeResponse)));
        }

        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string Encodes / converts binary or file data to a text string
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Base64EncodeResponse</returns>
        public async System.Threading.Tasks.Task<Base64EncodeResponse> EditTextBase64EncodeAsync (Base64EncodeRequest request)
        {
             ApiResponse<Base64EncodeResponse> localVarResponse = await EditTextBase64EncodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Base 64 encode, convert binary or file data to a text string Encodes / converts binary or file data to a text string
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Base64EncodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64EncodeResponse>> EditTextBase64EncodeAsyncWithHttpInfo (Base64EncodeRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextBase64Encode");

            var localVarPath = "/convert/edit/text/encoding/base64/encode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextBase64Encode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64EncodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64EncodeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64EncodeResponse)));
        }

        /// <summary>
        /// Set, change line endings of a text file Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ChangeLineEndingResponse</returns>
        public ChangeLineEndingResponse EditTextChangeLineEndings (string lineEndingType, System.IO.Stream inputFile)
        {
             ApiResponse<ChangeLineEndingResponse> localVarResponse = EditTextChangeLineEndingsWithHttpInfo(lineEndingType, inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set, change line endings of a text file Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of ChangeLineEndingResponse</returns>
        public ApiResponse< ChangeLineEndingResponse > EditTextChangeLineEndingsWithHttpInfo (string lineEndingType, System.IO.Stream inputFile)
        {
            // verify the required parameter 'lineEndingType' is set
            if (lineEndingType == null)
                throw new ApiException(400, "Missing required parameter 'lineEndingType' when calling EditTextApi->EditTextChangeLineEndings");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditTextApi->EditTextChangeLineEndings");

            var localVarPath = "/convert/edit/text/line-endings/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineEndingType != null) localVarHeaderParams.Add("lineEndingType", Configuration.ApiClient.ParameterToString(lineEndingType)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextChangeLineEndings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeLineEndingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangeLineEndingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeLineEndingResponse)));
        }

        /// <summary>
        /// Set, change line endings of a text file Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ChangeLineEndingResponse</returns>
        public async System.Threading.Tasks.Task<ChangeLineEndingResponse> EditTextChangeLineEndingsAsync (string lineEndingType, System.IO.Stream inputFile)
        {
             ApiResponse<ChangeLineEndingResponse> localVarResponse = await EditTextChangeLineEndingsAsyncWithHttpInfo(lineEndingType, inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set, change line endings of a text file Sets the line ending type of a text file; set to Windows, Unix or Mac.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lineEndingType">Required; &#39;Windows&#39; will use carriage return and line feed, &#39;Unix&#39; will use newline, and &#39;Mac&#39; will use carriage return</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (ChangeLineEndingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangeLineEndingResponse>> EditTextChangeLineEndingsAsyncWithHttpInfo (string lineEndingType, System.IO.Stream inputFile)
        {
            // verify the required parameter 'lineEndingType' is set
            if (lineEndingType == null)
                throw new ApiException(400, "Missing required parameter 'lineEndingType' when calling EditTextApi->EditTextChangeLineEndings");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditTextApi->EditTextChangeLineEndings");

            var localVarPath = "/convert/edit/text/line-endings/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lineEndingType != null) localVarHeaderParams.Add("lineEndingType", Configuration.ApiClient.ParameterToString(lineEndingType)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextChangeLineEndings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangeLineEndingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChangeLineEndingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangeLineEndingResponse)));
        }

        /// <summary>
        /// Detect line endings of a text file Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>DetectLineEndingsResponse</returns>
        public DetectLineEndingsResponse EditTextDetectLineEndings (System.IO.Stream inputFile)
        {
             ApiResponse<DetectLineEndingsResponse> localVarResponse = EditTextDetectLineEndingsWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect line endings of a text file Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of DetectLineEndingsResponse</returns>
        public ApiResponse< DetectLineEndingsResponse > EditTextDetectLineEndingsWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditTextApi->EditTextDetectLineEndings");

            var localVarPath = "/convert/edit/text/line-endings/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextDetectLineEndings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectLineEndingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectLineEndingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectLineEndingsResponse)));
        }

        /// <summary>
        /// Detect line endings of a text file Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of DetectLineEndingsResponse</returns>
        public async System.Threading.Tasks.Task<DetectLineEndingsResponse> EditTextDetectLineEndingsAsync (System.IO.Stream inputFile)
        {
             ApiResponse<DetectLineEndingsResponse> localVarResponse = await EditTextDetectLineEndingsAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect line endings of a text file Detect line ending type (Windows, Unix or Mac) of an input file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (DetectLineEndingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectLineEndingsResponse>> EditTextDetectLineEndingsAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditTextApi->EditTextDetectLineEndings");

            var localVarPath = "/convert/edit/text/line-endings/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextDetectLineEndings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectLineEndingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectLineEndingsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectLineEndingsResponse)));
        }

        /// <summary>
        /// Find a regular expression regex in text input Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>FindStringRegexResponse</returns>
        public FindStringRegexResponse EditTextFindRegex (FindStringRegexRequest request)
        {
             ApiResponse<FindStringRegexResponse> localVarResponse = EditTextFindRegexWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a regular expression regex in text input Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of FindStringRegexResponse</returns>
        public ApiResponse< FindStringRegexResponse > EditTextFindRegexWithHttpInfo (FindStringRegexRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextFindRegex");

            var localVarPath = "/convert/edit/text/find/regex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextFindRegex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindStringRegexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FindStringRegexResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindStringRegexResponse)));
        }

        /// <summary>
        /// Find a regular expression regex in text input Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of FindStringRegexResponse</returns>
        public async System.Threading.Tasks.Task<FindStringRegexResponse> EditTextFindRegexAsync (FindStringRegexRequest request)
        {
             ApiResponse<FindStringRegexResponse> localVarResponse = await EditTextFindRegexAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a regular expression regex in text input Find all occurrences of the input regular expression in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (FindStringRegexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FindStringRegexResponse>> EditTextFindRegexAsyncWithHttpInfo (FindStringRegexRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextFindRegex");

            var localVarPath = "/convert/edit/text/find/regex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextFindRegex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindStringRegexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FindStringRegexResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindStringRegexResponse)));
        }

        /// <summary>
        /// Find a string in text input Finds all occurrences of the input string in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>FindStringSimpleResponse</returns>
        public FindStringSimpleResponse EditTextFindSimple (FindStringSimpleRequest request)
        {
             ApiResponse<FindStringSimpleResponse> localVarResponse = EditTextFindSimpleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a string in text input Finds all occurrences of the input string in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of FindStringSimpleResponse</returns>
        public ApiResponse< FindStringSimpleResponse > EditTextFindSimpleWithHttpInfo (FindStringSimpleRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextFindSimple");

            var localVarPath = "/convert/edit/text/find/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextFindSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindStringSimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FindStringSimpleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindStringSimpleResponse)));
        }

        /// <summary>
        /// Find a string in text input Finds all occurrences of the input string in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of FindStringSimpleResponse</returns>
        public async System.Threading.Tasks.Task<FindStringSimpleResponse> EditTextFindSimpleAsync (FindStringSimpleRequest request)
        {
             ApiResponse<FindStringSimpleResponse> localVarResponse = await EditTextFindSimpleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a string in text input Finds all occurrences of the input string in the input content, and returns the matches
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (FindStringSimpleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FindStringSimpleResponse>> EditTextFindSimpleAsyncWithHttpInfo (FindStringSimpleRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextFindSimple");

            var localVarPath = "/convert/edit/text/find/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextFindSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindStringSimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FindStringSimpleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindStringSimpleResponse)));
        }

        /// <summary>
        /// Remove whitespace from text string Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>RemoveWhitespaceFromTextResponse</returns>
        public RemoveWhitespaceFromTextResponse EditTextRemoveAllWhitespace (RemoveWhitespaceFromTextRequest request)
        {
             ApiResponse<RemoveWhitespaceFromTextResponse> localVarResponse = EditTextRemoveAllWhitespaceWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove whitespace from text string Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of RemoveWhitespaceFromTextResponse</returns>
        public ApiResponse< RemoveWhitespaceFromTextResponse > EditTextRemoveAllWhitespaceWithHttpInfo (RemoveWhitespaceFromTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextRemoveAllWhitespace");

            var localVarPath = "/convert/edit/text/remove/whitespace/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextRemoveAllWhitespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveWhitespaceFromTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveWhitespaceFromTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveWhitespaceFromTextResponse)));
        }

        /// <summary>
        /// Remove whitespace from text string Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of RemoveWhitespaceFromTextResponse</returns>
        public async System.Threading.Tasks.Task<RemoveWhitespaceFromTextResponse> EditTextRemoveAllWhitespaceAsync (RemoveWhitespaceFromTextRequest request)
        {
             ApiResponse<RemoveWhitespaceFromTextResponse> localVarResponse = await EditTextRemoveAllWhitespaceAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove whitespace from text string Removes all whitespace from text, leaving behind only non-whitespace characters.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (RemoveWhitespaceFromTextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveWhitespaceFromTextResponse>> EditTextRemoveAllWhitespaceAsyncWithHttpInfo (RemoveWhitespaceFromTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextRemoveAllWhitespace");

            var localVarPath = "/convert/edit/text/remove/whitespace/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextRemoveAllWhitespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveWhitespaceFromTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveWhitespaceFromTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveWhitespaceFromTextResponse)));
        }

        /// <summary>
        /// Remove HTML from text string Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>RemoveHtmlFromTextResponse</returns>
        public RemoveHtmlFromTextResponse EditTextRemoveHtml (RemoveHtmlFromTextRequest request)
        {
             ApiResponse<RemoveHtmlFromTextResponse> localVarResponse = EditTextRemoveHtmlWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove HTML from text string Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of RemoveHtmlFromTextResponse</returns>
        public ApiResponse< RemoveHtmlFromTextResponse > EditTextRemoveHtmlWithHttpInfo (RemoveHtmlFromTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextRemoveHtml");

            var localVarPath = "/convert/edit/text/remove/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextRemoveHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveHtmlFromTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveHtmlFromTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveHtmlFromTextResponse)));
        }

        /// <summary>
        /// Remove HTML from text string Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of RemoveHtmlFromTextResponse</returns>
        public async System.Threading.Tasks.Task<RemoveHtmlFromTextResponse> EditTextRemoveHtmlAsync (RemoveHtmlFromTextRequest request)
        {
             ApiResponse<RemoveHtmlFromTextResponse> localVarResponse = await EditTextRemoveHtmlAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove HTML from text string Removes HTML from text, leaving behind only text.  Formatted text will become plain text.  Important for protecting against HTML and Cross-Site-Scripting attacks.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (RemoveHtmlFromTextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveHtmlFromTextResponse>> EditTextRemoveHtmlAsyncWithHttpInfo (RemoveHtmlFromTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextRemoveHtml");

            var localVarPath = "/convert/edit/text/remove/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextRemoveHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveHtmlFromTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveHtmlFromTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveHtmlFromTextResponse)));
        }

        /// <summary>
        /// Replace a string in text with a regex regular expression string Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ReplaceStringRegexResponse</returns>
        public ReplaceStringRegexResponse EditTextReplaceRegex (ReplaceStringRegexRequest request)
        {
             ApiResponse<ReplaceStringRegexResponse> localVarResponse = EditTextReplaceRegexWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a string in text with a regex regular expression string Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of ReplaceStringRegexResponse</returns>
        public ApiResponse< ReplaceStringRegexResponse > EditTextReplaceRegexWithHttpInfo (ReplaceStringRegexRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextReplaceRegex");

            var localVarPath = "/convert/edit/text/replace/regex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextReplaceRegex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceStringRegexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplaceStringRegexResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceStringRegexResponse)));
        }

        /// <summary>
        /// Replace a string in text with a regex regular expression string Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ReplaceStringRegexResponse</returns>
        public async System.Threading.Tasks.Task<ReplaceStringRegexResponse> EditTextReplaceRegexAsync (ReplaceStringRegexRequest request)
        {
             ApiResponse<ReplaceStringRegexResponse> localVarResponse = await EditTextReplaceRegexAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace a string in text with a regex regular expression string Replaces all occurrences of the input regular expression regex string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (ReplaceStringRegexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplaceStringRegexResponse>> EditTextReplaceRegexAsyncWithHttpInfo (ReplaceStringRegexRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextReplaceRegex");

            var localVarPath = "/convert/edit/text/replace/regex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextReplaceRegex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceStringRegexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplaceStringRegexResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceStringRegexResponse)));
        }

        /// <summary>
        /// Replace a string in text with another string value Replaces all occurrences of the input string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ReplaceStringSimpleResponse</returns>
        public ReplaceStringSimpleResponse EditTextReplaceSimple (ReplaceStringSimpleRequest request)
        {
             ApiResponse<ReplaceStringSimpleResponse> localVarResponse = EditTextReplaceSimpleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a string in text with another string value Replaces all occurrences of the input string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of ReplaceStringSimpleResponse</returns>
        public ApiResponse< ReplaceStringSimpleResponse > EditTextReplaceSimpleWithHttpInfo (ReplaceStringSimpleRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextReplaceSimple");

            var localVarPath = "/convert/edit/text/replace/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextReplaceSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceStringSimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplaceStringSimpleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceStringSimpleResponse)));
        }

        /// <summary>
        /// Replace a string in text with another string value Replaces all occurrences of the input string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ReplaceStringSimpleResponse</returns>
        public async System.Threading.Tasks.Task<ReplaceStringSimpleResponse> EditTextReplaceSimpleAsync (ReplaceStringSimpleRequest request)
        {
             ApiResponse<ReplaceStringSimpleResponse> localVarResponse = await EditTextReplaceSimpleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace a string in text with another string value Replaces all occurrences of the input string in the input content, and returns the result
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (ReplaceStringSimpleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplaceStringSimpleResponse>> EditTextReplaceSimpleAsyncWithHttpInfo (ReplaceStringSimpleRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextReplaceSimple");

            var localVarPath = "/convert/edit/text/replace/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextReplaceSimple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplaceStringSimpleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplaceStringSimpleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplaceStringSimpleResponse)));
        }

        /// <summary>
        /// Detect text encoding of file Checks text encoding of file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>TextEncodingDetectResponse</returns>
        public TextEncodingDetectResponse EditTextTextEncodingDetect (System.IO.Stream inputFile)
        {
             ApiResponse<TextEncodingDetectResponse> localVarResponse = EditTextTextEncodingDetectWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect text encoding of file Checks text encoding of file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of TextEncodingDetectResponse</returns>
        public ApiResponse< TextEncodingDetectResponse > EditTextTextEncodingDetectWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditTextApi->EditTextTextEncodingDetect");

            var localVarPath = "/convert/edit/text/encoding/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextTextEncodingDetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextEncodingDetectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextEncodingDetectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextEncodingDetectResponse)));
        }

        /// <summary>
        /// Detect text encoding of file Checks text encoding of file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of TextEncodingDetectResponse</returns>
        public async System.Threading.Tasks.Task<TextEncodingDetectResponse> EditTextTextEncodingDetectAsync (System.IO.Stream inputFile)
        {
             ApiResponse<TextEncodingDetectResponse> localVarResponse = await EditTextTextEncodingDetectAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect text encoding of file Checks text encoding of file
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (TextEncodingDetectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextEncodingDetectResponse>> EditTextTextEncodingDetectAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditTextApi->EditTextTextEncodingDetect");

            var localVarPath = "/convert/edit/text/encoding/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextTextEncodingDetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TextEncodingDetectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TextEncodingDetectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TextEncodingDetectResponse)));
        }

        /// <summary>
        /// Trim leading and trailing whitespace from text string Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>RemoveWhitespaceFromTextResponse</returns>
        public RemoveWhitespaceFromTextResponse EditTextTrimWhitespace (RemoveWhitespaceFromTextRequest request)
        {
             ApiResponse<RemoveWhitespaceFromTextResponse> localVarResponse = EditTextTrimWhitespaceWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trim leading and trailing whitespace from text string Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of RemoveWhitespaceFromTextResponse</returns>
        public ApiResponse< RemoveWhitespaceFromTextResponse > EditTextTrimWhitespaceWithHttpInfo (RemoveWhitespaceFromTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextTrimWhitespace");

            var localVarPath = "/convert/edit/text/remove/whitespace/trim";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextTrimWhitespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveWhitespaceFromTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveWhitespaceFromTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveWhitespaceFromTextResponse)));
        }

        /// <summary>
        /// Trim leading and trailing whitespace from text string Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of RemoveWhitespaceFromTextResponse</returns>
        public async System.Threading.Tasks.Task<RemoveWhitespaceFromTextResponse> EditTextTrimWhitespaceAsync (RemoveWhitespaceFromTextRequest request)
        {
             ApiResponse<RemoveWhitespaceFromTextResponse> localVarResponse = await EditTextTrimWhitespaceAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trim leading and trailing whitespace from text string Trim leading and trailing whitespace from text, leaving behind a trimmed string.  Whitespace includes newlines, spaces and other whitespace characters.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (RemoveWhitespaceFromTextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveWhitespaceFromTextResponse>> EditTextTrimWhitespaceAsyncWithHttpInfo (RemoveWhitespaceFromTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditTextApi->EditTextTrimWhitespace");

            var localVarPath = "/convert/edit/text/remove/whitespace/trim";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTextTrimWhitespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveWhitespaceFromTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveWhitespaceFromTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveWhitespaceFromTextResponse)));
        }

    }
}
