/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEditPdfApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove / delete pages from a PDF document
        /// </summary>
        /// <remarks>
        /// Remove one or more pages from a PDF document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>byte[]</returns>
        byte[] EditPdfDeletePages (System.IO.Stream inputFile, int? pageStart, int? pageEnd);

        /// <summary>
        /// Remove / delete pages from a PDF document
        /// </summary>
        /// <remarks>
        /// Remove one or more pages from a PDF document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfDeletePagesWithHttpInfo (System.IO.Stream inputFile, int? pageStart, int? pageEnd);
        /// <summary>
        /// Encrypt and password-protect a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditPdfEncrypt (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null);

        /// <summary>
        /// Encrypt and password-protect a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfEncryptWithHttpInfo (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null);
        /// <summary>
        /// Gets PDF Form fields and values
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>PdfFormFields</returns>
        PdfFormFields EditPdfGetFormFields (System.IO.Stream inputFile);

        /// <summary>
        /// Gets PDF Form fields and values
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of PdfFormFields</returns>
        ApiResponse<PdfFormFields> EditPdfGetFormFieldsWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Get PDF document metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata from the PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>PdfMetadata</returns>
        PdfMetadata EditPdfGetMetadata (System.IO.Stream inputFile);

        /// <summary>
        /// Get PDF document metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata from the PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of PdfMetadata</returns>
        ApiResponse<PdfMetadata> EditPdfGetMetadataWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Insert / copy pages from one PDF document into another
        /// </summary>
        /// <remarks>
        /// Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>byte[]</returns>
        byte[] EditPdfInsertPages (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation);

        /// <summary>
        /// Insert / copy pages from one PDF document into another
        /// </summary>
        /// <remarks>
        /// Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfInsertPagesWithHttpInfo (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation);
        /// <summary>
        /// Rasterize a PDF to an image-based PDF
        /// </summary>
        /// <remarks>
        /// Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        byte[] EditPdfRasterize (System.IO.Stream inputFile);

        /// <summary>
        /// Rasterize a PDF to an image-based PDF
        /// </summary>
        /// <remarks>
        /// Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfRasterizeWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Sets ands fills PDF Form field values
        /// </summary>
        /// <remarks>
        /// Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>byte[]</returns>
        byte[] EditPdfSetFormFields (SetPdfFormFieldsRequest fieldValues);

        /// <summary>
        /// Sets ands fills PDF Form field values
        /// </summary>
        /// <remarks>
        /// Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfSetFormFieldsWithHttpInfo (SetPdfFormFieldsRequest fieldValues);
        /// <summary>
        /// Sets PDF document metadata
        /// </summary>
        /// <remarks>
        /// Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        byte[] EditPdfSetMetadata (SetPdfMetadataRequest request);

        /// <summary>
        /// Sets PDF document metadata
        /// </summary>
        /// <remarks>
        /// Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfSetMetadataWithHttpInfo (SetPdfMetadataRequest request);
        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditPdfSetPermissions (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null);

        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfSetPermissionsWithHttpInfo (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null);
        /// <summary>
        /// Add a text watermark to a PDF
        /// </summary>
        /// <remarks>
        /// Adds a text watermark to a PDF
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditPdfWatermarkText (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null);

        /// <summary>
        /// Add a text watermark to a PDF
        /// </summary>
        /// <remarks>
        /// Adds a text watermark to a PDF
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditPdfWatermarkTextWithHttpInfo (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove / delete pages from a PDF document
        /// </summary>
        /// <remarks>
        /// Remove one or more pages from a PDF document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfDeletePagesAsync (System.IO.Stream inputFile, int? pageStart, int? pageEnd);

        /// <summary>
        /// Remove / delete pages from a PDF document
        /// </summary>
        /// <remarks>
        /// Remove one or more pages from a PDF document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfDeletePagesAsyncWithHttpInfo (System.IO.Stream inputFile, int? pageStart, int? pageEnd);
        /// <summary>
        /// Encrypt and password-protect a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfEncryptAsync (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null);

        /// <summary>
        /// Encrypt and password-protect a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfEncryptAsyncWithHttpInfo (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null);
        /// <summary>
        /// Gets PDF Form fields and values
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of PdfFormFields</returns>
        System.Threading.Tasks.Task<PdfFormFields> EditPdfGetFormFieldsAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Gets PDF Form fields and values
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (PdfFormFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<PdfFormFields>> EditPdfGetFormFieldsAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Get PDF document metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata from the PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of PdfMetadata</returns>
        System.Threading.Tasks.Task<PdfMetadata> EditPdfGetMetadataAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Get PDF document metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata from the PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (PdfMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<PdfMetadata>> EditPdfGetMetadataAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Insert / copy pages from one PDF document into another
        /// </summary>
        /// <remarks>
        /// Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfInsertPagesAsync (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation);

        /// <summary>
        /// Insert / copy pages from one PDF document into another
        /// </summary>
        /// <remarks>
        /// Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfInsertPagesAsyncWithHttpInfo (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation);
        /// <summary>
        /// Rasterize a PDF to an image-based PDF
        /// </summary>
        /// <remarks>
        /// Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfRasterizeAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Rasterize a PDF to an image-based PDF
        /// </summary>
        /// <remarks>
        /// Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfRasterizeAsyncWithHttpInfo (System.IO.Stream inputFile);
        /// <summary>
        /// Sets ands fills PDF Form field values
        /// </summary>
        /// <remarks>
        /// Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfSetFormFieldsAsync (SetPdfFormFieldsRequest fieldValues);

        /// <summary>
        /// Sets ands fills PDF Form field values
        /// </summary>
        /// <remarks>
        /// Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfSetFormFieldsAsyncWithHttpInfo (SetPdfFormFieldsRequest fieldValues);
        /// <summary>
        /// Sets PDF document metadata
        /// </summary>
        /// <remarks>
        /// Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfSetMetadataAsync (SetPdfMetadataRequest request);

        /// <summary>
        /// Sets PDF document metadata
        /// </summary>
        /// <remarks>
        /// Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfSetMetadataAsyncWithHttpInfo (SetPdfMetadataRequest request);
        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfSetPermissionsAsync (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null);

        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF
        /// </summary>
        /// <remarks>
        /// Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfSetPermissionsAsyncWithHttpInfo (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null);
        /// <summary>
        /// Add a text watermark to a PDF
        /// </summary>
        /// <remarks>
        /// Adds a text watermark to a PDF
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditPdfWatermarkTextAsync (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null);

        /// <summary>
        /// Add a text watermark to a PDF
        /// </summary>
        /// <remarks>
        /// Adds a text watermark to a PDF
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfWatermarkTextAsyncWithHttpInfo (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EditPdfApi : IEditPdfApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EditPdfApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditPdfApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditPdfApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EditPdfApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove / delete pages from a PDF document Remove one or more pages from a PDF document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfDeletePages (System.IO.Stream inputFile, int? pageStart, int? pageEnd)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfDeletePagesWithHttpInfo(inputFile, pageStart, pageEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove / delete pages from a PDF document Remove one or more pages from a PDF document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfDeletePagesWithHttpInfo (System.IO.Stream inputFile, int? pageStart, int? pageEnd)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfDeletePages");
            // verify the required parameter 'pageStart' is set
            if (pageStart == null)
                throw new ApiException(400, "Missing required parameter 'pageStart' when calling EditPdfApi->EditPdfDeletePages");
            // verify the required parameter 'pageEnd' is set
            if (pageEnd == null)
                throw new ApiException(400, "Missing required parameter 'pageEnd' when calling EditPdfApi->EditPdfDeletePages");

            var localVarPath = "/convert/edit/pdf/pages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageStart != null) localVarHeaderParams.Add("pageStart", Configuration.ApiClient.ParameterToString(pageStart)); // header parameter
            if (pageEnd != null) localVarHeaderParams.Add("pageEnd", Configuration.ApiClient.ParameterToString(pageEnd)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfDeletePages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Remove / delete pages from a PDF document Remove one or more pages from a PDF document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfDeletePagesAsync (System.IO.Stream inputFile, int? pageStart, int? pageEnd)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfDeletePagesAsyncWithHttpInfo(inputFile, pageStart, pageEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove / delete pages from a PDF document Remove one or more pages from a PDF document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="pageStart">Page number (1 based) to start deleting pages from (inclusive).</param>
        /// <param name="pageEnd">Page number (1 based) to stop deleting pages from (inclusive).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfDeletePagesAsyncWithHttpInfo (System.IO.Stream inputFile, int? pageStart, int? pageEnd)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfDeletePages");
            // verify the required parameter 'pageStart' is set
            if (pageStart == null)
                throw new ApiException(400, "Missing required parameter 'pageStart' when calling EditPdfApi->EditPdfDeletePages");
            // verify the required parameter 'pageEnd' is set
            if (pageEnd == null)
                throw new ApiException(400, "Missing required parameter 'pageEnd' when calling EditPdfApi->EditPdfDeletePages");

            var localVarPath = "/convert/edit/pdf/pages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageStart != null) localVarHeaderParams.Add("pageStart", Configuration.ApiClient.ParameterToString(pageStart)); // header parameter
            if (pageEnd != null) localVarHeaderParams.Add("pageEnd", Configuration.ApiClient.ParameterToString(pageEnd)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfDeletePages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Encrypt and password-protect a PDF Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfEncrypt (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfEncryptWithHttpInfo(inputFile, userPassword, ownerPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt and password-protect a PDF Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfEncryptWithHttpInfo (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfEncrypt");

            var localVarPath = "/convert/edit/pdf/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userPassword != null) localVarHeaderParams.Add("userPassword", Configuration.ApiClient.ParameterToString(userPassword)); // header parameter
            if (ownerPassword != null) localVarHeaderParams.Add("ownerPassword", Configuration.ApiClient.ParameterToString(ownerPassword)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Encrypt and password-protect a PDF Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfEncryptAsync (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfEncryptAsyncWithHttpInfo(inputFile, userPassword, ownerPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encrypt and password-protect a PDF Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional)</param>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfEncryptAsyncWithHttpInfo (System.IO.Stream inputFile, string userPassword = null, string ownerPassword = null)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfEncrypt");

            var localVarPath = "/convert/edit/pdf/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userPassword != null) localVarHeaderParams.Add("userPassword", Configuration.ApiClient.ParameterToString(userPassword)); // header parameter
            if (ownerPassword != null) localVarHeaderParams.Add("ownerPassword", Configuration.ApiClient.ParameterToString(ownerPassword)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Gets PDF Form fields and values Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>PdfFormFields</returns>
        public PdfFormFields EditPdfGetFormFields (System.IO.Stream inputFile)
        {
             ApiResponse<PdfFormFields> localVarResponse = EditPdfGetFormFieldsWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets PDF Form fields and values Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of PdfFormFields</returns>
        public ApiResponse< PdfFormFields > EditPdfGetFormFieldsWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfGetFormFields");

            var localVarPath = "/convert/edit/pdf/form/get-fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfGetFormFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfFormFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfFormFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfFormFields)));
        }

        /// <summary>
        /// Gets PDF Form fields and values Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of PdfFormFields</returns>
        public async System.Threading.Tasks.Task<PdfFormFields> EditPdfGetFormFieldsAsync (System.IO.Stream inputFile)
        {
             ApiResponse<PdfFormFields> localVarResponse = await EditPdfGetFormFieldsAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets PDF Form fields and values Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (PdfFormFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PdfFormFields>> EditPdfGetFormFieldsAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfGetFormFields");

            var localVarPath = "/convert/edit/pdf/form/get-fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfGetFormFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfFormFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfFormFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfFormFields)));
        }

        /// <summary>
        /// Get PDF document metadata Returns the metadata from the PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>PdfMetadata</returns>
        public PdfMetadata EditPdfGetMetadata (System.IO.Stream inputFile)
        {
             ApiResponse<PdfMetadata> localVarResponse = EditPdfGetMetadataWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF document metadata Returns the metadata from the PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of PdfMetadata</returns>
        public ApiResponse< PdfMetadata > EditPdfGetMetadataWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfGetMetadata");

            var localVarPath = "/convert/edit/pdf/get-metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfGetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfMetadata)));
        }

        /// <summary>
        /// Get PDF document metadata Returns the metadata from the PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of PdfMetadata</returns>
        public async System.Threading.Tasks.Task<PdfMetadata> EditPdfGetMetadataAsync (System.IO.Stream inputFile)
        {
             ApiResponse<PdfMetadata> localVarResponse = await EditPdfGetMetadataAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PDF document metadata Returns the metadata from the PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (PdfMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PdfMetadata>> EditPdfGetMetadataAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfGetMetadata");

            var localVarPath = "/convert/edit/pdf/get-metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfGetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfMetadata) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfMetadata)));
        }

        /// <summary>
        /// Insert / copy pages from one PDF document into another Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfInsertPages (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfInsertPagesWithHttpInfo(sourceFile, destinationFile, pageStartSource, pageEndSource, pageInsertBeforeDesitnation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert / copy pages from one PDF document into another Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfInsertPagesWithHttpInfo (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation)
        {
            // verify the required parameter 'sourceFile' is set
            if (sourceFile == null)
                throw new ApiException(400, "Missing required parameter 'sourceFile' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'destinationFile' is set
            if (destinationFile == null)
                throw new ApiException(400, "Missing required parameter 'destinationFile' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'pageStartSource' is set
            if (pageStartSource == null)
                throw new ApiException(400, "Missing required parameter 'pageStartSource' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'pageEndSource' is set
            if (pageEndSource == null)
                throw new ApiException(400, "Missing required parameter 'pageEndSource' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'pageInsertBeforeDesitnation' is set
            if (pageInsertBeforeDesitnation == null)
                throw new ApiException(400, "Missing required parameter 'pageInsertBeforeDesitnation' when calling EditPdfApi->EditPdfInsertPages");

            var localVarPath = "/convert/edit/pdf/pages/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageStartSource != null) localVarHeaderParams.Add("pageStartSource", Configuration.ApiClient.ParameterToString(pageStartSource)); // header parameter
            if (pageEndSource != null) localVarHeaderParams.Add("pageEndSource", Configuration.ApiClient.ParameterToString(pageEndSource)); // header parameter
            if (pageInsertBeforeDesitnation != null) localVarHeaderParams.Add("pageInsertBeforeDesitnation", Configuration.ApiClient.ParameterToString(pageInsertBeforeDesitnation)); // header parameter
            if (sourceFile != null) localVarFileParams.Add("sourceFile", Configuration.ApiClient.ParameterToFile("sourceFile", sourceFile));
            if (destinationFile != null) localVarFileParams.Add("destinationFile", Configuration.ApiClient.ParameterToFile("destinationFile", destinationFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfInsertPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Insert / copy pages from one PDF document into another Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfInsertPagesAsync (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfInsertPagesAsyncWithHttpInfo(sourceFile, destinationFile, pageStartSource, pageEndSource, pageInsertBeforeDesitnation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert / copy pages from one PDF document into another Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceFile">Source PDF file to copy pages from.</param>
        /// <param name="destinationFile">Destination PDF file to copy pages into.</param>
        /// <param name="pageStartSource">Page number (1 based) to start copying pages from (inclusive) in the Source file.</param>
        /// <param name="pageEndSource">Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.</param>
        /// <param name="pageInsertBeforeDesitnation">Page number (1 based) to insert the pages before in the Destination file.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfInsertPagesAsyncWithHttpInfo (System.IO.Stream sourceFile, System.IO.Stream destinationFile, int? pageStartSource, int? pageEndSource, int? pageInsertBeforeDesitnation)
        {
            // verify the required parameter 'sourceFile' is set
            if (sourceFile == null)
                throw new ApiException(400, "Missing required parameter 'sourceFile' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'destinationFile' is set
            if (destinationFile == null)
                throw new ApiException(400, "Missing required parameter 'destinationFile' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'pageStartSource' is set
            if (pageStartSource == null)
                throw new ApiException(400, "Missing required parameter 'pageStartSource' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'pageEndSource' is set
            if (pageEndSource == null)
                throw new ApiException(400, "Missing required parameter 'pageEndSource' when calling EditPdfApi->EditPdfInsertPages");
            // verify the required parameter 'pageInsertBeforeDesitnation' is set
            if (pageInsertBeforeDesitnation == null)
                throw new ApiException(400, "Missing required parameter 'pageInsertBeforeDesitnation' when calling EditPdfApi->EditPdfInsertPages");

            var localVarPath = "/convert/edit/pdf/pages/insert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageStartSource != null) localVarHeaderParams.Add("pageStartSource", Configuration.ApiClient.ParameterToString(pageStartSource)); // header parameter
            if (pageEndSource != null) localVarHeaderParams.Add("pageEndSource", Configuration.ApiClient.ParameterToString(pageEndSource)); // header parameter
            if (pageInsertBeforeDesitnation != null) localVarHeaderParams.Add("pageInsertBeforeDesitnation", Configuration.ApiClient.ParameterToString(pageInsertBeforeDesitnation)); // header parameter
            if (sourceFile != null) localVarFileParams.Add("sourceFile", Configuration.ApiClient.ParameterToFile("sourceFile", sourceFile));
            if (destinationFile != null) localVarFileParams.Add("destinationFile", Configuration.ApiClient.ParameterToFile("destinationFile", destinationFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfInsertPages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Rasterize a PDF to an image-based PDF Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfRasterize (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfRasterizeWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rasterize a PDF to an image-based PDF Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfRasterizeWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfRasterize");

            var localVarPath = "/convert/edit/pdf/rasterize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfRasterize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Rasterize a PDF to an image-based PDF Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfRasterizeAsync (System.IO.Stream inputFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfRasterizeAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rasterize a PDF to an image-based PDF Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfRasterizeAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfRasterize");

            var localVarPath = "/convert/edit/pdf/rasterize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfRasterize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets ands fills PDF Form field values Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfSetFormFields (SetPdfFormFieldsRequest fieldValues)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfSetFormFieldsWithHttpInfo(fieldValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets ands fills PDF Form field values Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfSetFormFieldsWithHttpInfo (SetPdfFormFieldsRequest fieldValues)
        {
            // verify the required parameter 'fieldValues' is set
            if (fieldValues == null)
                throw new ApiException(400, "Missing required parameter 'fieldValues' when calling EditPdfApi->EditPdfSetFormFields");

            var localVarPath = "/convert/edit/pdf/form/set-fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldValues != null && fieldValues.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldValues); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldValues; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfSetFormFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets ands fills PDF Form field values Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfSetFormFieldsAsync (SetPdfFormFieldsRequest fieldValues)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfSetFormFieldsAsyncWithHttpInfo(fieldValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets ands fills PDF Form field values Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldValues"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfSetFormFieldsAsyncWithHttpInfo (SetPdfFormFieldsRequest fieldValues)
        {
            // verify the required parameter 'fieldValues' is set
            if (fieldValues == null)
                throw new ApiException(400, "Missing required parameter 'fieldValues' when calling EditPdfApi->EditPdfSetFormFields");

            var localVarPath = "/convert/edit/pdf/form/set-fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldValues != null && fieldValues.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fieldValues); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fieldValues; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfSetFormFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets PDF document metadata Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfSetMetadata (SetPdfMetadataRequest request)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfSetMetadataWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets PDF document metadata Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfSetMetadataWithHttpInfo (SetPdfMetadataRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditPdfApi->EditPdfSetMetadata");

            var localVarPath = "/convert/edit/pdf/set-metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfSetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets PDF document metadata Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfSetMetadataAsync (SetPdfMetadataRequest request)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfSetMetadataAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets PDF document metadata Sets (writes) metadata into the input PDF document, including Title, Author, etc.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfSetMetadataAsyncWithHttpInfo (SetPdfMetadataRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditPdfApi->EditPdfSetMetadata");

            var localVarPath = "/convert/edit/pdf/set-metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfSetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfSetPermissions (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfSetPermissionsWithHttpInfo(ownerPassword, inputFile, userPassword, allowPrinting, allowDocumentAssembly, allowContentExtraction, allowFormFilling, allowEditing, allowAnnotations, allowDegradedPrinting);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfSetPermissionsWithHttpInfo (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null)
        {
            // verify the required parameter 'ownerPassword' is set
            if (ownerPassword == null)
                throw new ApiException(400, "Missing required parameter 'ownerPassword' when calling EditPdfApi->EditPdfSetPermissions");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfSetPermissions");

            var localVarPath = "/convert/edit/pdf/encrypt/set-permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerPassword != null) localVarHeaderParams.Add("ownerPassword", Configuration.ApiClient.ParameterToString(ownerPassword)); // header parameter
            if (userPassword != null) localVarHeaderParams.Add("userPassword", Configuration.ApiClient.ParameterToString(userPassword)); // header parameter
            if (allowPrinting != null) localVarHeaderParams.Add("allowPrinting", Configuration.ApiClient.ParameterToString(allowPrinting)); // header parameter
            if (allowDocumentAssembly != null) localVarHeaderParams.Add("allowDocumentAssembly", Configuration.ApiClient.ParameterToString(allowDocumentAssembly)); // header parameter
            if (allowContentExtraction != null) localVarHeaderParams.Add("allowContentExtraction", Configuration.ApiClient.ParameterToString(allowContentExtraction)); // header parameter
            if (allowFormFilling != null) localVarHeaderParams.Add("allowFormFilling", Configuration.ApiClient.ParameterToString(allowFormFilling)); // header parameter
            if (allowEditing != null) localVarHeaderParams.Add("allowEditing", Configuration.ApiClient.ParameterToString(allowEditing)); // header parameter
            if (allowAnnotations != null) localVarHeaderParams.Add("allowAnnotations", Configuration.ApiClient.ParameterToString(allowAnnotations)); // header parameter
            if (allowDegradedPrinting != null) localVarHeaderParams.Add("allowDegradedPrinting", Configuration.ApiClient.ParameterToString(allowDegradedPrinting)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfSetPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfSetPermissionsAsync (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfSetPermissionsAsyncWithHttpInfo(ownerPassword, inputFile, userPassword, allowPrinting, allowDocumentAssembly, allowContentExtraction, allowFormFilling, allowEditing, allowAnnotations, allowDegradedPrinting);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encrypt, password-protect and set restricted permissions on a PDF Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerPassword">Password of a owner (creator/editor) of the PDF file (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="userPassword">Password of a user (reader) of the PDF file (optional) (optional)</param>
        /// <param name="allowPrinting">Set to false to disable printing through DRM.  Default is true. (optional)</param>
        /// <param name="allowDocumentAssembly">Set to false to disable document assembly through DRM.  Default is true. (optional)</param>
        /// <param name="allowContentExtraction">Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowFormFilling">Set to false to disable filling out form fields in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowEditing">Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true. (optional)</param>
        /// <param name="allowAnnotations">Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true. (optional)</param>
        /// <param name="allowDegradedPrinting">Set to false to disable degraded printing of the PDF through DRM.  Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfSetPermissionsAsyncWithHttpInfo (string ownerPassword, System.IO.Stream inputFile, string userPassword = null, bool? allowPrinting = null, bool? allowDocumentAssembly = null, bool? allowContentExtraction = null, bool? allowFormFilling = null, bool? allowEditing = null, bool? allowAnnotations = null, bool? allowDegradedPrinting = null)
        {
            // verify the required parameter 'ownerPassword' is set
            if (ownerPassword == null)
                throw new ApiException(400, "Missing required parameter 'ownerPassword' when calling EditPdfApi->EditPdfSetPermissions");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfSetPermissions");

            var localVarPath = "/convert/edit/pdf/encrypt/set-permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerPassword != null) localVarHeaderParams.Add("ownerPassword", Configuration.ApiClient.ParameterToString(ownerPassword)); // header parameter
            if (userPassword != null) localVarHeaderParams.Add("userPassword", Configuration.ApiClient.ParameterToString(userPassword)); // header parameter
            if (allowPrinting != null) localVarHeaderParams.Add("allowPrinting", Configuration.ApiClient.ParameterToString(allowPrinting)); // header parameter
            if (allowDocumentAssembly != null) localVarHeaderParams.Add("allowDocumentAssembly", Configuration.ApiClient.ParameterToString(allowDocumentAssembly)); // header parameter
            if (allowContentExtraction != null) localVarHeaderParams.Add("allowContentExtraction", Configuration.ApiClient.ParameterToString(allowContentExtraction)); // header parameter
            if (allowFormFilling != null) localVarHeaderParams.Add("allowFormFilling", Configuration.ApiClient.ParameterToString(allowFormFilling)); // header parameter
            if (allowEditing != null) localVarHeaderParams.Add("allowEditing", Configuration.ApiClient.ParameterToString(allowEditing)); // header parameter
            if (allowAnnotations != null) localVarHeaderParams.Add("allowAnnotations", Configuration.ApiClient.ParameterToString(allowAnnotations)); // header parameter
            if (allowDegradedPrinting != null) localVarHeaderParams.Add("allowDegradedPrinting", Configuration.ApiClient.ParameterToString(allowDegradedPrinting)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfSetPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Add a text watermark to a PDF Adds a text watermark to a PDF
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditPdfWatermarkText (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null)
        {
             ApiResponse<byte[]> localVarResponse = EditPdfWatermarkTextWithHttpInfo(watermarkText, inputFile, fontName, fontSize, fontColor, fontTransparency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a text watermark to a PDF Adds a text watermark to a PDF
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditPdfWatermarkTextWithHttpInfo (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null)
        {
            // verify the required parameter 'watermarkText' is set
            if (watermarkText == null)
                throw new ApiException(400, "Missing required parameter 'watermarkText' when calling EditPdfApi->EditPdfWatermarkText");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfWatermarkText");

            var localVarPath = "/convert/edit/pdf/watermark/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (watermarkText != null) localVarHeaderParams.Add("watermarkText", Configuration.ApiClient.ParameterToString(watermarkText)); // header parameter
            if (fontName != null) localVarHeaderParams.Add("fontName", Configuration.ApiClient.ParameterToString(fontName)); // header parameter
            if (fontSize != null) localVarHeaderParams.Add("fontSize", Configuration.ApiClient.ParameterToString(fontSize)); // header parameter
            if (fontColor != null) localVarHeaderParams.Add("fontColor", Configuration.ApiClient.ParameterToString(fontColor)); // header parameter
            if (fontTransparency != null) localVarHeaderParams.Add("fontTransparency", Configuration.ApiClient.ParameterToString(fontTransparency)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfWatermarkText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Add a text watermark to a PDF Adds a text watermark to a PDF
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditPdfWatermarkTextAsync (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditPdfWatermarkTextAsyncWithHttpInfo(watermarkText, inputFile, fontName, fontSize, fontColor, fontTransparency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a text watermark to a PDF Adds a text watermark to a PDF
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="watermarkText">Watermark text to add to the PDF (required)</param>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fontName">Font Family Name for the watermark text; default is Times New Roman (optional)</param>
        /// <param name="fontSize">Font Size in points of the text; default is 150 (optional)</param>
        /// <param name="fontColor">Font color in hexadecimal or HTML color name; default is Red (optional)</param>
        /// <param name="fontTransparency">Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5 (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditPdfWatermarkTextAsyncWithHttpInfo (string watermarkText, System.IO.Stream inputFile, string fontName = null, decimal? fontSize = null, string fontColor = null, decimal? fontTransparency = null)
        {
            // verify the required parameter 'watermarkText' is set
            if (watermarkText == null)
                throw new ApiException(400, "Missing required parameter 'watermarkText' when calling EditPdfApi->EditPdfWatermarkText");
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling EditPdfApi->EditPdfWatermarkText");

            var localVarPath = "/convert/edit/pdf/watermark/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (watermarkText != null) localVarHeaderParams.Add("watermarkText", Configuration.ApiClient.ParameterToString(watermarkText)); // header parameter
            if (fontName != null) localVarHeaderParams.Add("fontName", Configuration.ApiClient.ParameterToString(fontName)); // header parameter
            if (fontSize != null) localVarHeaderParams.Add("fontSize", Configuration.ApiClient.ParameterToString(fontSize)); // header parameter
            if (fontColor != null) localVarHeaderParams.Add("fontColor", Configuration.ApiClient.ParameterToString(fontColor)); // header parameter
            if (fontTransparency != null) localVarHeaderParams.Add("fontTransparency", Configuration.ApiClient.ParameterToString(fontTransparency)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPdfWatermarkText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
