/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEditHtmlApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends an HTML tag to the HEAD section of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendHeaderTag (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends an HTML tag to the HEAD section of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendHeaderTagWithHttpInfo (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendHeading (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null);

        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendHeadingWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null);
        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendImageFromUrl (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);

        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendImageFromUrlWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);
        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendImageInline (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendImageInlineWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);
        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendParagraph (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);

        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendParagraphWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);
        /// <summary>
        /// Create a Blank HTML Document
        /// </summary>
        /// <remarks>
        /// Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlCreateBlankDocument (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null);

        /// <summary>
        /// Create a Blank HTML Document
        /// </summary>
        /// <remarks>
        /// Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlCreateBlankDocumentWithHttpInfo (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null);
        /// <summary>
        /// Gets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>HtmlGetLanguageResult</returns>
        HtmlGetLanguageResult EditHtmlHtmlGetLanguage (System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Gets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of HtmlGetLanguageResult</returns>
        ApiResponse<HtmlGetLanguageResult> EditHtmlHtmlGetLanguageWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Extract resolved link URLs from HTML File
        /// </summary>
        /// <remarks>
        /// Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>HtmlGetLinksResponse</returns>
        HtmlGetLinksResponse EditHtmlHtmlGetLinks (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null);

        /// <summary>
        /// Extract resolved link URLs from HTML File
        /// </summary>
        /// <remarks>
        /// Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>ApiResponse of HtmlGetLinksResponse</returns>
        ApiResponse<HtmlGetLinksResponse> EditHtmlHtmlGetLinksWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null);
        /// <summary>
        /// Gets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the rel canonical URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>HtmlGetRelCanonicalUrlResult</returns>
        HtmlGetRelCanonicalUrlResult EditHtmlHtmlGetRelCanonical (System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Gets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the rel canonical URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of HtmlGetRelCanonicalUrlResult</returns>
        ApiResponse<HtmlGetRelCanonicalUrlResult> EditHtmlHtmlGetRelCanonicalWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Gets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the sitemap link URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>HtmlGetSitemapUrlResult</returns>
        HtmlGetSitemapUrlResult EditHtmlHtmlGetSitemap (System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Gets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the sitemap link URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of HtmlGetSitemapUrlResult</returns>
        ApiResponse<HtmlGetSitemapUrlResult> EditHtmlHtmlGetSitemapWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Sets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the language code of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlSetLanguage (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Sets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the language code of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlSetLanguageWithHttpInfo (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Sets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlSetRelCanonical (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Sets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlSetRelCanonicalWithHttpInfo (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Sets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the sitemap URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlSetSitemapUrl (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Sets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the sitemap URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlSetSitemapUrlWithHttpInfo (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends an HTML tag to the HEAD section of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendHeaderTagAsync (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends an HTML tag to the HEAD section of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendHeaderTagAsyncWithHttpInfo (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendHeadingAsync (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null);

        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendHeadingAsyncWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null);
        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageFromUrlAsync (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);

        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageFromUrlAsyncWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);
        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageInlineAsync (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageInlineAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);
        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendParagraphAsync (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);

        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendParagraphAsyncWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);
        /// <summary>
        /// Create a Blank HTML Document
        /// </summary>
        /// <remarks>
        /// Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlCreateBlankDocumentAsync (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null);

        /// <summary>
        /// Create a Blank HTML Document
        /// </summary>
        /// <remarks>
        /// Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlCreateBlankDocumentAsyncWithHttpInfo (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null);
        /// <summary>
        /// Gets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of HtmlGetLanguageResult</returns>
        System.Threading.Tasks.Task<HtmlGetLanguageResult> EditHtmlHtmlGetLanguageAsync (System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Gets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetLanguageResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<HtmlGetLanguageResult>> EditHtmlHtmlGetLanguageAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Extract resolved link URLs from HTML File
        /// </summary>
        /// <remarks>
        /// Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>Task of HtmlGetLinksResponse</returns>
        System.Threading.Tasks.Task<HtmlGetLinksResponse> EditHtmlHtmlGetLinksAsync (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null);

        /// <summary>
        /// Extract resolved link URLs from HTML File
        /// </summary>
        /// <remarks>
        /// Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetLinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HtmlGetLinksResponse>> EditHtmlHtmlGetLinksAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null);
        /// <summary>
        /// Gets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the rel canonical URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of HtmlGetRelCanonicalUrlResult</returns>
        System.Threading.Tasks.Task<HtmlGetRelCanonicalUrlResult> EditHtmlHtmlGetRelCanonicalAsync (System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Gets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the rel canonical URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetRelCanonicalUrlResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<HtmlGetRelCanonicalUrlResult>> EditHtmlHtmlGetRelCanonicalAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Gets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the sitemap link URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of HtmlGetSitemapUrlResult</returns>
        System.Threading.Tasks.Task<HtmlGetSitemapUrlResult> EditHtmlHtmlGetSitemapAsync (System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Gets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Gets the sitemap link URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetSitemapUrlResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<HtmlGetSitemapUrlResult>> EditHtmlHtmlGetSitemapAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Sets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the language code of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlSetLanguageAsync (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Sets the language for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the language code of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlSetLanguageAsyncWithHttpInfo (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Sets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlSetRelCanonicalAsync (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Sets the rel canonical URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlSetRelCanonicalAsyncWithHttpInfo (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);
        /// <summary>
        /// Sets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the sitemap URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlSetSitemapUrlAsync (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Sets the sitemap URL for the HTML document
        /// </summary>
        /// <remarks>
        /// Sets the sitemap URL of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlSetSitemapUrlAsyncWithHttpInfo (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EditHtmlApi : IEditHtmlApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EditHtmlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditHtmlApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditHtmlApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EditHtmlApi(Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document Appends an HTML tag to the HEAD section of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendHeaderTag (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendHeaderTagWithHttpInfo(htmlTag, inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document Appends an HTML tag to the HEAD section of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendHeaderTagWithHttpInfo (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'htmlTag' is set
            if (htmlTag == null)
                throw new ApiException(400, "Missing required parameter 'htmlTag' when calling EditHtmlApi->EditHtmlHtmlAppendHeaderTag");

            var localVarPath = "./convert/edit/html/head/append/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (htmlTag != null) localVarHeaderParams.Add("htmlTag", this.Configuration.ApiClient.ParameterToString(htmlTag)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendHeaderTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document Appends an HTML tag to the HEAD section of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendHeaderTagAsync (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendHeaderTagAsyncWithHttpInfo(htmlTag, inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append an HTML tag to the HEAD section of an HTML Document Appends an HTML tag to the HEAD section of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlTag">The HTML tag to append.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendHeaderTagAsyncWithHttpInfo (string htmlTag, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'htmlTag' is set
            if (htmlTag == null)
                throw new ApiException(400, "Missing required parameter 'htmlTag' when calling EditHtmlApi->EditHtmlHtmlAppendHeaderTag");

            var localVarPath = "./convert/edit/html/head/append/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (htmlTag != null) localVarHeaderParams.Add("htmlTag", this.Configuration.ApiClient.ParameterToString(htmlTag)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendHeaderTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendHeading (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendHeadingWithHttpInfo(headingText, inputFile, inputFileUrl, headingSize, cssStyle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendHeadingWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null)
        {
            // verify the required parameter 'headingText' is set
            if (headingText == null)
                throw new ApiException(400, "Missing required parameter 'headingText' when calling EditHtmlApi->EditHtmlHtmlAppendHeading");

            var localVarPath = "./convert/edit/html/append/heading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (headingText != null) localVarHeaderParams.Add("headingText", this.Configuration.ApiClient.ParameterToString(headingText)); // header parameter
            if (headingSize != null) localVarHeaderParams.Add("headingSize", this.Configuration.ApiClient.ParameterToString(headingSize)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendHeading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendHeadingAsync (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendHeadingAsyncWithHttpInfo(headingText, inputFile, inputFileUrl, headingSize, cssStyle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. Accepts values between 1 and 6. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the heading. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendHeadingAsyncWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null, string cssStyle = null)
        {
            // verify the required parameter 'headingText' is set
            if (headingText == null)
                throw new ApiException(400, "Missing required parameter 'headingText' when calling EditHtmlApi->EditHtmlHtmlAppendHeading");

            var localVarPath = "./convert/edit/html/append/heading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (headingText != null) localVarHeaderParams.Add("headingText", this.Configuration.ApiClient.ParameterToString(headingText)); // header parameter
            if (headingSize != null) localVarHeaderParams.Add("headingSize", this.Configuration.ApiClient.ParameterToString(headingSize)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendHeading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendImageFromUrl (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendImageFromUrlWithHttpInfo(imageUrl, inputFile, inputFileUrl, cssStyle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendImageFromUrlWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
                throw new ApiException(400, "Missing required parameter 'imageUrl' when calling EditHtmlApi->EditHtmlHtmlAppendImageFromUrl");

            var localVarPath = "./convert/edit/html/append/image/from-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageFromUrlAsync (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendImageFromUrlAsyncWithHttpInfo(imageUrl, inputFile, inputFileUrl, cssStyle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageFromUrlAsyncWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
                throw new ApiException(400, "Missing required parameter 'imageUrl' when calling EditHtmlApi->EditHtmlHtmlAppendImageFromUrl");

            var localVarPath = "./convert/edit/html/append/image/from-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendImageInline (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendImageInlineWithHttpInfo(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendImageInlineWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {

            var localVarPath = "./convert/edit/html/append/image/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (imageExtension != null) localVarHeaderParams.Add("imageExtension", this.Configuration.ApiClient.ParameterToString(imageExtension)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageInline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageInlineAsync (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendImageInlineAsyncWithHttpInfo(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading an imageFile directly, instead of using imageUrl. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageInlineAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {

            var localVarPath = "./convert/edit/html/append/image/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (imageExtension != null) localVarHeaderParams.Add("imageExtension", this.Configuration.ApiClient.ParameterToString(imageExtension)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageInline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendParagraph (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendParagraphWithHttpInfo(paragraphText, inputFile, inputFileUrl, cssStyle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendParagraphWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
            // verify the required parameter 'paragraphText' is set
            if (paragraphText == null)
                throw new ApiException(400, "Missing required parameter 'paragraphText' when calling EditHtmlApi->EditHtmlHtmlAppendParagraph");

            var localVarPath = "./convert/edit/html/append/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (paragraphText != null) localVarHeaderParams.Add("paragraphText", this.Configuration.ApiClient.ParameterToString(paragraphText)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendParagraphAsync (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendParagraphAsyncWithHttpInfo(paragraphText, inputFile, inputFileUrl, cssStyle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="cssStyle">Optional: The CSS style for the paragraph. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendParagraphAsyncWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
            // verify the required parameter 'paragraphText' is set
            if (paragraphText == null)
                throw new ApiException(400, "Missing required parameter 'paragraphText' when calling EditHtmlApi->EditHtmlHtmlAppendParagraph");

            var localVarPath = "./convert/edit/html/append/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (paragraphText != null) localVarHeaderParams.Add("paragraphText", this.Configuration.ApiClient.ParameterToString(paragraphText)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Create a Blank HTML Document Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlCreateBlankDocument (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlCreateBlankDocumentWithHttpInfo(title, cssUrl, cssInline, javascriptUrl, javascriptInline);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Blank HTML Document Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlCreateBlankDocumentWithHttpInfo (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null)
        {

            var localVarPath = "./convert/edit/html/create/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarHeaderParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // header parameter
            if (cssUrl != null) localVarHeaderParams.Add("cssUrl", this.Configuration.ApiClient.ParameterToString(cssUrl)); // header parameter
            if (cssInline != null) localVarHeaderParams.Add("cssInline", this.Configuration.ApiClient.ParameterToString(cssInline)); // header parameter
            if (javascriptUrl != null) localVarHeaderParams.Add("javascriptUrl", this.Configuration.ApiClient.ParameterToString(javascriptUrl)); // header parameter
            if (javascriptInline != null) localVarHeaderParams.Add("javascriptInline", this.Configuration.ApiClient.ParameterToString(javascriptInline)); // header parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlCreateBlankDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Create a Blank HTML Document Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlCreateBlankDocumentAsync (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlCreateBlankDocumentAsyncWithHttpInfo(title, cssUrl, cssInline, javascriptUrl, javascriptInline);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Blank HTML Document Returns a blank HTML Document format file.  The file is blank, with no contents by default.  Use the optional input parameters to add various starting elements.  Use additional editing commands such as Append Header, Append Paragraph or Append Image from URL to populate the document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">Optional: The title of the HTML document (optional)</param>
        /// <param name="cssUrl">Optional: A CSS style URL to be added to the document. (optional)</param>
        /// <param name="cssInline">Optional: An inline CSS style to be added to the document. (optional)</param>
        /// <param name="javascriptUrl">Optional: Javascript URL to be added to the document. (optional)</param>
        /// <param name="javascriptInline">Optional: Inline Javascript to be added to the document. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlCreateBlankDocumentAsyncWithHttpInfo (string title = null, string cssUrl = null, string cssInline = null, string javascriptUrl = null, string javascriptInline = null)
        {

            var localVarPath = "./convert/edit/html/create/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarHeaderParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // header parameter
            if (cssUrl != null) localVarHeaderParams.Add("cssUrl", this.Configuration.ApiClient.ParameterToString(cssUrl)); // header parameter
            if (cssInline != null) localVarHeaderParams.Add("cssInline", this.Configuration.ApiClient.ParameterToString(cssInline)); // header parameter
            if (javascriptUrl != null) localVarHeaderParams.Add("javascriptUrl", this.Configuration.ApiClient.ParameterToString(javascriptUrl)); // header parameter
            if (javascriptInline != null) localVarHeaderParams.Add("javascriptInline", this.Configuration.ApiClient.ParameterToString(javascriptInline)); // header parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlCreateBlankDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Gets the language for the HTML document Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>HtmlGetLanguageResult</returns>
        public HtmlGetLanguageResult EditHtmlHtmlGetLanguage (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<HtmlGetLanguageResult> localVarResponse = EditHtmlHtmlGetLanguageWithHttpInfo(inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the language for the HTML document Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of HtmlGetLanguageResult</returns>
        public ApiResponse< HtmlGetLanguageResult > EditHtmlHtmlGetLanguageWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {

            var localVarPath = "./convert/edit/html/head/get/language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetLanguageResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetLanguageResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetLanguageResult)));
        }

        /// <summary>
        /// Gets the language for the HTML document Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of HtmlGetLanguageResult</returns>
        public async System.Threading.Tasks.Task<HtmlGetLanguageResult> EditHtmlHtmlGetLanguageAsync (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<HtmlGetLanguageResult> localVarResponse = await EditHtmlHtmlGetLanguageAsyncWithHttpInfo(inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the language for the HTML document Retrieves the language code (e.g. \&quot;en\&quot; or \&quot;de\&quot;) of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetLanguageResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HtmlGetLanguageResult>> EditHtmlHtmlGetLanguageAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {

            var localVarPath = "./convert/edit/html/head/get/language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetLanguageResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetLanguageResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetLanguageResult)));
        }

        /// <summary>
        /// Extract resolved link URLs from HTML File Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>HtmlGetLinksResponse</returns>
        public HtmlGetLinksResponse EditHtmlHtmlGetLinks (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null)
        {
             ApiResponse<HtmlGetLinksResponse> localVarResponse = EditHtmlHtmlGetLinksWithHttpInfo(inputFile, inputFileUrl, baseUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract resolved link URLs from HTML File Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>ApiResponse of HtmlGetLinksResponse</returns>
        public ApiResponse< HtmlGetLinksResponse > EditHtmlHtmlGetLinksWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null)
        {

            var localVarPath = "./convert/edit/html/extract/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (baseUrl != null) localVarHeaderParams.Add("baseUrl", this.Configuration.ApiClient.ParameterToString(baseUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetLinksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetLinksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetLinksResponse)));
        }

        /// <summary>
        /// Extract resolved link URLs from HTML File Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>Task of HtmlGetLinksResponse</returns>
        public async System.Threading.Tasks.Task<HtmlGetLinksResponse> EditHtmlHtmlGetLinksAsync (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null)
        {
             ApiResponse<HtmlGetLinksResponse> localVarResponse = await EditHtmlHtmlGetLinksAsyncWithHttpInfo(inputFile, inputFileUrl, baseUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract resolved link URLs from HTML File Extracts the resolved link URLs, fully-qualified if possible, from an input HTML file.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <param name="baseUrl">Optional: Base URL of the page, such as https://mydomain.com (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetLinksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HtmlGetLinksResponse>> EditHtmlHtmlGetLinksAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, string baseUrl = null)
        {

            var localVarPath = "./convert/edit/html/extract/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (baseUrl != null) localVarHeaderParams.Add("baseUrl", this.Configuration.ApiClient.ParameterToString(baseUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetLinksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetLinksResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetLinksResponse)));
        }

        /// <summary>
        /// Gets the rel canonical URL for the HTML document Gets the rel canonical URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>HtmlGetRelCanonicalUrlResult</returns>
        public HtmlGetRelCanonicalUrlResult EditHtmlHtmlGetRelCanonical (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<HtmlGetRelCanonicalUrlResult> localVarResponse = EditHtmlHtmlGetRelCanonicalWithHttpInfo(inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the rel canonical URL for the HTML document Gets the rel canonical URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of HtmlGetRelCanonicalUrlResult</returns>
        public ApiResponse< HtmlGetRelCanonicalUrlResult > EditHtmlHtmlGetRelCanonicalWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {

            var localVarPath = "./convert/edit/html/head/get/rel-canonical-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetRelCanonical", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetRelCanonicalUrlResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetRelCanonicalUrlResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetRelCanonicalUrlResult)));
        }

        /// <summary>
        /// Gets the rel canonical URL for the HTML document Gets the rel canonical URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of HtmlGetRelCanonicalUrlResult</returns>
        public async System.Threading.Tasks.Task<HtmlGetRelCanonicalUrlResult> EditHtmlHtmlGetRelCanonicalAsync (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<HtmlGetRelCanonicalUrlResult> localVarResponse = await EditHtmlHtmlGetRelCanonicalAsyncWithHttpInfo(inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the rel canonical URL for the HTML document Gets the rel canonical URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetRelCanonicalUrlResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HtmlGetRelCanonicalUrlResult>> EditHtmlHtmlGetRelCanonicalAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {

            var localVarPath = "./convert/edit/html/head/get/rel-canonical-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetRelCanonical", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetRelCanonicalUrlResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetRelCanonicalUrlResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetRelCanonicalUrlResult)));
        }

        /// <summary>
        /// Gets the sitemap URL for the HTML document Gets the sitemap link URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>HtmlGetSitemapUrlResult</returns>
        public HtmlGetSitemapUrlResult EditHtmlHtmlGetSitemap (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<HtmlGetSitemapUrlResult> localVarResponse = EditHtmlHtmlGetSitemapWithHttpInfo(inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the sitemap URL for the HTML document Gets the sitemap link URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of HtmlGetSitemapUrlResult</returns>
        public ApiResponse< HtmlGetSitemapUrlResult > EditHtmlHtmlGetSitemapWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {

            var localVarPath = "./convert/edit/html/head/get/sitemap-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetSitemap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetSitemapUrlResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetSitemapUrlResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetSitemapUrlResult)));
        }

        /// <summary>
        /// Gets the sitemap URL for the HTML document Gets the sitemap link URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of HtmlGetSitemapUrlResult</returns>
        public async System.Threading.Tasks.Task<HtmlGetSitemapUrlResult> EditHtmlHtmlGetSitemapAsync (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<HtmlGetSitemapUrlResult> localVarResponse = await EditHtmlHtmlGetSitemapAsyncWithHttpInfo(inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the sitemap URL for the HTML document Gets the sitemap link URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (HtmlGetSitemapUrlResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HtmlGetSitemapUrlResult>> EditHtmlHtmlGetSitemapAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null)
        {

            var localVarPath = "./convert/edit/html/head/get/sitemap-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlGetSitemap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HtmlGetSitemapUrlResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (HtmlGetSitemapUrlResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HtmlGetSitemapUrlResult)));
        }

        /// <summary>
        /// Sets the language for the HTML document Sets the language code of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlSetLanguage (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlSetLanguageWithHttpInfo(languageCode, inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the language for the HTML document Sets the language code of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlSetLanguageWithHttpInfo (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling EditHtmlApi->EditHtmlHtmlSetLanguage");

            var localVarPath = "./convert/edit/html/head/set/language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (languageCode != null) localVarHeaderParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlSetLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets the language for the HTML document Sets the language code of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlSetLanguageAsync (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlSetLanguageAsyncWithHttpInfo(languageCode, inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the language for the HTML document Sets the language code of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="languageCode">The HTML langauge code to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlSetLanguageAsyncWithHttpInfo (string languageCode, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
                throw new ApiException(400, "Missing required parameter 'languageCode' when calling EditHtmlApi->EditHtmlHtmlSetLanguage");

            var localVarPath = "./convert/edit/html/head/set/language";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (languageCode != null) localVarHeaderParams.Add("languageCode", this.Configuration.ApiClient.ParameterToString(languageCode)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlSetLanguage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets the rel canonical URL for the HTML document Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlSetRelCanonical (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlSetRelCanonicalWithHttpInfo(canonicalUrl, inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the rel canonical URL for the HTML document Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlSetRelCanonicalWithHttpInfo (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'canonicalUrl' is set
            if (canonicalUrl == null)
                throw new ApiException(400, "Missing required parameter 'canonicalUrl' when calling EditHtmlApi->EditHtmlHtmlSetRelCanonical");

            var localVarPath = "./convert/edit/html/head/set/rel-canonical-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (canonicalUrl != null) localVarHeaderParams.Add("canonicalUrl", this.Configuration.ApiClient.ParameterToString(canonicalUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlSetRelCanonical", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets the rel canonical URL for the HTML document Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlSetRelCanonicalAsync (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlSetRelCanonicalAsyncWithHttpInfo(canonicalUrl, inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the rel canonical URL for the HTML document Sets the rel canonical URL of an HTML document.  This is useful for telling search engines and other indexers which pages are duplicates of eachother; any pages with the rel&#x3D;canonical tag will be treated as duplicates of the canonical URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="canonicalUrl">The HTML canonical URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlSetRelCanonicalAsyncWithHttpInfo (string canonicalUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'canonicalUrl' is set
            if (canonicalUrl == null)
                throw new ApiException(400, "Missing required parameter 'canonicalUrl' when calling EditHtmlApi->EditHtmlHtmlSetRelCanonical");

            var localVarPath = "./convert/edit/html/head/set/rel-canonical-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (canonicalUrl != null) localVarHeaderParams.Add("canonicalUrl", this.Configuration.ApiClient.ParameterToString(canonicalUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlSetRelCanonical", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets the sitemap URL for the HTML document Sets the sitemap URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlSetSitemapUrl (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlSetSitemapUrlWithHttpInfo(sitemapUrl, inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the sitemap URL for the HTML document Sets the sitemap URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlSetSitemapUrlWithHttpInfo (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'sitemapUrl' is set
            if (sitemapUrl == null)
                throw new ApiException(400, "Missing required parameter 'sitemapUrl' when calling EditHtmlApi->EditHtmlHtmlSetSitemapUrl");

            var localVarPath = "./convert/edit/html/head/set/sitemap-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (sitemapUrl != null) localVarHeaderParams.Add("sitemapUrl", this.Configuration.ApiClient.ParameterToString(sitemapUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlSetSitemapUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Sets the sitemap URL for the HTML document Sets the sitemap URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlSetSitemapUrlAsync (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlSetSitemapUrlAsyncWithHttpInfo(sitemapUrl, inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the sitemap URL for the HTML document Sets the sitemap URL of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapUrl">The HTML sitemap URL to set.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlSetSitemapUrlAsyncWithHttpInfo (string sitemapUrl, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'sitemapUrl' is set
            if (sitemapUrl == null)
                throw new ApiException(400, "Missing required parameter 'sitemapUrl' when calling EditHtmlApi->EditHtmlHtmlSetSitemapUrl");

            var localVarPath = "./convert/edit/html/head/set/sitemap-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (sitemapUrl != null) localVarHeaderParams.Add("sitemapUrl", this.Configuration.ApiClient.ParameterToString(sitemapUrl)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlSetSitemapUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
