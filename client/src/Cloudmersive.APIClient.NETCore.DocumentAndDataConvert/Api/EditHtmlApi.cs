/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEditHtmlApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendHeading (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null);

        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendHeadingWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null);
        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendImageFromUrl (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);

        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendImageFromUrlWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);
        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendImageInline (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendImageInlineWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);
        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>byte[]</returns>
        byte[] EditHtmlHtmlAppendParagraph (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditHtmlHtmlAppendParagraphWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendHeadingAsync (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null);

        /// <summary>
        /// Append a Heading to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a heading to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendHeadingAsyncWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null);
        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageFromUrlAsync (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);

        /// <summary>
        /// Append an Image to an HTML Document from a URL
        /// </summary>
        /// <remarks>
        /// Appends an image to the end of an HTML document using a URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageFromUrlAsyncWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null);
        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageInlineAsync (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageInlineAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null);
        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendParagraphAsync (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null);

        /// <summary>
        /// Append a Paragraph to an HTML Document
        /// </summary>
        /// <remarks>
        /// Appends a paragraph to the end of an HTML document.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendParagraphAsyncWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EditHtmlApi : IEditHtmlApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EditHtmlApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditHtmlApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditHtmlApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EditHtmlApi(Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendHeading (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendHeadingWithHttpInfo(headingText, inputFile, inputFileUrl, headingSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendHeadingWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null)
        {
            // verify the required parameter 'headingText' is set
            if (headingText == null)
                throw new ApiException(400, "Missing required parameter 'headingText' when calling EditHtmlApi->EditHtmlHtmlAppendHeading");

            var localVarPath = "./convert/edit/html/append/heading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (headingText != null) localVarHeaderParams.Add("headingText", this.Configuration.ApiClient.ParameterToString(headingText)); // header parameter
            if (headingSize != null) localVarHeaderParams.Add("headingSize", this.Configuration.ApiClient.ParameterToString(headingSize)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendHeading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendHeadingAsync (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendHeadingAsyncWithHttpInfo(headingText, inputFile, inputFileUrl, headingSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a Heading to an HTML Document Appends a heading to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="headingText">The text content to be used in the header.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="headingSize">Optional: The heading size number. Default is 1. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendHeadingAsyncWithHttpInfo (string headingText, System.IO.Stream inputFile = null, string inputFileUrl = null, int? headingSize = null)
        {
            // verify the required parameter 'headingText' is set
            if (headingText == null)
                throw new ApiException(400, "Missing required parameter 'headingText' when calling EditHtmlApi->EditHtmlHtmlAppendHeading");

            var localVarPath = "./convert/edit/html/append/heading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (headingText != null) localVarHeaderParams.Add("headingText", this.Configuration.ApiClient.ParameterToString(headingText)); // header parameter
            if (headingSize != null) localVarHeaderParams.Add("headingSize", this.Configuration.ApiClient.ParameterToString(headingSize)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendHeading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendImageFromUrl (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendImageFromUrlWithHttpInfo(imageUrl, inputFile, inputFileUrl, cssStyle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendImageFromUrlWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
                throw new ApiException(400, "Missing required parameter 'imageUrl' when calling EditHtmlApi->EditHtmlHtmlAppendImageFromUrl");

            var localVarPath = "./convert/edit/html/append/image/from-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageFromUrlAsync (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendImageFromUrlAsyncWithHttpInfo(imageUrl, inputFile, inputFileUrl, cssStyle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append an Image to an HTML Document from a URL Appends an image to the end of an HTML document using a URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL for the image.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageFromUrlAsyncWithHttpInfo (string imageUrl, System.IO.Stream inputFile = null, string inputFileUrl = null, string cssStyle = null)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
                throw new ApiException(400, "Missing required parameter 'imageUrl' when calling EditHtmlApi->EditHtmlHtmlAppendImageFromUrl");

            var localVarPath = "./convert/edit/html/append/image/from-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageFromUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendImageInline (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendImageInlineWithHttpInfo(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendImageInlineWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {

            var localVarPath = "./convert/edit/html/append/image/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (imageExtension != null) localVarHeaderParams.Add("imageExtension", this.Configuration.ApiClient.ParameterToString(imageExtension)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageInline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendImageInlineAsync (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendImageInlineAsyncWithHttpInfo(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a Base64 Inline Image to an HTML Document Appends a base64 inline image to the end of an HTML document from an input file or URL.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <param name="imageFile">Optional: Image file to be appended as base64 inline image. (optional)</param>
        /// <param name="imageUrl">Optional: Image URL to be appended as base64 inline image. (optional)</param>
        /// <param name="cssStyle">Optional: CSS style for the image. (optional)</param>
        /// <param name="imageExtension">Optional: The extension (JPG, PNG, GIF, etc.) of the image file. Recommended if uploading a file directly, such as with a byte array. If no extension can be determined, will default to JPG. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendImageInlineAsyncWithHttpInfo (System.IO.Stream inputFile = null, string inputFileUrl = null, System.IO.Stream imageFile = null, string imageUrl = null, string cssStyle = null, string imageExtension = null)
        {

            var localVarPath = "./convert/edit/html/append/image/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (imageUrl != null) localVarHeaderParams.Add("imageUrl", this.Configuration.ApiClient.ParameterToString(imageUrl)); // header parameter
            if (cssStyle != null) localVarHeaderParams.Add("cssStyle", this.Configuration.ApiClient.ParameterToString(cssStyle)); // header parameter
            if (imageExtension != null) localVarHeaderParams.Add("imageExtension", this.Configuration.ApiClient.ParameterToString(imageExtension)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendImageInline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] EditHtmlHtmlAppendParagraph (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = EditHtmlHtmlAppendParagraphWithHttpInfo(paragraphText, inputFile, inputFileUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditHtmlHtmlAppendParagraphWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'paragraphText' is set
            if (paragraphText == null)
                throw new ApiException(400, "Missing required parameter 'paragraphText' when calling EditHtmlApi->EditHtmlHtmlAppendParagraph");

            var localVarPath = "./convert/edit/html/append/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (paragraphText != null) localVarHeaderParams.Add("paragraphText", this.Configuration.ApiClient.ParameterToString(paragraphText)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditHtmlHtmlAppendParagraphAsync (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
             ApiResponse<byte[]> localVarResponse = await EditHtmlHtmlAppendParagraphAsyncWithHttpInfo(paragraphText, inputFile, inputFileUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append a Paragraph to an HTML Document Appends a paragraph to the end of an HTML document.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paragraphText">The text content to be used in the paragraph.</param>
        /// <param name="inputFile">Optional: Input file to perform the operation on. (optional)</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API (part of EditDocumentApi) to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public). (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditHtmlHtmlAppendParagraphAsyncWithHttpInfo (string paragraphText, System.IO.Stream inputFile = null, string inputFileUrl = null)
        {
            // verify the required parameter 'paragraphText' is set
            if (paragraphText == null)
                throw new ApiException(400, "Missing required parameter 'paragraphText' when calling EditHtmlApi->EditHtmlHtmlAppendParagraph");

            var localVarPath = "./convert/edit/html/append/paragraph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFileUrl != null) localVarHeaderParams.Add("inputFileUrl", this.Configuration.ApiClient.ParameterToString(inputFileUrl)); // header parameter
            if (paragraphText != null) localVarHeaderParams.Add("paragraphText", this.Configuration.ApiClient.ParameterToString(paragraphText)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditHtmlHtmlAppendParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
