/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZipArchiveApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Compress files to create a new zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] ZipArchiveZipCreate (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Compress files to create a new zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ZipArchiveZipCreateWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Object</returns>
        Object ZipArchiveZipCreateAdvanced (CreateZipArchiveRequest request);

        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ZipArchiveZipCreateAdvancedWithHttpInfo (CreateZipArchiveRequest request);
        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] ZipArchiveZipCreateEncrypted (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> ZipArchiveZipCreateEncryptedWithHttpInfo (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Decrypt and remove password protection on a zip file
        /// </summary>
        /// <remarks>
        /// Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>Object</returns>
        Object ZipArchiveZipDecrypt (System.IO.Stream inputFile, string zipPassword);

        /// <summary>
        /// Decrypt and remove password protection on a zip file
        /// </summary>
        /// <remarks>
        /// Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ZipArchiveZipDecryptWithHttpInfo (System.IO.Stream inputFile, string zipPassword);
        /// <summary>
        /// Encrypt and password protect a zip file
        /// </summary>
        /// <remarks>
        /// Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>Object</returns>
        Object ZipArchiveZipEncryptAdvanced (ZipEncryptionAdvancedRequest encryptionRequest);

        /// <summary>
        /// Encrypt and password protect a zip file
        /// </summary>
        /// <remarks>
        /// Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ZipArchiveZipEncryptAdvancedWithHttpInfo (ZipEncryptionAdvancedRequest encryptionRequest);
        /// <summary>
        /// Extract, decompress files and folders from a zip archive
        /// </summary>
        /// <remarks>
        /// Extracts a zip archive by decompressing files, and folders.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ZipExtractResponse</returns>
        ZipExtractResponse ZipArchiveZipExtract (System.IO.Stream inputFile);

        /// <summary>
        /// Extract, decompress files and folders from a zip archive
        /// </summary>
        /// <remarks>
        /// Extracts a zip archive by decompressing files, and folders.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of ZipExtractResponse</returns>
        ApiResponse<ZipExtractResponse> ZipArchiveZipExtractWithHttpInfo (System.IO.Stream inputFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Compress files to create a new zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ZipArchiveZipCreateAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Compress files to create a new zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ZipArchiveZipCreateAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ZipArchiveZipCreateAdvancedAsync (CreateZipArchiveRequest request);

        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZipArchiveZipCreateAdvancedAsyncWithHttpInfo (CreateZipArchiveRequest request);
        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> ZipArchiveZipCreateEncryptedAsync (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive
        /// </summary>
        /// <remarks>
        /// Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> ZipArchiveZipCreateEncryptedAsyncWithHttpInfo (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Decrypt and remove password protection on a zip file
        /// </summary>
        /// <remarks>
        /// Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ZipArchiveZipDecryptAsync (System.IO.Stream inputFile, string zipPassword);

        /// <summary>
        /// Decrypt and remove password protection on a zip file
        /// </summary>
        /// <remarks>
        /// Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZipArchiveZipDecryptAsyncWithHttpInfo (System.IO.Stream inputFile, string zipPassword);
        /// <summary>
        /// Encrypt and password protect a zip file
        /// </summary>
        /// <remarks>
        /// Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ZipArchiveZipEncryptAdvancedAsync (ZipEncryptionAdvancedRequest encryptionRequest);

        /// <summary>
        /// Encrypt and password protect a zip file
        /// </summary>
        /// <remarks>
        /// Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZipArchiveZipEncryptAdvancedAsyncWithHttpInfo (ZipEncryptionAdvancedRequest encryptionRequest);
        /// <summary>
        /// Extract, decompress files and folders from a zip archive
        /// </summary>
        /// <remarks>
        /// Extracts a zip archive by decompressing files, and folders.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ZipExtractResponse</returns>
        System.Threading.Tasks.Task<ZipExtractResponse> ZipArchiveZipExtractAsync (System.IO.Stream inputFile);

        /// <summary>
        /// Extract, decompress files and folders from a zip archive
        /// </summary>
        /// <remarks>
        /// Extracts a zip archive by decompressing files, and folders.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (ZipExtractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ZipExtractResponse>> ZipArchiveZipExtractAsyncWithHttpInfo (System.IO.Stream inputFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ZipArchiveApi : IZipArchiveApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ZipArchiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZipArchiveApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZipArchiveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ZipArchiveApi(Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Compress files to create a new zip archive Create a new zip archive by compressing input files.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] ZipArchiveZipCreate (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = ZipArchiveZipCreateWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Compress files to create a new zip archive Create a new zip archive by compressing input files.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ZipArchiveZipCreateWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling ZipArchiveApi->ZipArchiveZipCreate");

            var localVarPath = "./convert/archive/zip/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", this.Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", this.Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", this.Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", this.Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", this.Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", this.Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", this.Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", this.Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", this.Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", this.Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Compress files to create a new zip archive Create a new zip archive by compressing input files.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ZipArchiveZipCreateAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await ZipArchiveZipCreateAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Compress files to create a new zip archive Create a new zip archive by compressing input files.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ZipArchiveZipCreateAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling ZipArchiveApi->ZipArchiveZipCreate");

            var localVarPath = "./convert/archive/zip/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", this.Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", this.Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", this.Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", this.Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", this.Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", this.Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", this.Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", this.Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", this.Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", this.Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Object</returns>
        public Object ZipArchiveZipCreateAdvanced (CreateZipArchiveRequest request)
        {
             ApiResponse<Object> localVarResponse = ZipArchiveZipCreateAdvancedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ZipArchiveZipCreateAdvancedWithHttpInfo (CreateZipArchiveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ZipArchiveApi->ZipArchiveZipCreateAdvanced");

            var localVarPath = "./convert/archive/zip/create/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipCreateAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ZipArchiveZipCreateAdvancedAsync (CreateZipArchiveRequest request)
        {
             ApiResponse<Object> localVarResponse = await ZipArchiveZipCreateAdvancedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Compress files and folders to create a new zip archive with advanced options Create a new zip archive by compressing input files, folders and leverage advanced options to control the structure of the resulting zip archive.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZipArchiveZipCreateAdvancedAsyncWithHttpInfo (CreateZipArchiveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling ZipArchiveApi->ZipArchiveZipCreateAdvanced");

            var localVarPath = "./convert/archive/zip/create/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipCreateAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] ZipArchiveZipCreateEncrypted (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = ZipArchiveZipCreateEncryptedWithHttpInfo(password, inputFile1, encryptionAlgorithm, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > ZipArchiveZipCreateEncryptedWithHttpInfo (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling ZipArchiveApi->ZipArchiveZipCreateEncrypted");
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling ZipArchiveApi->ZipArchiveZipCreateEncrypted");

            var localVarPath = "./convert/archive/zip/create/encrypted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter
            if (encryptionAlgorithm != null) localVarHeaderParams.Add("encryptionAlgorithm", this.Configuration.ApiClient.ParameterToString(encryptionAlgorithm)); // header parameter
            if (inputFile1 != null) localVarFileParams.Add("inputFile1", this.Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", this.Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", this.Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", this.Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", this.Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", this.Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", this.Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", this.Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", this.Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", this.Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipCreateEncrypted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> ZipArchiveZipCreateEncryptedAsync (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await ZipArchiveZipCreateEncryptedAsyncWithHttpInfo(password, inputFile1, encryptionAlgorithm, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Compress files to create a new, encrypted and password-protected zip archive Create a new zip archive by compressing input files, and also applies encryption and password protection to the zip.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure</param>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm). Default is AES-256. (optional)</param>
        /// <param name="inputFile2">Second input file to perform the operation on. (optional)</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> ZipArchiveZipCreateEncryptedAsyncWithHttpInfo (string password, System.IO.Stream inputFile1, string encryptionAlgorithm = null, System.IO.Stream inputFile2 = null, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling ZipArchiveApi->ZipArchiveZipCreateEncrypted");
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling ZipArchiveApi->ZipArchiveZipCreateEncrypted");

            var localVarPath = "./convert/archive/zip/create/encrypted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter
            if (encryptionAlgorithm != null) localVarHeaderParams.Add("encryptionAlgorithm", this.Configuration.ApiClient.ParameterToString(encryptionAlgorithm)); // header parameter
            if (inputFile1 != null) localVarFileParams.Add("inputFile1", this.Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", this.Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", this.Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", this.Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", this.Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", this.Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", this.Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", this.Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", this.Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", this.Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipCreateEncrypted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Decrypt and remove password protection on a zip file Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>Object</returns>
        public Object ZipArchiveZipDecrypt (System.IO.Stream inputFile, string zipPassword)
        {
             ApiResponse<Object> localVarResponse = ZipArchiveZipDecryptWithHttpInfo(inputFile, zipPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypt and remove password protection on a zip file Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ZipArchiveZipDecryptWithHttpInfo (System.IO.Stream inputFile, string zipPassword)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ZipArchiveApi->ZipArchiveZipDecrypt");
            // verify the required parameter 'zipPassword' is set
            if (zipPassword == null)
                throw new ApiException(400, "Missing required parameter 'zipPassword' when calling ZipArchiveApi->ZipArchiveZipDecrypt");

            var localVarPath = "./convert/archive/zip/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zipPassword != null) localVarHeaderParams.Add("zipPassword", this.Configuration.ApiClient.ParameterToString(zipPassword)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Decrypt and remove password protection on a zip file Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ZipArchiveZipDecryptAsync (System.IO.Stream inputFile, string zipPassword)
        {
             ApiResponse<Object> localVarResponse = await ZipArchiveZipDecryptAsyncWithHttpInfo(inputFile, zipPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrypt and remove password protection on a zip file Decrypts and removes password protection from an encrypted zip file with the specified password
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="zipPassword">Required; Password for the input archive</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZipArchiveZipDecryptAsyncWithHttpInfo (System.IO.Stream inputFile, string zipPassword)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ZipArchiveApi->ZipArchiveZipDecrypt");
            // verify the required parameter 'zipPassword' is set
            if (zipPassword == null)
                throw new ApiException(400, "Missing required parameter 'zipPassword' when calling ZipArchiveApi->ZipArchiveZipDecrypt");

            var localVarPath = "./convert/archive/zip/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zipPassword != null) localVarHeaderParams.Add("zipPassword", this.Configuration.ApiClient.ParameterToString(zipPassword)); // header parameter
            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Encrypt and password protect a zip file Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>Object</returns>
        public Object ZipArchiveZipEncryptAdvanced (ZipEncryptionAdvancedRequest encryptionRequest)
        {
             ApiResponse<Object> localVarResponse = ZipArchiveZipEncryptAdvancedWithHttpInfo(encryptionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt and password protect a zip file Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ZipArchiveZipEncryptAdvancedWithHttpInfo (ZipEncryptionAdvancedRequest encryptionRequest)
        {
            // verify the required parameter 'encryptionRequest' is set
            if (encryptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'encryptionRequest' when calling ZipArchiveApi->ZipArchiveZipEncryptAdvanced");

            var localVarPath = "./convert/archive/zip/encrypt/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (encryptionRequest != null && encryptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(encryptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryptionRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipEncryptAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Encrypt and password protect a zip file Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ZipArchiveZipEncryptAdvancedAsync (ZipEncryptionAdvancedRequest encryptionRequest)
        {
             ApiResponse<Object> localVarResponse = await ZipArchiveZipEncryptAdvancedAsyncWithHttpInfo(encryptionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encrypt and password protect a zip file Encrypts and password protects an existing zip file with the specified password and encryption algorithm
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encryptionRequest">Encryption request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZipArchiveZipEncryptAdvancedAsyncWithHttpInfo (ZipEncryptionAdvancedRequest encryptionRequest)
        {
            // verify the required parameter 'encryptionRequest' is set
            if (encryptionRequest == null)
                throw new ApiException(400, "Missing required parameter 'encryptionRequest' when calling ZipArchiveApi->ZipArchiveZipEncryptAdvanced");

            var localVarPath = "./convert/archive/zip/encrypt/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (encryptionRequest != null && encryptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(encryptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = encryptionRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipEncryptAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Extract, decompress files and folders from a zip archive Extracts a zip archive by decompressing files, and folders.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ZipExtractResponse</returns>
        public ZipExtractResponse ZipArchiveZipExtract (System.IO.Stream inputFile)
        {
             ApiResponse<ZipExtractResponse> localVarResponse = ZipArchiveZipExtractWithHttpInfo(inputFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract, decompress files and folders from a zip archive Extracts a zip archive by decompressing files, and folders.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>ApiResponse of ZipExtractResponse</returns>
        public ApiResponse< ZipExtractResponse > ZipArchiveZipExtractWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ZipArchiveApi->ZipArchiveZipExtract");

            var localVarPath = "./convert/archive/zip/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipExtract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ZipExtractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ZipExtractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ZipExtractResponse)));
        }

        /// <summary>
        /// Extract, decompress files and folders from a zip archive Extracts a zip archive by decompressing files, and folders.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ZipExtractResponse</returns>
        public async System.Threading.Tasks.Task<ZipExtractResponse> ZipArchiveZipExtractAsync (System.IO.Stream inputFile)
        {
             ApiResponse<ZipExtractResponse> localVarResponse = await ZipArchiveZipExtractAsyncWithHttpInfo(inputFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract, decompress files and folders from a zip archive Extracts a zip archive by decompressing files, and folders.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <returns>Task of ApiResponse (ZipExtractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ZipExtractResponse>> ZipArchiveZipExtractAsyncWithHttpInfo (System.IO.Stream inputFile)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
                throw new ApiException(400, "Missing required parameter 'inputFile' when calling ZipArchiveApi->ZipArchiveZipExtract");

            var localVarPath = "./convert/archive/zip/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile != null) localVarFileParams.Add("inputFile", this.Configuration.ApiClient.ParameterToFile("inputFile", inputFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZipArchiveZipExtract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ZipExtractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ZipExtractResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ZipExtractResponse)));
        }

    }
}
