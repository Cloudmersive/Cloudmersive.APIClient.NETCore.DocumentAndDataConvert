/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMergeDocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Merge Two Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentDocx (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentDocxWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentDocxMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentDocxMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentPdf (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentPdfWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentPdfMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentPdfMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentPng (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentPngWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentPngMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentPngMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentPptx (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentPptxWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentPptxMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentPptxMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Object</returns>
        Object MergeDocumentTxt (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MergeDocumentTxtWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentTxtMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentTxtMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentXlsx (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentXlsxWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] MergeDocumentXlsxMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> MergeDocumentXlsxMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Merge Two Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentDocxAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentDocxAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentDocxMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple Word DOCX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentDocxMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentPdfAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPdfAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentPdfMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple PDF Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPdfMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentPngAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPngAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentPngMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple PNG Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPngMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentPptxAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPptxAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentPptxMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple PowerPoint PPTX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPptxMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MergeDocumentTxtAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeDocumentTxtAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentTxtMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple Text (TXT) Files Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentTxtMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        /// <summary>
        /// Merge Two Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentXlsxAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2);

        /// <summary>
        /// Merge Two Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentXlsxAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2);
        /// <summary>
        /// Merge Multple Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> MergeDocumentXlsxMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);

        /// <summary>
        /// Merge Multple Excel XLSX Together
        /// </summary>
        /// <remarks>
        /// Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentXlsxMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MergeDocumentApi : IMergeDocumentApi
    {
        private Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MergeDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MergeDocumentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MergeDocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MergeDocumentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Merge Two Word DOCX Together Combine two Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentDocx (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentDocxWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Two Word DOCX Together Combine two Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentDocxWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentDocx");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentDocx");

            var localVarPath = "/convert/merge/docx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentDocx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two Word DOCX Together Combine two Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentDocxAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentDocxAsyncWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Two Word DOCX Together Combine two Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentDocxAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentDocx");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentDocx");

            var localVarPath = "/convert/merge/docx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentDocx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple Word DOCX Together Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentDocxMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentDocxMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Multple Word DOCX Together Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentDocxMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentDocxMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentDocxMulti");

            var localVarPath = "/convert/merge/docx/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentDocxMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple Word DOCX Together Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentDocxMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentDocxMultiAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Multple Word DOCX Together Combine multiple Office Word Documents (docx) into one single Office Word document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentDocxMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentDocxMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentDocxMulti");

            var localVarPath = "/convert/merge/docx/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentDocxMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two PDF Files Together Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentPdf (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentPdfWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Two PDF Files Together Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentPdfWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPdf");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPdf");

            var localVarPath = "/convert/merge/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two PDF Files Together Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentPdfAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentPdfAsyncWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Two PDF Files Together Combine two PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPdfAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPdf");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPdf");

            var localVarPath = "/convert/merge/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple PDF Files Together Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentPdfMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentPdfMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Multple PDF Files Together Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentPdfMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPdfMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPdfMulti");

            var localVarPath = "/convert/merge/pdf/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPdfMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple PDF Files Together Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentPdfMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentPdfMultiAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Multple PDF Files Together Combine multiple PDF files (pdf) into a single PDF document, preserving the order of the input documents in the combined document
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPdfMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPdfMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPdfMulti");

            var localVarPath = "/convert/merge/pdf/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPdfMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two PNG Files Together Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentPng (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentPngWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Two PNG Files Together Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentPngWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPng");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPng");

            var localVarPath = "/convert/merge/png/vertical";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two PNG Files Together Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentPngAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentPngAsyncWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Two PNG Files Together Combine two PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPngAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPng");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPng");

            var localVarPath = "/convert/merge/png/vertical";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPng", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple PNG Files Together Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentPngMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentPngMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Multple PNG Files Together Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentPngMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPngMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPngMulti");

            var localVarPath = "/convert/merge/png/vertical/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPngMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple PNG Files Together Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentPngMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentPngMultiAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Multple PNG Files Together Combine multiple PNG files into a single PNG document, preserving the order of the input documents in the combined document by stacking them vertically
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPngMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPngMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPngMulti");

            var localVarPath = "/convert/merge/png/vertical/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPngMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two PowerPoint PPTX Together Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentPptx (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentPptxWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Two PowerPoint PPTX Together Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentPptxWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPptx");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPptx");

            var localVarPath = "/convert/merge/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two PowerPoint PPTX Together Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentPptxAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentPptxAsyncWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Two PowerPoint PPTX Together Combine two Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPptxAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPptx");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPptx");

            var localVarPath = "/convert/merge/pptx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPptx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple PowerPoint PPTX Together Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentPptxMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentPptxMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Multple PowerPoint PPTX Together Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentPptxMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPptxMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPptxMulti");

            var localVarPath = "/convert/merge/pptx/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPptxMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple PowerPoint PPTX Together Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentPptxMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentPptxMultiAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Multple PowerPoint PPTX Together Combine multiple Office PowerPoint presentations (pptx) into one single Office PowerPoint presentation
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentPptxMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentPptxMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentPptxMulti");

            var localVarPath = "/convert/merge/pptx/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentPptxMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two Text (TXT) Files Together Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Object</returns>
        public Object MergeDocumentTxt (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<Object> localVarResponse = MergeDocumentTxtWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Two Text (TXT) Files Together Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MergeDocumentTxtWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentTxt");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentTxt");

            var localVarPath = "/convert/merge/txt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentTxt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Merge Two Text (TXT) Files Together Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MergeDocumentTxtAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<Object> localVarResponse = await MergeDocumentTxtAsyncWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Two Text (TXT) Files Together Combine two Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MergeDocumentTxtAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentTxt");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentTxt");

            var localVarPath = "/convert/merge/txt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentTxt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Merge Multple Text (TXT) Files Together Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentTxtMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentTxtMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Multple Text (TXT) Files Together Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentTxtMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentTxtMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentTxtMulti");

            var localVarPath = "/convert/merge/txt/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentTxtMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple Text (TXT) Files Together Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentTxtMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentTxtMultiAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Multple Text (TXT) Files Together Combine multiple Text (.TXT) files into a single text document, preserving the order of the input documents in the combined document by stacking them vertically.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentTxtMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentTxtMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentTxtMulti");

            var localVarPath = "/convert/merge/txt/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentTxtMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two Excel XLSX Together Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentXlsx (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentXlsxWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Two Excel XLSX Together Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentXlsxWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentXlsx");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentXlsx");

            var localVarPath = "/convert/merge/xlsx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentXlsx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Two Excel XLSX Together Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentXlsxAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentXlsxAsyncWithHttpInfo(inputFile1, inputFile2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Two Excel XLSX Together Combine two Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on (more than 2 can be supplied).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentXlsxAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentXlsx");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentXlsx");

            var localVarPath = "/convert/merge/xlsx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentXlsx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple Excel XLSX Together Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] MergeDocumentXlsxMulti (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = MergeDocumentXlsxMultiWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Multple Excel XLSX Together Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > MergeDocumentXlsxMultiWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentXlsxMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentXlsxMulti");

            var localVarPath = "/convert/merge/xlsx/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentXlsxMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Merge Multple Excel XLSX Together Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> MergeDocumentXlsxMultiAsync (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
             ApiResponse<byte[]> localVarResponse = await MergeDocumentXlsxMultiAsyncWithHttpInfo(inputFile1, inputFile2, inputFile3, inputFile4, inputFile5, inputFile6, inputFile7, inputFile8, inputFile9, inputFile10);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Multple Excel XLSX Together Combine multiple Office Excel spreadsheets (xlsx) into a single Office Excel spreadsheet
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile1">First input file to perform the operation on.</param>
        /// <param name="inputFile2">Second input file to perform the operation on.</param>
        /// <param name="inputFile3">Third input file to perform the operation on. (optional)</param>
        /// <param name="inputFile4">Fourth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile5">Fifth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile6">Sixth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile7">Seventh input file to perform the operation on. (optional)</param>
        /// <param name="inputFile8">Eighth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile9">Ninth input file to perform the operation on. (optional)</param>
        /// <param name="inputFile10">Tenth input file to perform the operation on. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> MergeDocumentXlsxMultiAsyncWithHttpInfo (System.IO.Stream inputFile1, System.IO.Stream inputFile2, System.IO.Stream inputFile3 = null, System.IO.Stream inputFile4 = null, System.IO.Stream inputFile5 = null, System.IO.Stream inputFile6 = null, System.IO.Stream inputFile7 = null, System.IO.Stream inputFile8 = null, System.IO.Stream inputFile9 = null, System.IO.Stream inputFile10 = null)
        {
            // verify the required parameter 'inputFile1' is set
            if (inputFile1 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile1' when calling MergeDocumentApi->MergeDocumentXlsxMulti");
            // verify the required parameter 'inputFile2' is set
            if (inputFile2 == null)
                throw new ApiException(400, "Missing required parameter 'inputFile2' when calling MergeDocumentApi->MergeDocumentXlsxMulti");

            var localVarPath = "/convert/merge/xlsx/multi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputFile1 != null) localVarFileParams.Add("inputFile1", Configuration.ApiClient.ParameterToFile("inputFile1", inputFile1));
            if (inputFile2 != null) localVarFileParams.Add("inputFile2", Configuration.ApiClient.ParameterToFile("inputFile2", inputFile2));
            if (inputFile3 != null) localVarFileParams.Add("inputFile3", Configuration.ApiClient.ParameterToFile("inputFile3", inputFile3));
            if (inputFile4 != null) localVarFileParams.Add("inputFile4", Configuration.ApiClient.ParameterToFile("inputFile4", inputFile4));
            if (inputFile5 != null) localVarFileParams.Add("inputFile5", Configuration.ApiClient.ParameterToFile("inputFile5", inputFile5));
            if (inputFile6 != null) localVarFileParams.Add("inputFile6", Configuration.ApiClient.ParameterToFile("inputFile6", inputFile6));
            if (inputFile7 != null) localVarFileParams.Add("inputFile7", Configuration.ApiClient.ParameterToFile("inputFile7", inputFile7));
            if (inputFile8 != null) localVarFileParams.Add("inputFile8", Configuration.ApiClient.ParameterToFile("inputFile8", inputFile8));
            if (inputFile9 != null) localVarFileParams.Add("inputFile9", Configuration.ApiClient.ParameterToFile("inputFile9", inputFile9));
            if (inputFile10 != null) localVarFileParams.Add("inputFile10", Configuration.ApiClient.ParameterToFile("inputFile10", inputFile10));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDocumentXlsxMulti", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
