/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Result of converting an EML file to HTML string
    /// </summary>
    [DataContract]
    public partial class EmlToHtmlResult :  IEquatable<EmlToHtmlResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmlToHtmlResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="content">An HTML string version of the EML file.</param>
        /// <param name="body">The main body of the EML file&#39;s email as an HTML string.</param>
        /// <param name="from">The From sender of the EML file&#39;s email.</param>
        /// <param name="to">The To recipients of the EML file&#39;s email.</param>
        /// <param name="cc">The CC recipients of the EML file&#39;s email.</param>
        /// <param name="bcc">The BCC recipients of the EML file&#39;s email.</param>
        /// <param name="receivedTime">The time that the EML file&#39;s email was received.</param>
        /// <param name="subject">The subject of the EML file&#39;s email.</param>
        /// <param name="organization">The Organization of the EML file&#39;s email.</param>
        /// <param name="attachments">List of all attachments for the EML file.</param>
        public EmlToHtmlResult(bool? successful = default(bool?), string content = default(string), string body = default(string), string from = default(string), string to = default(string), string cc = default(string), string bcc = default(string), string receivedTime = default(string), string subject = default(string), string organization = default(string), List<EmlAttachment> attachments = default(List<EmlAttachment>))
        {
            this.Successful = successful;
            this.Content = content;
            this.Body = body;
            this.From = from;
            this.To = to;
            this.Cc = cc;
            this.Bcc = bcc;
            this.ReceivedTime = receivedTime;
            this.Subject = subject;
            this.Organization = organization;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// An HTML string version of the EML file
        /// </summary>
        /// <value>An HTML string version of the EML file</value>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The main body of the EML file&#39;s email as an HTML string
        /// </summary>
        /// <value>The main body of the EML file&#39;s email as an HTML string</value>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// The From sender of the EML file&#39;s email
        /// </summary>
        /// <value>The From sender of the EML file&#39;s email</value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// The To recipients of the EML file&#39;s email
        /// </summary>
        /// <value>The To recipients of the EML file&#39;s email</value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The CC recipients of the EML file&#39;s email
        /// </summary>
        /// <value>The CC recipients of the EML file&#39;s email</value>
        [DataMember(Name="Cc", EmitDefaultValue=false)]
        public string Cc { get; set; }

        /// <summary>
        /// The BCC recipients of the EML file&#39;s email
        /// </summary>
        /// <value>The BCC recipients of the EML file&#39;s email</value>
        [DataMember(Name="Bcc", EmitDefaultValue=false)]
        public string Bcc { get; set; }

        /// <summary>
        /// The time that the EML file&#39;s email was received
        /// </summary>
        /// <value>The time that the EML file&#39;s email was received</value>
        [DataMember(Name="ReceivedTime", EmitDefaultValue=false)]
        public string ReceivedTime { get; set; }

        /// <summary>
        /// The subject of the EML file&#39;s email
        /// </summary>
        /// <value>The subject of the EML file&#39;s email</value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The Organization of the EML file&#39;s email
        /// </summary>
        /// <value>The Organization of the EML file&#39;s email</value>
        [DataMember(Name="Organization", EmitDefaultValue=false)]
        public string Organization { get; set; }

        /// <summary>
        /// List of all attachments for the EML file
        /// </summary>
        /// <value>List of all attachments for the EML file</value>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<EmlAttachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmlToHtmlResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  ReceivedTime: ").Append(ReceivedTime).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmlToHtmlResult);
        }

        /// <summary>
        /// Returns true if EmlToHtmlResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EmlToHtmlResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmlToHtmlResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    (this.Bcc != null &&
                    this.Bcc.Equals(input.Bcc))
                ) && 
                (
                    this.ReceivedTime == input.ReceivedTime ||
                    (this.ReceivedTime != null &&
                    this.ReceivedTime.Equals(input.ReceivedTime))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.ReceivedTime != null)
                    hashCode = hashCode * 59 + this.ReceivedTime.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }
    }

}
