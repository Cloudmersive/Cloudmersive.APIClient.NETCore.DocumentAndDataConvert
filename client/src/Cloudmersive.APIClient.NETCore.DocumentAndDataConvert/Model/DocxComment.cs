/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Comment in a Word Document
    /// </summary>
    [DataContract]
    public partial class DocxComment :  IEquatable<DocxComment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxComment" /> class.
        /// </summary>
        /// <param name="Path">Path to the comment in the document.</param>
        /// <param name="Author">Author name of the comment.</param>
        /// <param name="AuthorInitials">Initials of the author of the comment.</param>
        /// <param name="CommentText">Text content of the comment.</param>
        /// <param name="CommentDate">Date timestamp of the comment.</param>
        /// <param name="IsTopLevel">True if the comment is at the top level, false if this comment is a child reply of another comment.</param>
        /// <param name="IsReply">True if this comment is a reply to another comment, false otherwise.</param>
        /// <param name="ParentCommentPath">Path to the parent of this comment, if this comment is a reply, otherwise this value will be null.</param>
        /// <param name="Done">True if this comment is marked as Done in Word, otherwise it is false.</param>
        public DocxComment(string Path = default(string), string Author = default(string), string AuthorInitials = default(string), string CommentText = default(string), DateTime? CommentDate = default(DateTime?), bool? IsTopLevel = default(bool?), bool? IsReply = default(bool?), string ParentCommentPath = default(string), bool? Done = default(bool?))
        {
            this.Path = Path;
            this.Author = Author;
            this.AuthorInitials = AuthorInitials;
            this.CommentText = CommentText;
            this.CommentDate = CommentDate;
            this.IsTopLevel = IsTopLevel;
            this.IsReply = IsReply;
            this.ParentCommentPath = ParentCommentPath;
            this.Done = Done;
        }
        
        /// <summary>
        /// Path to the comment in the document
        /// </summary>
        /// <value>Path to the comment in the document</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Author name of the comment
        /// </summary>
        /// <value>Author name of the comment</value>
        [DataMember(Name="Author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Initials of the author of the comment
        /// </summary>
        /// <value>Initials of the author of the comment</value>
        [DataMember(Name="AuthorInitials", EmitDefaultValue=false)]
        public string AuthorInitials { get; set; }

        /// <summary>
        /// Text content of the comment
        /// </summary>
        /// <value>Text content of the comment</value>
        [DataMember(Name="CommentText", EmitDefaultValue=false)]
        public string CommentText { get; set; }

        /// <summary>
        /// Date timestamp of the comment
        /// </summary>
        /// <value>Date timestamp of the comment</value>
        [DataMember(Name="CommentDate", EmitDefaultValue=false)]
        public DateTime? CommentDate { get; set; }

        /// <summary>
        /// True if the comment is at the top level, false if this comment is a child reply of another comment
        /// </summary>
        /// <value>True if the comment is at the top level, false if this comment is a child reply of another comment</value>
        [DataMember(Name="IsTopLevel", EmitDefaultValue=false)]
        public bool? IsTopLevel { get; set; }

        /// <summary>
        /// True if this comment is a reply to another comment, false otherwise
        /// </summary>
        /// <value>True if this comment is a reply to another comment, false otherwise</value>
        [DataMember(Name="IsReply", EmitDefaultValue=false)]
        public bool? IsReply { get; set; }

        /// <summary>
        /// Path to the parent of this comment, if this comment is a reply, otherwise this value will be null
        /// </summary>
        /// <value>Path to the parent of this comment, if this comment is a reply, otherwise this value will be null</value>
        [DataMember(Name="ParentCommentPath", EmitDefaultValue=false)]
        public string ParentCommentPath { get; set; }

        /// <summary>
        /// True if this comment is marked as Done in Word, otherwise it is false
        /// </summary>
        /// <value>True if this comment is marked as Done in Word, otherwise it is false</value>
        [DataMember(Name="Done", EmitDefaultValue=false)]
        public bool? Done { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxComment {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  AuthorInitials: ").Append(AuthorInitials).Append("\n");
            sb.Append("  CommentText: ").Append(CommentText).Append("\n");
            sb.Append("  CommentDate: ").Append(CommentDate).Append("\n");
            sb.Append("  IsTopLevel: ").Append(IsTopLevel).Append("\n");
            sb.Append("  IsReply: ").Append(IsReply).Append("\n");
            sb.Append("  ParentCommentPath: ").Append(ParentCommentPath).Append("\n");
            sb.Append("  Done: ").Append(Done).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxComment);
        }

        /// <summary>
        /// Returns true if DocxComment instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxComment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxComment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.AuthorInitials == input.AuthorInitials ||
                    (this.AuthorInitials != null &&
                    this.AuthorInitials.Equals(input.AuthorInitials))
                ) && 
                (
                    this.CommentText == input.CommentText ||
                    (this.CommentText != null &&
                    this.CommentText.Equals(input.CommentText))
                ) && 
                (
                    this.CommentDate == input.CommentDate ||
                    (this.CommentDate != null &&
                    this.CommentDate.Equals(input.CommentDate))
                ) && 
                (
                    this.IsTopLevel == input.IsTopLevel ||
                    (this.IsTopLevel != null &&
                    this.IsTopLevel.Equals(input.IsTopLevel))
                ) && 
                (
                    this.IsReply == input.IsReply ||
                    (this.IsReply != null &&
                    this.IsReply.Equals(input.IsReply))
                ) && 
                (
                    this.ParentCommentPath == input.ParentCommentPath ||
                    (this.ParentCommentPath != null &&
                    this.ParentCommentPath.Equals(input.ParentCommentPath))
                ) && 
                (
                    this.Done == input.Done ||
                    (this.Done != null &&
                    this.Done.Equals(input.Done))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.AuthorInitials != null)
                    hashCode = hashCode * 59 + this.AuthorInitials.GetHashCode();
                if (this.CommentText != null)
                    hashCode = hashCode * 59 + this.CommentText.GetHashCode();
                if (this.CommentDate != null)
                    hashCode = hashCode * 59 + this.CommentDate.GetHashCode();
                if (this.IsTopLevel != null)
                    hashCode = hashCode * 59 + this.IsTopLevel.GetHashCode();
                if (this.IsReply != null)
                    hashCode = hashCode * 59 + this.IsReply.GetHashCode();
                if (this.ParentCommentPath != null)
                    hashCode = hashCode * 59 + this.ParentCommentPath.GetHashCode();
                if (this.Done != null)
                    hashCode = hashCode * 59 + this.Done.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
