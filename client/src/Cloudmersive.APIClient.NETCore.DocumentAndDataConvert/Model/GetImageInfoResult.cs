/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Result of running a get-info operation on an image
    /// </summary>
    [DataContract]
    public partial class GetImageInfoResult :  IEquatable<GetImageInfoResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetImageInfoResult" /> class.
        /// </summary>
        /// <param name="successful">successful.</param>
        /// <param name="colorSpace">Color space of the image.</param>
        /// <param name="colorType">Color type of the image.</param>
        /// <param name="width">Width in pixels of the image.</param>
        /// <param name="height">Height in pixels of the image.</param>
        /// <param name="compressionLevel">Compression level value from 0 (lowest quality) to 100 (highest quality).</param>
        /// <param name="imageHashSignature">SHA256 hash signature of the image.</param>
        /// <param name="hasTransparency">True if the image contains transparency, otherwise false.</param>
        /// <param name="mimeType">MIME type of the image format.</param>
        /// <param name="imageFormat">Image format.</param>
        /// <param name="dPIUnit">Units of the DPI measurement; can be either in Inches or Centimeters.</param>
        /// <param name="dPI">DPI (pixels per unit, e.g. pixels per inch) of the image.</param>
        /// <param name="colorCount">Unique colors in the image.</param>
        /// <param name="bitDepth">Bit depth of the image.</param>
        /// <param name="comment">Comment string in the image.</param>
        /// <param name="exifProfileName">Name of the EXIF profile used.</param>
        /// <param name="exifValues">EXIF tags and values embedded in the image.</param>
        public GetImageInfoResult(bool? successful = default(bool?), string colorSpace = default(string), string colorType = default(string), int? width = default(int?), int? height = default(int?), int? compressionLevel = default(int?), string imageHashSignature = default(string), bool? hasTransparency = default(bool?), string mimeType = default(string), string imageFormat = default(string), string dPIUnit = default(string), double? dPI = default(double?), int? colorCount = default(int?), int? bitDepth = default(int?), string comment = default(string), string exifProfileName = default(string), List<ExifValue> exifValues = default(List<ExifValue>))
        {
            this.Successful = successful;
            this.ColorSpace = colorSpace;
            this.ColorType = colorType;
            this.Width = width;
            this.Height = height;
            this.CompressionLevel = compressionLevel;
            this.ImageHashSignature = imageHashSignature;
            this.HasTransparency = hasTransparency;
            this.MimeType = mimeType;
            this.ImageFormat = imageFormat;
            this.DPIUnit = dPIUnit;
            this.DPI = dPI;
            this.ColorCount = colorCount;
            this.BitDepth = bitDepth;
            this.Comment = comment;
            this.ExifProfileName = exifProfileName;
            this.ExifValues = exifValues;
        }
        
        /// <summary>
        /// Gets or Sets Successful
        /// </summary>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Color space of the image
        /// </summary>
        /// <value>Color space of the image</value>
        [DataMember(Name="ColorSpace", EmitDefaultValue=false)]
        public string ColorSpace { get; set; }

        /// <summary>
        /// Color type of the image
        /// </summary>
        /// <value>Color type of the image</value>
        [DataMember(Name="ColorType", EmitDefaultValue=false)]
        public string ColorType { get; set; }

        /// <summary>
        /// Width in pixels of the image
        /// </summary>
        /// <value>Width in pixels of the image</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Height in pixels of the image
        /// </summary>
        /// <value>Height in pixels of the image</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Compression level value from 0 (lowest quality) to 100 (highest quality)
        /// </summary>
        /// <value>Compression level value from 0 (lowest quality) to 100 (highest quality)</value>
        [DataMember(Name="CompressionLevel", EmitDefaultValue=false)]
        public int? CompressionLevel { get; set; }

        /// <summary>
        /// SHA256 hash signature of the image
        /// </summary>
        /// <value>SHA256 hash signature of the image</value>
        [DataMember(Name="ImageHashSignature", EmitDefaultValue=false)]
        public string ImageHashSignature { get; set; }

        /// <summary>
        /// True if the image contains transparency, otherwise false
        /// </summary>
        /// <value>True if the image contains transparency, otherwise false</value>
        [DataMember(Name="HasTransparency", EmitDefaultValue=false)]
        public bool? HasTransparency { get; set; }

        /// <summary>
        /// MIME type of the image format
        /// </summary>
        /// <value>MIME type of the image format</value>
        [DataMember(Name="MimeType", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Image format
        /// </summary>
        /// <value>Image format</value>
        [DataMember(Name="ImageFormat", EmitDefaultValue=false)]
        public string ImageFormat { get; set; }

        /// <summary>
        /// Units of the DPI measurement; can be either in Inches or Centimeters
        /// </summary>
        /// <value>Units of the DPI measurement; can be either in Inches or Centimeters</value>
        [DataMember(Name="DPIUnit", EmitDefaultValue=false)]
        public string DPIUnit { get; set; }

        /// <summary>
        /// DPI (pixels per unit, e.g. pixels per inch) of the image
        /// </summary>
        /// <value>DPI (pixels per unit, e.g. pixels per inch) of the image</value>
        [DataMember(Name="DPI", EmitDefaultValue=false)]
        public double? DPI { get; set; }

        /// <summary>
        /// Unique colors in the image
        /// </summary>
        /// <value>Unique colors in the image</value>
        [DataMember(Name="ColorCount", EmitDefaultValue=false)]
        public int? ColorCount { get; set; }

        /// <summary>
        /// Bit depth of the image
        /// </summary>
        /// <value>Bit depth of the image</value>
        [DataMember(Name="BitDepth", EmitDefaultValue=false)]
        public int? BitDepth { get; set; }

        /// <summary>
        /// Comment string in the image
        /// </summary>
        /// <value>Comment string in the image</value>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Name of the EXIF profile used
        /// </summary>
        /// <value>Name of the EXIF profile used</value>
        [DataMember(Name="ExifProfileName", EmitDefaultValue=false)]
        public string ExifProfileName { get; set; }

        /// <summary>
        /// EXIF tags and values embedded in the image
        /// </summary>
        /// <value>EXIF tags and values embedded in the image</value>
        [DataMember(Name="ExifValues", EmitDefaultValue=false)]
        public List<ExifValue> ExifValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetImageInfoResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  ColorType: ").Append(ColorType).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  CompressionLevel: ").Append(CompressionLevel).Append("\n");
            sb.Append("  ImageHashSignature: ").Append(ImageHashSignature).Append("\n");
            sb.Append("  HasTransparency: ").Append(HasTransparency).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  ImageFormat: ").Append(ImageFormat).Append("\n");
            sb.Append("  DPIUnit: ").Append(DPIUnit).Append("\n");
            sb.Append("  DPI: ").Append(DPI).Append("\n");
            sb.Append("  ColorCount: ").Append(ColorCount).Append("\n");
            sb.Append("  BitDepth: ").Append(BitDepth).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ExifProfileName: ").Append(ExifProfileName).Append("\n");
            sb.Append("  ExifValues: ").Append(ExifValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetImageInfoResult);
        }

        /// <summary>
        /// Returns true if GetImageInfoResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetImageInfoResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetImageInfoResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.ColorSpace == input.ColorSpace ||
                    (this.ColorSpace != null &&
                    this.ColorSpace.Equals(input.ColorSpace))
                ) && 
                (
                    this.ColorType == input.ColorType ||
                    (this.ColorType != null &&
                    this.ColorType.Equals(input.ColorType))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.CompressionLevel == input.CompressionLevel ||
                    (this.CompressionLevel != null &&
                    this.CompressionLevel.Equals(input.CompressionLevel))
                ) && 
                (
                    this.ImageHashSignature == input.ImageHashSignature ||
                    (this.ImageHashSignature != null &&
                    this.ImageHashSignature.Equals(input.ImageHashSignature))
                ) && 
                (
                    this.HasTransparency == input.HasTransparency ||
                    (this.HasTransparency != null &&
                    this.HasTransparency.Equals(input.HasTransparency))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.ImageFormat == input.ImageFormat ||
                    (this.ImageFormat != null &&
                    this.ImageFormat.Equals(input.ImageFormat))
                ) && 
                (
                    this.DPIUnit == input.DPIUnit ||
                    (this.DPIUnit != null &&
                    this.DPIUnit.Equals(input.DPIUnit))
                ) && 
                (
                    this.DPI == input.DPI ||
                    (this.DPI != null &&
                    this.DPI.Equals(input.DPI))
                ) && 
                (
                    this.ColorCount == input.ColorCount ||
                    (this.ColorCount != null &&
                    this.ColorCount.Equals(input.ColorCount))
                ) && 
                (
                    this.BitDepth == input.BitDepth ||
                    (this.BitDepth != null &&
                    this.BitDepth.Equals(input.BitDepth))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ExifProfileName == input.ExifProfileName ||
                    (this.ExifProfileName != null &&
                    this.ExifProfileName.Equals(input.ExifProfileName))
                ) && 
                (
                    this.ExifValues == input.ExifValues ||
                    this.ExifValues != null &&
                    this.ExifValues.SequenceEqual(input.ExifValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.ColorSpace != null)
                    hashCode = hashCode * 59 + this.ColorSpace.GetHashCode();
                if (this.ColorType != null)
                    hashCode = hashCode * 59 + this.ColorType.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.CompressionLevel != null)
                    hashCode = hashCode * 59 + this.CompressionLevel.GetHashCode();
                if (this.ImageHashSignature != null)
                    hashCode = hashCode * 59 + this.ImageHashSignature.GetHashCode();
                if (this.HasTransparency != null)
                    hashCode = hashCode * 59 + this.HasTransparency.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.ImageFormat != null)
                    hashCode = hashCode * 59 + this.ImageFormat.GetHashCode();
                if (this.DPIUnit != null)
                    hashCode = hashCode * 59 + this.DPIUnit.GetHashCode();
                if (this.DPI != null)
                    hashCode = hashCode * 59 + this.DPI.GetHashCode();
                if (this.ColorCount != null)
                    hashCode = hashCode * 59 + this.ColorCount.GetHashCode();
                if (this.BitDepth != null)
                    hashCode = hashCode * 59 + this.BitDepth.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ExifProfileName != null)
                    hashCode = hashCode * 59 + this.ExifProfileName.GetHashCode();
                if (this.ExifValues != null)
                    hashCode = hashCode * 59 + this.ExifValues.GetHashCode();
                return hashCode;
            }
        }
    }

}
