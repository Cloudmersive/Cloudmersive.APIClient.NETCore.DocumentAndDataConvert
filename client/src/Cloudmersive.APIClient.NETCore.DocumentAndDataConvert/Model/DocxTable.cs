/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// A table in a Word Document (DOCX) file
    /// </summary>
    [DataContract]
    public partial class DocxTable :  IEquatable<DocxTable>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxTable" /> class.
        /// </summary>
        /// <param name="tableID">The ID of the table; leave blank for new tables.</param>
        /// <param name="path">The Path of the location of this table object; leave blank for new tables.</param>
        /// <param name="width">The Width of the table, or 0 if not specified.</param>
        /// <param name="widthType">The Width configuration type of the table.</param>
        /// <param name="tableRows">Rows in the table; this is where the contents is located.</param>
        /// <param name="topBorderType">Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="topBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="topBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="topBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="bottomBorderType">Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="bottomBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="bottomBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="bottomBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="leftBorderType">Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="leftBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="leftBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="leftBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="rightBorderType">Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="rightBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="rightBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="rightBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="cellHorizontalBorderType">Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="cellHorizontalBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="cellHorizontalBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="cellHorizontalBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="cellVerticalBorderType">Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="cellVerticalBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="cellVerticalBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="cellVerticalBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="startBorderType">Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="startBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="startBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="startBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="endBorderType">Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave.</param>
        /// <param name="endBorderSize">Width of the border in points (1/72nd of an inch).</param>
        /// <param name="endBorderSpace">Spacing around the border in points (1/72nd of an inch).</param>
        /// <param name="endBorderColor">HTML-style color hex value (do not include a #).</param>
        /// <param name="tableIndentationMode">Table indentation type.</param>
        /// <param name="tableIndentationWidth">Table indentation width.</param>
        public DocxTable(string tableID = default(string), string path = default(string), string width = default(string), string widthType = default(string), List<DocxTableRow> tableRows = default(List<DocxTableRow>), string topBorderType = default(string), int? topBorderSize = default(int?), int? topBorderSpace = default(int?), string topBorderColor = default(string), string bottomBorderType = default(string), int? bottomBorderSize = default(int?), int? bottomBorderSpace = default(int?), string bottomBorderColor = default(string), string leftBorderType = default(string), int? leftBorderSize = default(int?), int? leftBorderSpace = default(int?), string leftBorderColor = default(string), string rightBorderType = default(string), int? rightBorderSize = default(int?), int? rightBorderSpace = default(int?), string rightBorderColor = default(string), string cellHorizontalBorderType = default(string), int? cellHorizontalBorderSize = default(int?), int? cellHorizontalBorderSpace = default(int?), string cellHorizontalBorderColor = default(string), string cellVerticalBorderType = default(string), int? cellVerticalBorderSize = default(int?), int? cellVerticalBorderSpace = default(int?), string cellVerticalBorderColor = default(string), string startBorderType = default(string), int? startBorderSize = default(int?), int? startBorderSpace = default(int?), string startBorderColor = default(string), string endBorderType = default(string), int? endBorderSize = default(int?), int? endBorderSpace = default(int?), string endBorderColor = default(string), string tableIndentationMode = default(string), int? tableIndentationWidth = default(int?))
        {
            this.TableID = tableID;
            this.Path = path;
            this.Width = width;
            this.WidthType = widthType;
            this.TableRows = tableRows;
            this.TopBorderType = topBorderType;
            this.TopBorderSize = topBorderSize;
            this.TopBorderSpace = topBorderSpace;
            this.TopBorderColor = topBorderColor;
            this.BottomBorderType = bottomBorderType;
            this.BottomBorderSize = bottomBorderSize;
            this.BottomBorderSpace = bottomBorderSpace;
            this.BottomBorderColor = bottomBorderColor;
            this.LeftBorderType = leftBorderType;
            this.LeftBorderSize = leftBorderSize;
            this.LeftBorderSpace = leftBorderSpace;
            this.LeftBorderColor = leftBorderColor;
            this.RightBorderType = rightBorderType;
            this.RightBorderSize = rightBorderSize;
            this.RightBorderSpace = rightBorderSpace;
            this.RightBorderColor = rightBorderColor;
            this.CellHorizontalBorderType = cellHorizontalBorderType;
            this.CellHorizontalBorderSize = cellHorizontalBorderSize;
            this.CellHorizontalBorderSpace = cellHorizontalBorderSpace;
            this.CellHorizontalBorderColor = cellHorizontalBorderColor;
            this.CellVerticalBorderType = cellVerticalBorderType;
            this.CellVerticalBorderSize = cellVerticalBorderSize;
            this.CellVerticalBorderSpace = cellVerticalBorderSpace;
            this.CellVerticalBorderColor = cellVerticalBorderColor;
            this.StartBorderType = startBorderType;
            this.StartBorderSize = startBorderSize;
            this.StartBorderSpace = startBorderSpace;
            this.StartBorderColor = startBorderColor;
            this.EndBorderType = endBorderType;
            this.EndBorderSize = endBorderSize;
            this.EndBorderSpace = endBorderSpace;
            this.EndBorderColor = endBorderColor;
            this.TableIndentationMode = tableIndentationMode;
            this.TableIndentationWidth = tableIndentationWidth;
        }
        
        /// <summary>
        /// The ID of the table; leave blank for new tables
        /// </summary>
        /// <value>The ID of the table; leave blank for new tables</value>
        [DataMember(Name="TableID", EmitDefaultValue=false)]
        public string TableID { get; set; }

        /// <summary>
        /// The Path of the location of this table object; leave blank for new tables
        /// </summary>
        /// <value>The Path of the location of this table object; leave blank for new tables</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// The Width of the table, or 0 if not specified
        /// </summary>
        /// <value>The Width of the table, or 0 if not specified</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// The Width configuration type of the table
        /// </summary>
        /// <value>The Width configuration type of the table</value>
        [DataMember(Name="WidthType", EmitDefaultValue=false)]
        public string WidthType { get; set; }

        /// <summary>
        /// Rows in the table; this is where the contents is located
        /// </summary>
        /// <value>Rows in the table; this is where the contents is located</value>
        [DataMember(Name="TableRows", EmitDefaultValue=false)]
        public List<DocxTableRow> TableRows { get; set; }

        /// <summary>
        /// Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="TopBorderType", EmitDefaultValue=false)]
        public string TopBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="TopBorderSize", EmitDefaultValue=false)]
        public int? TopBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="TopBorderSpace", EmitDefaultValue=false)]
        public int? TopBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="TopBorderColor", EmitDefaultValue=false)]
        public string TopBorderColor { get; set; }

        /// <summary>
        /// Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="BottomBorderType", EmitDefaultValue=false)]
        public string BottomBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="BottomBorderSize", EmitDefaultValue=false)]
        public int? BottomBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="BottomBorderSpace", EmitDefaultValue=false)]
        public int? BottomBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="BottomBorderColor", EmitDefaultValue=false)]
        public string BottomBorderColor { get; set; }

        /// <summary>
        /// Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="LeftBorderType", EmitDefaultValue=false)]
        public string LeftBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="LeftBorderSize", EmitDefaultValue=false)]
        public int? LeftBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="LeftBorderSpace", EmitDefaultValue=false)]
        public int? LeftBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="LeftBorderColor", EmitDefaultValue=false)]
        public string LeftBorderColor { get; set; }

        /// <summary>
        /// Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="RightBorderType", EmitDefaultValue=false)]
        public string RightBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="RightBorderSize", EmitDefaultValue=false)]
        public int? RightBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="RightBorderSpace", EmitDefaultValue=false)]
        public int? RightBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="RightBorderColor", EmitDefaultValue=false)]
        public string RightBorderColor { get; set; }

        /// <summary>
        /// Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="CellHorizontalBorderType", EmitDefaultValue=false)]
        public string CellHorizontalBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="CellHorizontalBorderSize", EmitDefaultValue=false)]
        public int? CellHorizontalBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="CellHorizontalBorderSpace", EmitDefaultValue=false)]
        public int? CellHorizontalBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="CellHorizontalBorderColor", EmitDefaultValue=false)]
        public string CellHorizontalBorderColor { get; set; }

        /// <summary>
        /// Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="CellVerticalBorderType", EmitDefaultValue=false)]
        public string CellVerticalBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="CellVerticalBorderSize", EmitDefaultValue=false)]
        public int? CellVerticalBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="CellVerticalBorderSpace", EmitDefaultValue=false)]
        public int? CellVerticalBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="CellVerticalBorderColor", EmitDefaultValue=false)]
        public string CellVerticalBorderColor { get; set; }

        /// <summary>
        /// Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="StartBorderType", EmitDefaultValue=false)]
        public string StartBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="StartBorderSize", EmitDefaultValue=false)]
        public int? StartBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="StartBorderSpace", EmitDefaultValue=false)]
        public int? StartBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="StartBorderColor", EmitDefaultValue=false)]
        public string StartBorderColor { get; set; }

        /// <summary>
        /// Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave
        /// </summary>
        /// <value>Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave</value>
        [DataMember(Name="EndBorderType", EmitDefaultValue=false)]
        public string EndBorderType { get; set; }

        /// <summary>
        /// Width of the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Width of the border in points (1/72nd of an inch)</value>
        [DataMember(Name="EndBorderSize", EmitDefaultValue=false)]
        public int? EndBorderSize { get; set; }

        /// <summary>
        /// Spacing around the border in points (1/72nd of an inch)
        /// </summary>
        /// <value>Spacing around the border in points (1/72nd of an inch)</value>
        [DataMember(Name="EndBorderSpace", EmitDefaultValue=false)]
        public int? EndBorderSpace { get; set; }

        /// <summary>
        /// HTML-style color hex value (do not include a #)
        /// </summary>
        /// <value>HTML-style color hex value (do not include a #)</value>
        [DataMember(Name="EndBorderColor", EmitDefaultValue=false)]
        public string EndBorderColor { get; set; }

        /// <summary>
        /// Table indentation type
        /// </summary>
        /// <value>Table indentation type</value>
        [DataMember(Name="TableIndentationMode", EmitDefaultValue=false)]
        public string TableIndentationMode { get; set; }

        /// <summary>
        /// Table indentation width
        /// </summary>
        /// <value>Table indentation width</value>
        [DataMember(Name="TableIndentationWidth", EmitDefaultValue=false)]
        public int? TableIndentationWidth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxTable {\n");
            sb.Append("  TableID: ").Append(TableID).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  WidthType: ").Append(WidthType).Append("\n");
            sb.Append("  TableRows: ").Append(TableRows).Append("\n");
            sb.Append("  TopBorderType: ").Append(TopBorderType).Append("\n");
            sb.Append("  TopBorderSize: ").Append(TopBorderSize).Append("\n");
            sb.Append("  TopBorderSpace: ").Append(TopBorderSpace).Append("\n");
            sb.Append("  TopBorderColor: ").Append(TopBorderColor).Append("\n");
            sb.Append("  BottomBorderType: ").Append(BottomBorderType).Append("\n");
            sb.Append("  BottomBorderSize: ").Append(BottomBorderSize).Append("\n");
            sb.Append("  BottomBorderSpace: ").Append(BottomBorderSpace).Append("\n");
            sb.Append("  BottomBorderColor: ").Append(BottomBorderColor).Append("\n");
            sb.Append("  LeftBorderType: ").Append(LeftBorderType).Append("\n");
            sb.Append("  LeftBorderSize: ").Append(LeftBorderSize).Append("\n");
            sb.Append("  LeftBorderSpace: ").Append(LeftBorderSpace).Append("\n");
            sb.Append("  LeftBorderColor: ").Append(LeftBorderColor).Append("\n");
            sb.Append("  RightBorderType: ").Append(RightBorderType).Append("\n");
            sb.Append("  RightBorderSize: ").Append(RightBorderSize).Append("\n");
            sb.Append("  RightBorderSpace: ").Append(RightBorderSpace).Append("\n");
            sb.Append("  RightBorderColor: ").Append(RightBorderColor).Append("\n");
            sb.Append("  CellHorizontalBorderType: ").Append(CellHorizontalBorderType).Append("\n");
            sb.Append("  CellHorizontalBorderSize: ").Append(CellHorizontalBorderSize).Append("\n");
            sb.Append("  CellHorizontalBorderSpace: ").Append(CellHorizontalBorderSpace).Append("\n");
            sb.Append("  CellHorizontalBorderColor: ").Append(CellHorizontalBorderColor).Append("\n");
            sb.Append("  CellVerticalBorderType: ").Append(CellVerticalBorderType).Append("\n");
            sb.Append("  CellVerticalBorderSize: ").Append(CellVerticalBorderSize).Append("\n");
            sb.Append("  CellVerticalBorderSpace: ").Append(CellVerticalBorderSpace).Append("\n");
            sb.Append("  CellVerticalBorderColor: ").Append(CellVerticalBorderColor).Append("\n");
            sb.Append("  StartBorderType: ").Append(StartBorderType).Append("\n");
            sb.Append("  StartBorderSize: ").Append(StartBorderSize).Append("\n");
            sb.Append("  StartBorderSpace: ").Append(StartBorderSpace).Append("\n");
            sb.Append("  StartBorderColor: ").Append(StartBorderColor).Append("\n");
            sb.Append("  EndBorderType: ").Append(EndBorderType).Append("\n");
            sb.Append("  EndBorderSize: ").Append(EndBorderSize).Append("\n");
            sb.Append("  EndBorderSpace: ").Append(EndBorderSpace).Append("\n");
            sb.Append("  EndBorderColor: ").Append(EndBorderColor).Append("\n");
            sb.Append("  TableIndentationMode: ").Append(TableIndentationMode).Append("\n");
            sb.Append("  TableIndentationWidth: ").Append(TableIndentationWidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxTable);
        }

        /// <summary>
        /// Returns true if DocxTable instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxTable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxTable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableID == input.TableID ||
                    (this.TableID != null &&
                    this.TableID.Equals(input.TableID))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.WidthType == input.WidthType ||
                    (this.WidthType != null &&
                    this.WidthType.Equals(input.WidthType))
                ) && 
                (
                    this.TableRows == input.TableRows ||
                    this.TableRows != null &&
                    this.TableRows.SequenceEqual(input.TableRows)
                ) && 
                (
                    this.TopBorderType == input.TopBorderType ||
                    (this.TopBorderType != null &&
                    this.TopBorderType.Equals(input.TopBorderType))
                ) && 
                (
                    this.TopBorderSize == input.TopBorderSize ||
                    (this.TopBorderSize != null &&
                    this.TopBorderSize.Equals(input.TopBorderSize))
                ) && 
                (
                    this.TopBorderSpace == input.TopBorderSpace ||
                    (this.TopBorderSpace != null &&
                    this.TopBorderSpace.Equals(input.TopBorderSpace))
                ) && 
                (
                    this.TopBorderColor == input.TopBorderColor ||
                    (this.TopBorderColor != null &&
                    this.TopBorderColor.Equals(input.TopBorderColor))
                ) && 
                (
                    this.BottomBorderType == input.BottomBorderType ||
                    (this.BottomBorderType != null &&
                    this.BottomBorderType.Equals(input.BottomBorderType))
                ) && 
                (
                    this.BottomBorderSize == input.BottomBorderSize ||
                    (this.BottomBorderSize != null &&
                    this.BottomBorderSize.Equals(input.BottomBorderSize))
                ) && 
                (
                    this.BottomBorderSpace == input.BottomBorderSpace ||
                    (this.BottomBorderSpace != null &&
                    this.BottomBorderSpace.Equals(input.BottomBorderSpace))
                ) && 
                (
                    this.BottomBorderColor == input.BottomBorderColor ||
                    (this.BottomBorderColor != null &&
                    this.BottomBorderColor.Equals(input.BottomBorderColor))
                ) && 
                (
                    this.LeftBorderType == input.LeftBorderType ||
                    (this.LeftBorderType != null &&
                    this.LeftBorderType.Equals(input.LeftBorderType))
                ) && 
                (
                    this.LeftBorderSize == input.LeftBorderSize ||
                    (this.LeftBorderSize != null &&
                    this.LeftBorderSize.Equals(input.LeftBorderSize))
                ) && 
                (
                    this.LeftBorderSpace == input.LeftBorderSpace ||
                    (this.LeftBorderSpace != null &&
                    this.LeftBorderSpace.Equals(input.LeftBorderSpace))
                ) && 
                (
                    this.LeftBorderColor == input.LeftBorderColor ||
                    (this.LeftBorderColor != null &&
                    this.LeftBorderColor.Equals(input.LeftBorderColor))
                ) && 
                (
                    this.RightBorderType == input.RightBorderType ||
                    (this.RightBorderType != null &&
                    this.RightBorderType.Equals(input.RightBorderType))
                ) && 
                (
                    this.RightBorderSize == input.RightBorderSize ||
                    (this.RightBorderSize != null &&
                    this.RightBorderSize.Equals(input.RightBorderSize))
                ) && 
                (
                    this.RightBorderSpace == input.RightBorderSpace ||
                    (this.RightBorderSpace != null &&
                    this.RightBorderSpace.Equals(input.RightBorderSpace))
                ) && 
                (
                    this.RightBorderColor == input.RightBorderColor ||
                    (this.RightBorderColor != null &&
                    this.RightBorderColor.Equals(input.RightBorderColor))
                ) && 
                (
                    this.CellHorizontalBorderType == input.CellHorizontalBorderType ||
                    (this.CellHorizontalBorderType != null &&
                    this.CellHorizontalBorderType.Equals(input.CellHorizontalBorderType))
                ) && 
                (
                    this.CellHorizontalBorderSize == input.CellHorizontalBorderSize ||
                    (this.CellHorizontalBorderSize != null &&
                    this.CellHorizontalBorderSize.Equals(input.CellHorizontalBorderSize))
                ) && 
                (
                    this.CellHorizontalBorderSpace == input.CellHorizontalBorderSpace ||
                    (this.CellHorizontalBorderSpace != null &&
                    this.CellHorizontalBorderSpace.Equals(input.CellHorizontalBorderSpace))
                ) && 
                (
                    this.CellHorizontalBorderColor == input.CellHorizontalBorderColor ||
                    (this.CellHorizontalBorderColor != null &&
                    this.CellHorizontalBorderColor.Equals(input.CellHorizontalBorderColor))
                ) && 
                (
                    this.CellVerticalBorderType == input.CellVerticalBorderType ||
                    (this.CellVerticalBorderType != null &&
                    this.CellVerticalBorderType.Equals(input.CellVerticalBorderType))
                ) && 
                (
                    this.CellVerticalBorderSize == input.CellVerticalBorderSize ||
                    (this.CellVerticalBorderSize != null &&
                    this.CellVerticalBorderSize.Equals(input.CellVerticalBorderSize))
                ) && 
                (
                    this.CellVerticalBorderSpace == input.CellVerticalBorderSpace ||
                    (this.CellVerticalBorderSpace != null &&
                    this.CellVerticalBorderSpace.Equals(input.CellVerticalBorderSpace))
                ) && 
                (
                    this.CellVerticalBorderColor == input.CellVerticalBorderColor ||
                    (this.CellVerticalBorderColor != null &&
                    this.CellVerticalBorderColor.Equals(input.CellVerticalBorderColor))
                ) && 
                (
                    this.StartBorderType == input.StartBorderType ||
                    (this.StartBorderType != null &&
                    this.StartBorderType.Equals(input.StartBorderType))
                ) && 
                (
                    this.StartBorderSize == input.StartBorderSize ||
                    (this.StartBorderSize != null &&
                    this.StartBorderSize.Equals(input.StartBorderSize))
                ) && 
                (
                    this.StartBorderSpace == input.StartBorderSpace ||
                    (this.StartBorderSpace != null &&
                    this.StartBorderSpace.Equals(input.StartBorderSpace))
                ) && 
                (
                    this.StartBorderColor == input.StartBorderColor ||
                    (this.StartBorderColor != null &&
                    this.StartBorderColor.Equals(input.StartBorderColor))
                ) && 
                (
                    this.EndBorderType == input.EndBorderType ||
                    (this.EndBorderType != null &&
                    this.EndBorderType.Equals(input.EndBorderType))
                ) && 
                (
                    this.EndBorderSize == input.EndBorderSize ||
                    (this.EndBorderSize != null &&
                    this.EndBorderSize.Equals(input.EndBorderSize))
                ) && 
                (
                    this.EndBorderSpace == input.EndBorderSpace ||
                    (this.EndBorderSpace != null &&
                    this.EndBorderSpace.Equals(input.EndBorderSpace))
                ) && 
                (
                    this.EndBorderColor == input.EndBorderColor ||
                    (this.EndBorderColor != null &&
                    this.EndBorderColor.Equals(input.EndBorderColor))
                ) && 
                (
                    this.TableIndentationMode == input.TableIndentationMode ||
                    (this.TableIndentationMode != null &&
                    this.TableIndentationMode.Equals(input.TableIndentationMode))
                ) && 
                (
                    this.TableIndentationWidth == input.TableIndentationWidth ||
                    (this.TableIndentationWidth != null &&
                    this.TableIndentationWidth.Equals(input.TableIndentationWidth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableID != null)
                    hashCode = hashCode * 59 + this.TableID.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.WidthType != null)
                    hashCode = hashCode * 59 + this.WidthType.GetHashCode();
                if (this.TableRows != null)
                    hashCode = hashCode * 59 + this.TableRows.GetHashCode();
                if (this.TopBorderType != null)
                    hashCode = hashCode * 59 + this.TopBorderType.GetHashCode();
                if (this.TopBorderSize != null)
                    hashCode = hashCode * 59 + this.TopBorderSize.GetHashCode();
                if (this.TopBorderSpace != null)
                    hashCode = hashCode * 59 + this.TopBorderSpace.GetHashCode();
                if (this.TopBorderColor != null)
                    hashCode = hashCode * 59 + this.TopBorderColor.GetHashCode();
                if (this.BottomBorderType != null)
                    hashCode = hashCode * 59 + this.BottomBorderType.GetHashCode();
                if (this.BottomBorderSize != null)
                    hashCode = hashCode * 59 + this.BottomBorderSize.GetHashCode();
                if (this.BottomBorderSpace != null)
                    hashCode = hashCode * 59 + this.BottomBorderSpace.GetHashCode();
                if (this.BottomBorderColor != null)
                    hashCode = hashCode * 59 + this.BottomBorderColor.GetHashCode();
                if (this.LeftBorderType != null)
                    hashCode = hashCode * 59 + this.LeftBorderType.GetHashCode();
                if (this.LeftBorderSize != null)
                    hashCode = hashCode * 59 + this.LeftBorderSize.GetHashCode();
                if (this.LeftBorderSpace != null)
                    hashCode = hashCode * 59 + this.LeftBorderSpace.GetHashCode();
                if (this.LeftBorderColor != null)
                    hashCode = hashCode * 59 + this.LeftBorderColor.GetHashCode();
                if (this.RightBorderType != null)
                    hashCode = hashCode * 59 + this.RightBorderType.GetHashCode();
                if (this.RightBorderSize != null)
                    hashCode = hashCode * 59 + this.RightBorderSize.GetHashCode();
                if (this.RightBorderSpace != null)
                    hashCode = hashCode * 59 + this.RightBorderSpace.GetHashCode();
                if (this.RightBorderColor != null)
                    hashCode = hashCode * 59 + this.RightBorderColor.GetHashCode();
                if (this.CellHorizontalBorderType != null)
                    hashCode = hashCode * 59 + this.CellHorizontalBorderType.GetHashCode();
                if (this.CellHorizontalBorderSize != null)
                    hashCode = hashCode * 59 + this.CellHorizontalBorderSize.GetHashCode();
                if (this.CellHorizontalBorderSpace != null)
                    hashCode = hashCode * 59 + this.CellHorizontalBorderSpace.GetHashCode();
                if (this.CellHorizontalBorderColor != null)
                    hashCode = hashCode * 59 + this.CellHorizontalBorderColor.GetHashCode();
                if (this.CellVerticalBorderType != null)
                    hashCode = hashCode * 59 + this.CellVerticalBorderType.GetHashCode();
                if (this.CellVerticalBorderSize != null)
                    hashCode = hashCode * 59 + this.CellVerticalBorderSize.GetHashCode();
                if (this.CellVerticalBorderSpace != null)
                    hashCode = hashCode * 59 + this.CellVerticalBorderSpace.GetHashCode();
                if (this.CellVerticalBorderColor != null)
                    hashCode = hashCode * 59 + this.CellVerticalBorderColor.GetHashCode();
                if (this.StartBorderType != null)
                    hashCode = hashCode * 59 + this.StartBorderType.GetHashCode();
                if (this.StartBorderSize != null)
                    hashCode = hashCode * 59 + this.StartBorderSize.GetHashCode();
                if (this.StartBorderSpace != null)
                    hashCode = hashCode * 59 + this.StartBorderSpace.GetHashCode();
                if (this.StartBorderColor != null)
                    hashCode = hashCode * 59 + this.StartBorderColor.GetHashCode();
                if (this.EndBorderType != null)
                    hashCode = hashCode * 59 + this.EndBorderType.GetHashCode();
                if (this.EndBorderSize != null)
                    hashCode = hashCode * 59 + this.EndBorderSize.GetHashCode();
                if (this.EndBorderSpace != null)
                    hashCode = hashCode * 59 + this.EndBorderSpace.GetHashCode();
                if (this.EndBorderColor != null)
                    hashCode = hashCode * 59 + this.EndBorderColor.GetHashCode();
                if (this.TableIndentationMode != null)
                    hashCode = hashCode * 59 + this.TableIndentationMode.GetHashCode();
                if (this.TableIndentationWidth != null)
                    hashCode = hashCode * 59 + this.TableIndentationWidth.GetHashCode();
                return hashCode;
            }
        }
    }

}
