/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Unit of text content in a Word Document (DOCX) file
    /// </summary>
    [DataContract]
    public partial class DocxText :  IEquatable<DocxText>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxText" /> class.
        /// </summary>
        /// <param name="textIndex">Index of the text content in the run; 0-based.</param>
        /// <param name="path">The Path of the location of this object; leave blank for new tables.</param>
        /// <param name="textContent">Text string containing the text content of this text content item.</param>
        public DocxText(int? textIndex = default(int?), string path = default(string), string textContent = default(string))
        {
            this.TextIndex = textIndex;
            this.Path = path;
            this.TextContent = textContent;
        }
        
        /// <summary>
        /// Index of the text content in the run; 0-based
        /// </summary>
        /// <value>Index of the text content in the run; 0-based</value>
        [DataMember(Name="TextIndex", EmitDefaultValue=false)]
        public int? TextIndex { get; set; }

        /// <summary>
        /// The Path of the location of this object; leave blank for new tables
        /// </summary>
        /// <value>The Path of the location of this object; leave blank for new tables</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Text string containing the text content of this text content item
        /// </summary>
        /// <value>Text string containing the text content of this text content item</value>
        [DataMember(Name="TextContent", EmitDefaultValue=false)]
        public string TextContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxText {\n");
            sb.Append("  TextIndex: ").Append(TextIndex).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  TextContent: ").Append(TextContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxText);
        }

        /// <summary>
        /// Returns true if DocxText instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxText input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextIndex == input.TextIndex ||
                    (this.TextIndex != null &&
                    this.TextIndex.Equals(input.TextIndex))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.TextContent == input.TextContent ||
                    (this.TextContent != null &&
                    this.TextContent.Equals(input.TextContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextIndex != null)
                    hashCode = hashCode * 59 + this.TextIndex.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.TextContent != null)
                    hashCode = hashCode * 59 + this.TextContent.GetHashCode();
                return hashCode;
            }
        }
    }

}
