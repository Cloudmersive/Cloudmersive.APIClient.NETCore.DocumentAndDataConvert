/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Single table fill request in a multi-table fill operation
    /// </summary>
    [DataContract]
    public partial class DocxTableSingleTableFill :  IEquatable<DocxTableSingleTableFill>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxTableSingleTableFill" /> class.
        /// </summary>
        /// <param name="tableStartTag">Start tag that delineates the beginning of the table.</param>
        /// <param name="tableEndTag">End tag that delineates the end of the table.</param>
        /// <param name="dataToFillIn">Data set to populate the table with.</param>
        public DocxTableSingleTableFill(string tableStartTag = default(string), string tableEndTag = default(string), List<DocxTableTableFillTableRow> dataToFillIn = default(List<DocxTableTableFillTableRow>))
        {
            this.TableStartTag = tableStartTag;
            this.TableEndTag = tableEndTag;
            this.DataToFillIn = dataToFillIn;
        }
        
        /// <summary>
        /// Start tag that delineates the beginning of the table
        /// </summary>
        /// <value>Start tag that delineates the beginning of the table</value>
        [DataMember(Name="TableStartTag", EmitDefaultValue=false)]
        public string TableStartTag { get; set; }

        /// <summary>
        /// End tag that delineates the end of the table
        /// </summary>
        /// <value>End tag that delineates the end of the table</value>
        [DataMember(Name="TableEndTag", EmitDefaultValue=false)]
        public string TableEndTag { get; set; }

        /// <summary>
        /// Data set to populate the table with
        /// </summary>
        /// <value>Data set to populate the table with</value>
        [DataMember(Name="DataToFillIn", EmitDefaultValue=false)]
        public List<DocxTableTableFillTableRow> DataToFillIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxTableSingleTableFill {\n");
            sb.Append("  TableStartTag: ").Append(TableStartTag).Append("\n");
            sb.Append("  TableEndTag: ").Append(TableEndTag).Append("\n");
            sb.Append("  DataToFillIn: ").Append(DataToFillIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxTableSingleTableFill);
        }

        /// <summary>
        /// Returns true if DocxTableSingleTableFill instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxTableSingleTableFill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxTableSingleTableFill input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableStartTag == input.TableStartTag ||
                    (this.TableStartTag != null &&
                    this.TableStartTag.Equals(input.TableStartTag))
                ) && 
                (
                    this.TableEndTag == input.TableEndTag ||
                    (this.TableEndTag != null &&
                    this.TableEndTag.Equals(input.TableEndTag))
                ) && 
                (
                    this.DataToFillIn == input.DataToFillIn ||
                    this.DataToFillIn != null &&
                    this.DataToFillIn.SequenceEqual(input.DataToFillIn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableStartTag != null)
                    hashCode = hashCode * 59 + this.TableStartTag.GetHashCode();
                if (this.TableEndTag != null)
                    hashCode = hashCode * 59 + this.TableEndTag.GetHashCode();
                if (this.DataToFillIn != null)
                    hashCode = hashCode * 59 + this.DataToFillIn.GetHashCode();
                return hashCode;
            }
        }
    }

}
