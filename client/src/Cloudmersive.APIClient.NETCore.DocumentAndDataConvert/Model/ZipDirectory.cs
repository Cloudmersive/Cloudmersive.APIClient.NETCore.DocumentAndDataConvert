/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Representation of a directory in a zip file
    /// </summary>
    [DataContract]
    public partial class ZipDirectory :  IEquatable<ZipDirectory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipDirectory" /> class.
        /// </summary>
        /// <param name="directoryName">Name of this directory.</param>
        /// <param name="directoriesInDirectory">Child directories contained directly in this directory.</param>
        /// <param name="filesInDirectory">Child files contained directly in this directory.</param>
        public ZipDirectory(string directoryName = default(string), List<ZipDirectory> directoriesInDirectory = default(List<ZipDirectory>), List<ZipFile> filesInDirectory = default(List<ZipFile>))
        {
            this.DirectoryName = directoryName;
            this.DirectoriesInDirectory = directoriesInDirectory;
            this.FilesInDirectory = filesInDirectory;
        }
        
        /// <summary>
        /// Name of this directory
        /// </summary>
        /// <value>Name of this directory</value>
        [DataMember(Name="DirectoryName", EmitDefaultValue=false)]
        public string DirectoryName { get; set; }

        /// <summary>
        /// Child directories contained directly in this directory
        /// </summary>
        /// <value>Child directories contained directly in this directory</value>
        [DataMember(Name="DirectoriesInDirectory", EmitDefaultValue=false)]
        public List<ZipDirectory> DirectoriesInDirectory { get; set; }

        /// <summary>
        /// Child files contained directly in this directory
        /// </summary>
        /// <value>Child files contained directly in this directory</value>
        [DataMember(Name="FilesInDirectory", EmitDefaultValue=false)]
        public List<ZipFile> FilesInDirectory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZipDirectory {\n");
            sb.Append("  DirectoryName: ").Append(DirectoryName).Append("\n");
            sb.Append("  DirectoriesInDirectory: ").Append(DirectoriesInDirectory).Append("\n");
            sb.Append("  FilesInDirectory: ").Append(FilesInDirectory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZipDirectory);
        }

        /// <summary>
        /// Returns true if ZipDirectory instances are equal
        /// </summary>
        /// <param name="input">Instance of ZipDirectory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZipDirectory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DirectoryName == input.DirectoryName ||
                    (this.DirectoryName != null &&
                    this.DirectoryName.Equals(input.DirectoryName))
                ) && 
                (
                    this.DirectoriesInDirectory == input.DirectoriesInDirectory ||
                    this.DirectoriesInDirectory != null &&
                    this.DirectoriesInDirectory.SequenceEqual(input.DirectoriesInDirectory)
                ) && 
                (
                    this.FilesInDirectory == input.FilesInDirectory ||
                    this.FilesInDirectory != null &&
                    this.FilesInDirectory.SequenceEqual(input.FilesInDirectory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DirectoryName != null)
                    hashCode = hashCode * 59 + this.DirectoryName.GetHashCode();
                if (this.DirectoriesInDirectory != null)
                    hashCode = hashCode * 59 + this.DirectoriesInDirectory.GetHashCode();
                if (this.FilesInDirectory != null)
                    hashCode = hashCode * 59 + this.FilesInDirectory.GetHashCode();
                return hashCode;
            }
        }
    }

}
