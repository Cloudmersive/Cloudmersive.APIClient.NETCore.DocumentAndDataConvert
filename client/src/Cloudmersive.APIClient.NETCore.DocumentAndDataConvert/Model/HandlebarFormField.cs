/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Instance of a form field that is handlebar style, such as \&quot;{{FieldName}}\&quot;
    /// </summary>
    [DataContract]
    public partial class HandlebarFormField :  IEquatable<HandlebarFormField>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HandlebarFormField" /> class.
        /// </summary>
        /// <param name="formFieldTitle">Title of the handlebar style form field, such as \&quot;FieldName\&quot; in the case of \&quot;{{FieldName}}\&quot;.</param>
        public HandlebarFormField(string formFieldTitle = default(string))
        {
            this.FormFieldTitle = formFieldTitle;
        }
        
        /// <summary>
        /// Title of the handlebar style form field, such as \&quot;FieldName\&quot; in the case of \&quot;{{FieldName}}\&quot;
        /// </summary>
        /// <value>Title of the handlebar style form field, such as \&quot;FieldName\&quot; in the case of \&quot;{{FieldName}}\&quot;</value>
        [DataMember(Name="FormFieldTitle", EmitDefaultValue=false)]
        public string FormFieldTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HandlebarFormField {\n");
            sb.Append("  FormFieldTitle: ").Append(FormFieldTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HandlebarFormField);
        }

        /// <summary>
        /// Returns true if HandlebarFormField instances are equal
        /// </summary>
        /// <param name="input">Instance of HandlebarFormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HandlebarFormField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormFieldTitle == input.FormFieldTitle ||
                    (this.FormFieldTitle != null &&
                    this.FormFieldTitle.Equals(input.FormFieldTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormFieldTitle != null)
                    hashCode = hashCode * 59 + this.FormFieldTitle.GetHashCode();
                return hashCode;
            }
        }
    }

}
