/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Input array of documents to be processed for a merge operation
    /// </summary>
    [DataContract]
    public partial class DocumentArrayInput :  IEquatable<DocumentArrayInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentArrayInput" /> class.
        /// </summary>
        /// <param name="documents">Array of document objects.</param>
        public DocumentArrayInput(List<DocumentItem> documents = default(List<DocumentItem>))
        {
            this.Documents = documents;
        }
        
        /// <summary>
        /// Array of document objects
        /// </summary>
        /// <value>Array of document objects</value>
        [DataMember(Name="Documents", EmitDefaultValue=false)]
        public List<DocumentItem> Documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentArrayInput {\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentArrayInput);
        }

        /// <summary>
        /// Returns true if DocumentArrayInput instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentArrayInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentArrayInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                return hashCode;
            }
        }
    }

}
