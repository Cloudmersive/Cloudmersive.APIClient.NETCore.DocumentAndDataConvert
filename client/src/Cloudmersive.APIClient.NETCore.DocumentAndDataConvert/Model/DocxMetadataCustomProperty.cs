/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Name and value pair for a custom-defined DOCX metadata property
    /// </summary>
    [DataContract]
    public partial class DocxMetadataCustomProperty :  IEquatable<DocxMetadataCustomProperty>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxMetadataCustomProperty" /> class.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="propertyDataType">Data type of the property; possible values are \&quot;string\&quot;, \&quot;integer\&quot;, \&quot;double\&quot; or \&quot;date\&quot;.</param>
        /// <param name="stringValue">If the property is of a string data type, then provides the string value if available.</param>
        /// <param name="integerValue">If the property is of a integer data type, then provides the integer value if available.</param>
        /// <param name="doubleValue">If the property is of a double floating point data type, then provides the double value if available.</param>
        /// <param name="dateValue">If the property is of a date time data type, then provides the date time value if available.</param>
        public DocxMetadataCustomProperty(string propertyName = default(string), string propertyDataType = default(string), string stringValue = default(string), long? integerValue = default(long?), double? doubleValue = default(double?), DateTime? dateValue = default(DateTime?))
        {
            this.PropertyName = propertyName;
            this.PropertyDataType = propertyDataType;
            this.StringValue = stringValue;
            this.IntegerValue = integerValue;
            this.DoubleValue = doubleValue;
            this.DateValue = dateValue;
        }
        
        /// <summary>
        /// Name of the property
        /// </summary>
        /// <value>Name of the property</value>
        [DataMember(Name="PropertyName", EmitDefaultValue=false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Data type of the property; possible values are \&quot;string\&quot;, \&quot;integer\&quot;, \&quot;double\&quot; or \&quot;date\&quot;
        /// </summary>
        /// <value>Data type of the property; possible values are \&quot;string\&quot;, \&quot;integer\&quot;, \&quot;double\&quot; or \&quot;date\&quot;</value>
        [DataMember(Name="PropertyDataType", EmitDefaultValue=false)]
        public string PropertyDataType { get; set; }

        /// <summary>
        /// If the property is of a string data type, then provides the string value if available
        /// </summary>
        /// <value>If the property is of a string data type, then provides the string value if available</value>
        [DataMember(Name="StringValue", EmitDefaultValue=false)]
        public string StringValue { get; set; }

        /// <summary>
        /// If the property is of a integer data type, then provides the integer value if available
        /// </summary>
        /// <value>If the property is of a integer data type, then provides the integer value if available</value>
        [DataMember(Name="IntegerValue", EmitDefaultValue=false)]
        public long? IntegerValue { get; set; }

        /// <summary>
        /// If the property is of a double floating point data type, then provides the double value if available
        /// </summary>
        /// <value>If the property is of a double floating point data type, then provides the double value if available</value>
        [DataMember(Name="DoubleValue", EmitDefaultValue=false)]
        public double? DoubleValue { get; set; }

        /// <summary>
        /// If the property is of a date time data type, then provides the date time value if available
        /// </summary>
        /// <value>If the property is of a date time data type, then provides the date time value if available</value>
        [DataMember(Name="DateValue", EmitDefaultValue=false)]
        public DateTime? DateValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxMetadataCustomProperty {\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyDataType: ").Append(PropertyDataType).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  IntegerValue: ").Append(IntegerValue).Append("\n");
            sb.Append("  DoubleValue: ").Append(DoubleValue).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxMetadataCustomProperty);
        }

        /// <summary>
        /// Returns true if DocxMetadataCustomProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxMetadataCustomProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxMetadataCustomProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.PropertyDataType == input.PropertyDataType ||
                    (this.PropertyDataType != null &&
                    this.PropertyDataType.Equals(input.PropertyDataType))
                ) && 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                ) && 
                (
                    this.IntegerValue == input.IntegerValue ||
                    (this.IntegerValue != null &&
                    this.IntegerValue.Equals(input.IntegerValue))
                ) && 
                (
                    this.DoubleValue == input.DoubleValue ||
                    (this.DoubleValue != null &&
                    this.DoubleValue.Equals(input.DoubleValue))
                ) && 
                (
                    this.DateValue == input.DateValue ||
                    (this.DateValue != null &&
                    this.DateValue.Equals(input.DateValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PropertyName != null)
                    hashCode = hashCode * 59 + this.PropertyName.GetHashCode();
                if (this.PropertyDataType != null)
                    hashCode = hashCode * 59 + this.PropertyDataType.GetHashCode();
                if (this.StringValue != null)
                    hashCode = hashCode * 59 + this.StringValue.GetHashCode();
                if (this.IntegerValue != null)
                    hashCode = hashCode * 59 + this.IntegerValue.GetHashCode();
                if (this.DoubleValue != null)
                    hashCode = hashCode * 59 + this.DoubleValue.GetHashCode();
                if (this.DateValue != null)
                    hashCode = hashCode * 59 + this.DateValue.GetHashCode();
                return hashCode;
            }
        }
    }

}
