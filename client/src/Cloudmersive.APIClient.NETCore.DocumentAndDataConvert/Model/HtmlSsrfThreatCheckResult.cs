/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// HTML SSRF validation result
    /// </summary>
    [DataContract]
    public partial class HtmlSsrfThreatCheckResult :  IEquatable<HtmlSsrfThreatCheckResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HtmlSsrfThreatCheckResult" /> class.
        /// </summary>
        /// <param name="isValid">True if the document is valid and has no errors, false otherwise.</param>
        /// <param name="isThreat">True if the document contains an SSRF threat, false otherwise.</param>
        /// <param name="threatLinks">Links found in the input HTML that contains threats.</param>
        public HtmlSsrfThreatCheckResult(bool? isValid = default(bool?), bool? isThreat = default(bool?), List<HtmlThreatLink> threatLinks = default(List<HtmlThreatLink>))
        {
            this.IsValid = isValid;
            this.IsThreat = isThreat;
            this.ThreatLinks = threatLinks;
        }
        
        /// <summary>
        /// True if the document is valid and has no errors, false otherwise
        /// </summary>
        /// <value>True if the document is valid and has no errors, false otherwise</value>
        [DataMember(Name="IsValid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// True if the document contains an SSRF threat, false otherwise
        /// </summary>
        /// <value>True if the document contains an SSRF threat, false otherwise</value>
        [DataMember(Name="IsThreat", EmitDefaultValue=false)]
        public bool? IsThreat { get; set; }

        /// <summary>
        /// Links found in the input HTML that contains threats
        /// </summary>
        /// <value>Links found in the input HTML that contains threats</value>
        [DataMember(Name="ThreatLinks", EmitDefaultValue=false)]
        public List<HtmlThreatLink> ThreatLinks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HtmlSsrfThreatCheckResult {\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  IsThreat: ").Append(IsThreat).Append("\n");
            sb.Append("  ThreatLinks: ").Append(ThreatLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HtmlSsrfThreatCheckResult);
        }

        /// <summary>
        /// Returns true if HtmlSsrfThreatCheckResult instances are equal
        /// </summary>
        /// <param name="input">Instance of HtmlSsrfThreatCheckResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HtmlSsrfThreatCheckResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.IsThreat == input.IsThreat ||
                    (this.IsThreat != null &&
                    this.IsThreat.Equals(input.IsThreat))
                ) && 
                (
                    this.ThreatLinks == input.ThreatLinks ||
                    this.ThreatLinks != null &&
                    this.ThreatLinks.SequenceEqual(input.ThreatLinks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsValid != null)
                    hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                if (this.IsThreat != null)
                    hashCode = hashCode * 59 + this.IsThreat.GetHashCode();
                if (this.ThreatLinks != null)
                    hashCode = hashCode * 59 + this.ThreatLinks.GetHashCode();
                return hashCode;
            }
        }
    }

}
