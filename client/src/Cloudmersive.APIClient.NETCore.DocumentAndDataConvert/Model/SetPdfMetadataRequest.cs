/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to set PDF metadata
    /// </summary>
    [DataContract]
    public partial class SetPdfMetadataRequest :  IEquatable<SetPdfMetadataRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetPdfMetadataRequest" /> class.
        /// </summary>
        /// <param name="inputFileBytes">Input file contents bytes for the file to modify.</param>
        /// <param name="metadataToSet">PDF metadata to set on the file.</param>
        public SetPdfMetadataRequest(byte[] inputFileBytes = default(byte[]), PdfMetadata metadataToSet = default(PdfMetadata))
        {
            this.InputFileBytes = inputFileBytes;
            this.MetadataToSet = metadataToSet;
        }
        
        /// <summary>
        /// Input file contents bytes for the file to modify
        /// </summary>
        /// <value>Input file contents bytes for the file to modify</value>
        [DataMember(Name="InputFileBytes", EmitDefaultValue=false)]
        public byte[] InputFileBytes { get; set; }

        /// <summary>
        /// PDF metadata to set on the file
        /// </summary>
        /// <value>PDF metadata to set on the file</value>
        [DataMember(Name="MetadataToSet", EmitDefaultValue=false)]
        public PdfMetadata MetadataToSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetPdfMetadataRequest {\n");
            sb.Append("  InputFileBytes: ").Append(InputFileBytes).Append("\n");
            sb.Append("  MetadataToSet: ").Append(MetadataToSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetPdfMetadataRequest);
        }

        /// <summary>
        /// Returns true if SetPdfMetadataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetPdfMetadataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetPdfMetadataRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFileBytes == input.InputFileBytes ||
                    (this.InputFileBytes != null &&
                    this.InputFileBytes.Equals(input.InputFileBytes))
                ) && 
                (
                    this.MetadataToSet == input.MetadataToSet ||
                    (this.MetadataToSet != null &&
                    this.MetadataToSet.Equals(input.MetadataToSet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFileBytes != null)
                    hashCode = hashCode * 59 + this.InputFileBytes.GetHashCode();
                if (this.MetadataToSet != null)
                    hashCode = hashCode * 59 + this.MetadataToSet.GetHashCode();
                return hashCode;
            }
        }
    }

}
