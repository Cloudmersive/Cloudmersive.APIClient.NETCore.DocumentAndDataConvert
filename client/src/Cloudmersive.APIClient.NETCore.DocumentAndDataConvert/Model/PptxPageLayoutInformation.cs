/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Result of getting the page layout information of a PowerPoint PPTX presentation
    /// </summary>
    [DataContract]
    public partial class PptxPageLayoutInformation :  IEquatable<PptxPageLayoutInformation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PptxPageLayoutInformation" /> class.
        /// </summary>
        /// <param name="successful">True if successful, false otherwise.</param>
        /// <param name="orientation">Orientation of the presentation, either portrait or landscape.</param>
        /// <param name="width">Width of the presentation in Emu, where 1 inch equals 914400 emu..</param>
        /// <param name="height">Height of the presentation in Emu, where 1 inch equals 914400 emu..</param>
        public PptxPageLayoutInformation(bool? successful = default(bool?), string orientation = default(string), int? width = default(int?), int? height = default(int?))
        {
            this.Successful = successful;
            this.Orientation = orientation;
            this.Width = width;
            this.Height = height;
        }
        
        /// <summary>
        /// True if successful, false otherwise
        /// </summary>
        /// <value>True if successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Orientation of the presentation, either portrait or landscape
        /// </summary>
        /// <value>Orientation of the presentation, either portrait or landscape</value>
        [DataMember(Name="Orientation", EmitDefaultValue=false)]
        public string Orientation { get; set; }

        /// <summary>
        /// Width of the presentation in Emu, where 1 inch equals 914400 emu.
        /// </summary>
        /// <value>Width of the presentation in Emu, where 1 inch equals 914400 emu.</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Height of the presentation in Emu, where 1 inch equals 914400 emu.
        /// </summary>
        /// <value>Height of the presentation in Emu, where 1 inch equals 914400 emu.</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PptxPageLayoutInformation {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PptxPageLayoutInformation);
        }

        /// <summary>
        /// Returns true if PptxPageLayoutInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of PptxPageLayoutInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PptxPageLayoutInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    (this.Orientation != null &&
                    this.Orientation.Equals(input.Orientation))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Orientation != null)
                    hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }
    }

}
