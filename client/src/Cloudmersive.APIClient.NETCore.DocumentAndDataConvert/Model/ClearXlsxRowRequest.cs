/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Input to a Clear-Row request
    /// </summary>
    [DataContract]
    public partial class ClearXlsxRowRequest :  IEquatable<ClearXlsxRowRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClearXlsxRowRequest" /> class.
        /// </summary>
        /// <param name="inputFileBytes">Optional: Bytes of the input file to operate on.</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="worksheetToEdit">Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet.</param>
        /// <param name="rowIndex">Required; Index for the desired row to be cleared.</param>
        public ClearXlsxRowRequest(byte[] inputFileBytes = default(byte[]), string inputFileUrl = default(string), XlsxWorksheet worksheetToEdit = default(XlsxWorksheet), int? rowIndex = default(int?))
        {
            this.InputFileBytes = inputFileBytes;
            this.InputFileUrl = inputFileUrl;
            this.WorksheetToEdit = worksheetToEdit;
            this.RowIndex = rowIndex;
        }
        
        /// <summary>
        /// Optional: Bytes of the input file to operate on
        /// </summary>
        /// <value>Optional: Bytes of the input file to operate on</value>
        [DataMember(Name="InputFileBytes", EmitDefaultValue=false)]
        public byte[] InputFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputFileUrl", EmitDefaultValue=false)]
        public string InputFileUrl { get; set; }

        /// <summary>
        /// Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet
        /// </summary>
        /// <value>Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet</value>
        [DataMember(Name="WorksheetToEdit", EmitDefaultValue=false)]
        public XlsxWorksheet WorksheetToEdit { get; set; }

        /// <summary>
        /// Required; Index for the desired row to be cleared
        /// </summary>
        /// <value>Required; Index for the desired row to be cleared</value>
        [DataMember(Name="RowIndex", EmitDefaultValue=false)]
        public int? RowIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClearXlsxRowRequest {\n");
            sb.Append("  InputFileBytes: ").Append(InputFileBytes).Append("\n");
            sb.Append("  InputFileUrl: ").Append(InputFileUrl).Append("\n");
            sb.Append("  WorksheetToEdit: ").Append(WorksheetToEdit).Append("\n");
            sb.Append("  RowIndex: ").Append(RowIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClearXlsxRowRequest);
        }

        /// <summary>
        /// Returns true if ClearXlsxRowRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClearXlsxRowRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClearXlsxRowRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFileBytes == input.InputFileBytes ||
                    (this.InputFileBytes != null &&
                    this.InputFileBytes.Equals(input.InputFileBytes))
                ) && 
                (
                    this.InputFileUrl == input.InputFileUrl ||
                    (this.InputFileUrl != null &&
                    this.InputFileUrl.Equals(input.InputFileUrl))
                ) && 
                (
                    this.WorksheetToEdit == input.WorksheetToEdit ||
                    (this.WorksheetToEdit != null &&
                    this.WorksheetToEdit.Equals(input.WorksheetToEdit))
                ) && 
                (
                    this.RowIndex == input.RowIndex ||
                    (this.RowIndex != null &&
                    this.RowIndex.Equals(input.RowIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFileBytes != null)
                    hashCode = hashCode * 59 + this.InputFileBytes.GetHashCode();
                if (this.InputFileUrl != null)
                    hashCode = hashCode * 59 + this.InputFileUrl.GetHashCode();
                if (this.WorksheetToEdit != null)
                    hashCode = hashCode * 59 + this.WorksheetToEdit.GetHashCode();
                if (this.RowIndex != null)
                    hashCode = hashCode * 59 + this.RowIndex.GetHashCode();
                return hashCode;
            }
        }
    }

}
