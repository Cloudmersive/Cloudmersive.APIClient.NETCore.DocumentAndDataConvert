/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to split a PowerPoint presentation
    /// </summary>
    [DataContract]
    public partial class PptxSplitAdvancedRequest :  IEquatable<PptxSplitAdvancedRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PptxSplitAdvancedRequest" /> class.
        /// </summary>
        /// <param name="inputFile">Input file.</param>
        /// <param name="slidesPerPresentation">Slides per presentation for result.</param>
        public PptxSplitAdvancedRequest(byte[] inputFile = default(byte[]), int? slidesPerPresentation = default(int?))
        {
            this.InputFile = inputFile;
            this.SlidesPerPresentation = slidesPerPresentation;
        }
        
        /// <summary>
        /// Input file
        /// </summary>
        /// <value>Input file</value>
        [DataMember(Name="InputFile", EmitDefaultValue=false)]
        public byte[] InputFile { get; set; }

        /// <summary>
        /// Slides per presentation for result
        /// </summary>
        /// <value>Slides per presentation for result</value>
        [DataMember(Name="SlidesPerPresentation", EmitDefaultValue=false)]
        public int? SlidesPerPresentation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PptxSplitAdvancedRequest {\n");
            sb.Append("  InputFile: ").Append(InputFile).Append("\n");
            sb.Append("  SlidesPerPresentation: ").Append(SlidesPerPresentation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PptxSplitAdvancedRequest);
        }

        /// <summary>
        /// Returns true if PptxSplitAdvancedRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PptxSplitAdvancedRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PptxSplitAdvancedRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFile == input.InputFile ||
                    (this.InputFile != null &&
                    this.InputFile.Equals(input.InputFile))
                ) && 
                (
                    this.SlidesPerPresentation == input.SlidesPerPresentation ||
                    (this.SlidesPerPresentation != null &&
                    this.SlidesPerPresentation.Equals(input.SlidesPerPresentation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFile != null)
                    hashCode = hashCode * 59 + this.InputFile.GetHashCode();
                if (this.SlidesPerPresentation != null)
                    hashCode = hashCode * 59 + this.SlidesPerPresentation.GetHashCode();
                return hashCode;
            }
        }
    }

}
