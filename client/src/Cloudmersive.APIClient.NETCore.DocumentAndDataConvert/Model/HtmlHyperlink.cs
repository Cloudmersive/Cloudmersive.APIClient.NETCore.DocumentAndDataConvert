/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Individual hyperlink in an HTML File
    /// </summary>
    [DataContract]
    public partial class HtmlHyperlink :  IEquatable<HtmlHyperlink>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HtmlHyperlink" /> class.
        /// </summary>
        /// <param name="anchortext">Anchor text of the hyperlink, e.g. Click Here.</param>
        /// <param name="url">URL of the hyperlink; fully-qualified if possible, otherwise relative.</param>
        public HtmlHyperlink(string anchortext = default(string), string url = default(string))
        {
            this.Anchortext = anchortext;
            this.Url = url;
        }
        
        /// <summary>
        /// Anchor text of the hyperlink, e.g. Click Here
        /// </summary>
        /// <value>Anchor text of the hyperlink, e.g. Click Here</value>
        [DataMember(Name="Anchortext", EmitDefaultValue=false)]
        public string Anchortext { get; set; }

        /// <summary>
        /// URL of the hyperlink; fully-qualified if possible, otherwise relative
        /// </summary>
        /// <value>URL of the hyperlink; fully-qualified if possible, otherwise relative</value>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HtmlHyperlink {\n");
            sb.Append("  Anchortext: ").Append(Anchortext).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HtmlHyperlink);
        }

        /// <summary>
        /// Returns true if HtmlHyperlink instances are equal
        /// </summary>
        /// <param name="input">Instance of HtmlHyperlink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HtmlHyperlink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Anchortext == input.Anchortext ||
                    (this.Anchortext != null &&
                    this.Anchortext.Equals(input.Anchortext))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Anchortext != null)
                    hashCode = hashCode * 59 + this.Anchortext.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }
    }

}
