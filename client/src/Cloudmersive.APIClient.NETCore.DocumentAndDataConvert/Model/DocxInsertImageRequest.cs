/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Input to set-footer command
    /// </summary>
    [DataContract]
    public partial class DocxInsertImageRequest :  IEquatable<DocxInsertImageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxInsertImageRequest" /> class.
        /// </summary>
        /// <param name="InputDocumentFileBytes">Optional: Bytes of the input file to operate on.</param>
        /// <param name="InputDocumentFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="InputImageFileBytes">Optional: Bytes of the input image file to operate on.</param>
        /// <param name="InputImageFileUrl">Optional: URL of an image file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="ImageWidth">Width in points of the image, set to 0 for default.</param>
        /// <param name="ImageHeight">Height in point of the image, set to 0 for default.</param>
        public DocxInsertImageRequest(byte[] InputDocumentFileBytes = default(byte[]), string InputDocumentFileUrl = default(string), byte[] InputImageFileBytes = default(byte[]), string InputImageFileUrl = default(string), long? ImageWidth = default(long?), long? ImageHeight = default(long?))
        {
            this.InputDocumentFileBytes = InputDocumentFileBytes;
            this.InputDocumentFileUrl = InputDocumentFileUrl;
            this.InputImageFileBytes = InputImageFileBytes;
            this.InputImageFileUrl = InputImageFileUrl;
            this.ImageWidth = ImageWidth;
            this.ImageHeight = ImageHeight;
        }
        
        /// <summary>
        /// Optional: Bytes of the input file to operate on
        /// </summary>
        /// <value>Optional: Bytes of the input file to operate on</value>
        [DataMember(Name="InputDocumentFileBytes", EmitDefaultValue=false)]
        public byte[] InputDocumentFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputDocumentFileUrl", EmitDefaultValue=false)]
        public string InputDocumentFileUrl { get; set; }

        /// <summary>
        /// Optional: Bytes of the input image file to operate on
        /// </summary>
        /// <value>Optional: Bytes of the input image file to operate on</value>
        [DataMember(Name="InputImageFileBytes", EmitDefaultValue=false)]
        public byte[] InputImageFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of an image file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of an image file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputImageFileUrl", EmitDefaultValue=false)]
        public string InputImageFileUrl { get; set; }

        /// <summary>
        /// Width in points of the image, set to 0 for default
        /// </summary>
        /// <value>Width in points of the image, set to 0 for default</value>
        [DataMember(Name="ImageWidth", EmitDefaultValue=false)]
        public long? ImageWidth { get; set; }

        /// <summary>
        /// Height in point of the image, set to 0 for default
        /// </summary>
        /// <value>Height in point of the image, set to 0 for default</value>
        [DataMember(Name="ImageHeight", EmitDefaultValue=false)]
        public long? ImageHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxInsertImageRequest {\n");
            sb.Append("  InputDocumentFileBytes: ").Append(InputDocumentFileBytes).Append("\n");
            sb.Append("  InputDocumentFileUrl: ").Append(InputDocumentFileUrl).Append("\n");
            sb.Append("  InputImageFileBytes: ").Append(InputImageFileBytes).Append("\n");
            sb.Append("  InputImageFileUrl: ").Append(InputImageFileUrl).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxInsertImageRequest);
        }

        /// <summary>
        /// Returns true if DocxInsertImageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxInsertImageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxInsertImageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputDocumentFileBytes == input.InputDocumentFileBytes ||
                    (this.InputDocumentFileBytes != null &&
                    this.InputDocumentFileBytes.Equals(input.InputDocumentFileBytes))
                ) && 
                (
                    this.InputDocumentFileUrl == input.InputDocumentFileUrl ||
                    (this.InputDocumentFileUrl != null &&
                    this.InputDocumentFileUrl.Equals(input.InputDocumentFileUrl))
                ) && 
                (
                    this.InputImageFileBytes == input.InputImageFileBytes ||
                    (this.InputImageFileBytes != null &&
                    this.InputImageFileBytes.Equals(input.InputImageFileBytes))
                ) && 
                (
                    this.InputImageFileUrl == input.InputImageFileUrl ||
                    (this.InputImageFileUrl != null &&
                    this.InputImageFileUrl.Equals(input.InputImageFileUrl))
                ) && 
                (
                    this.ImageWidth == input.ImageWidth ||
                    (this.ImageWidth != null &&
                    this.ImageWidth.Equals(input.ImageWidth))
                ) && 
                (
                    this.ImageHeight == input.ImageHeight ||
                    (this.ImageHeight != null &&
                    this.ImageHeight.Equals(input.ImageHeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputDocumentFileBytes != null)
                    hashCode = hashCode * 59 + this.InputDocumentFileBytes.GetHashCode();
                if (this.InputDocumentFileUrl != null)
                    hashCode = hashCode * 59 + this.InputDocumentFileUrl.GetHashCode();
                if (this.InputImageFileBytes != null)
                    hashCode = hashCode * 59 + this.InputImageFileBytes.GetHashCode();
                if (this.InputImageFileUrl != null)
                    hashCode = hashCode * 59 + this.InputImageFileUrl.GetHashCode();
                if (this.ImageWidth != null)
                    hashCode = hashCode * 59 + this.ImageWidth.GetHashCode();
                if (this.ImageHeight != null)
                    hashCode = hashCode * 59 + this.ImageHeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
