/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Input to set-footer command
    /// </summary>
    [DataContract]
    public partial class DocxInsertImageRequest :  IEquatable<DocxInsertImageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxInsertImageRequest" /> class.
        /// </summary>
        /// <param name="InputDocumentFileBytes">Optional: Bytes of the input file to operate on.</param>
        /// <param name="InputDocumentFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="InputImageFileBytes">Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd..</param>
        /// <param name="InputImageFileUrl">Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="ImageToAdd">Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl..</param>
        /// <param name="InsertPlacement">Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object).</param>
        /// <param name="InsertPath">Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject.</param>
        /// <param name="WidthInEMUs">Optional: The width of the image in EMUs.</param>
        /// <param name="HeightInEMUs">Optional: The height of the image in EMUs.</param>
        public DocxInsertImageRequest(byte[] InputDocumentFileBytes = default(byte[]), string InputDocumentFileUrl = default(string), byte[] InputImageFileBytes = default(byte[]), string InputImageFileUrl = default(string), DocxImage ImageToAdd = default(DocxImage), string InsertPlacement = default(string), string InsertPath = default(string), long? WidthInEMUs = default(long?), long? HeightInEMUs = default(long?))
        {
            this.InputDocumentFileBytes = InputDocumentFileBytes;
            this.InputDocumentFileUrl = InputDocumentFileUrl;
            this.InputImageFileBytes = InputImageFileBytes;
            this.InputImageFileUrl = InputImageFileUrl;
            this.ImageToAdd = ImageToAdd;
            this.InsertPlacement = InsertPlacement;
            this.InsertPath = InsertPath;
            this.WidthInEMUs = WidthInEMUs;
            this.HeightInEMUs = HeightInEMUs;
        }
        
        /// <summary>
        /// Optional: Bytes of the input file to operate on
        /// </summary>
        /// <value>Optional: Bytes of the input file to operate on</value>
        [DataMember(Name="InputDocumentFileBytes", EmitDefaultValue=false)]
        public byte[] InputDocumentFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputDocumentFileUrl", EmitDefaultValue=false)]
        public string InputDocumentFileUrl { get; set; }

        /// <summary>
        /// Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.
        /// </summary>
        /// <value>Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.</value>
        [DataMember(Name="InputImageFileBytes", EmitDefaultValue=false)]
        public byte[] InputImageFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputImageFileUrl", EmitDefaultValue=false)]
        public string InputImageFileUrl { get; set; }

        /// <summary>
        /// Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl.
        /// </summary>
        /// <value>Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl.</value>
        [DataMember(Name="ImageToAdd", EmitDefaultValue=false)]
        public DocxImage ImageToAdd { get; set; }

        /// <summary>
        /// Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)
        /// </summary>
        /// <value>Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)</value>
        [DataMember(Name="InsertPlacement", EmitDefaultValue=false)]
        public string InsertPlacement { get; set; }

        /// <summary>
        /// Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject
        /// </summary>
        /// <value>Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject</value>
        [DataMember(Name="InsertPath", EmitDefaultValue=false)]
        public string InsertPath { get; set; }

        /// <summary>
        /// Optional: The width of the image in EMUs
        /// </summary>
        /// <value>Optional: The width of the image in EMUs</value>
        [DataMember(Name="WidthInEMUs", EmitDefaultValue=false)]
        public long? WidthInEMUs { get; set; }

        /// <summary>
        /// Optional: The height of the image in EMUs
        /// </summary>
        /// <value>Optional: The height of the image in EMUs</value>
        [DataMember(Name="HeightInEMUs", EmitDefaultValue=false)]
        public long? HeightInEMUs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxInsertImageRequest {\n");
            sb.Append("  InputDocumentFileBytes: ").Append(InputDocumentFileBytes).Append("\n");
            sb.Append("  InputDocumentFileUrl: ").Append(InputDocumentFileUrl).Append("\n");
            sb.Append("  InputImageFileBytes: ").Append(InputImageFileBytes).Append("\n");
            sb.Append("  InputImageFileUrl: ").Append(InputImageFileUrl).Append("\n");
            sb.Append("  ImageToAdd: ").Append(ImageToAdd).Append("\n");
            sb.Append("  InsertPlacement: ").Append(InsertPlacement).Append("\n");
            sb.Append("  InsertPath: ").Append(InsertPath).Append("\n");
            sb.Append("  WidthInEMUs: ").Append(WidthInEMUs).Append("\n");
            sb.Append("  HeightInEMUs: ").Append(HeightInEMUs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxInsertImageRequest);
        }

        /// <summary>
        /// Returns true if DocxInsertImageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxInsertImageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxInsertImageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputDocumentFileBytes == input.InputDocumentFileBytes ||
                    (this.InputDocumentFileBytes != null &&
                    this.InputDocumentFileBytes.Equals(input.InputDocumentFileBytes))
                ) && 
                (
                    this.InputDocumentFileUrl == input.InputDocumentFileUrl ||
                    (this.InputDocumentFileUrl != null &&
                    this.InputDocumentFileUrl.Equals(input.InputDocumentFileUrl))
                ) && 
                (
                    this.InputImageFileBytes == input.InputImageFileBytes ||
                    (this.InputImageFileBytes != null &&
                    this.InputImageFileBytes.Equals(input.InputImageFileBytes))
                ) && 
                (
                    this.InputImageFileUrl == input.InputImageFileUrl ||
                    (this.InputImageFileUrl != null &&
                    this.InputImageFileUrl.Equals(input.InputImageFileUrl))
                ) && 
                (
                    this.ImageToAdd == input.ImageToAdd ||
                    (this.ImageToAdd != null &&
                    this.ImageToAdd.Equals(input.ImageToAdd))
                ) && 
                (
                    this.InsertPlacement == input.InsertPlacement ||
                    (this.InsertPlacement != null &&
                    this.InsertPlacement.Equals(input.InsertPlacement))
                ) && 
                (
                    this.InsertPath == input.InsertPath ||
                    (this.InsertPath != null &&
                    this.InsertPath.Equals(input.InsertPath))
                ) && 
                (
                    this.WidthInEMUs == input.WidthInEMUs ||
                    (this.WidthInEMUs != null &&
                    this.WidthInEMUs.Equals(input.WidthInEMUs))
                ) && 
                (
                    this.HeightInEMUs == input.HeightInEMUs ||
                    (this.HeightInEMUs != null &&
                    this.HeightInEMUs.Equals(input.HeightInEMUs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputDocumentFileBytes != null)
                    hashCode = hashCode * 59 + this.InputDocumentFileBytes.GetHashCode();
                if (this.InputDocumentFileUrl != null)
                    hashCode = hashCode * 59 + this.InputDocumentFileUrl.GetHashCode();
                if (this.InputImageFileBytes != null)
                    hashCode = hashCode * 59 + this.InputImageFileBytes.GetHashCode();
                if (this.InputImageFileUrl != null)
                    hashCode = hashCode * 59 + this.InputImageFileUrl.GetHashCode();
                if (this.ImageToAdd != null)
                    hashCode = hashCode * 59 + this.ImageToAdd.GetHashCode();
                if (this.InsertPlacement != null)
                    hashCode = hashCode * 59 + this.InsertPlacement.GetHashCode();
                if (this.InsertPath != null)
                    hashCode = hashCode * 59 + this.InsertPath.GetHashCode();
                if (this.WidthInEMUs != null)
                    hashCode = hashCode * 59 + this.WidthInEMUs.GetHashCode();
                if (this.HeightInEMUs != null)
                    hashCode = hashCode * 59 + this.HeightInEMUs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
