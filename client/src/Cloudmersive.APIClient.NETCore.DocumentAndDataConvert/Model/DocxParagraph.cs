/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// A paragraph in a Word Document (DOCX) file; there is where text, content and formatting are stored - similar to the paragraph tag in HTML
    /// </summary>
    [DataContract]
    public partial class DocxParagraph :  IEquatable<DocxParagraph>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxParagraph" /> class.
        /// </summary>
        /// <param name="ParagraphIndex">The index of the paragraph; 0-based.</param>
        /// <param name="ContentRuns">The content runs in the paragraph - this is where text is stored; similar to a span in HTML.</param>
        /// <param name="StyleID">Style ID of the style applied to the paragraph; null if no style is applied.</param>
        public DocxParagraph(int? ParagraphIndex = default(int?), List<DocxRun> ContentRuns = default(List<DocxRun>), string StyleID = default(string))
        {
            this.ParagraphIndex = ParagraphIndex;
            this.ContentRuns = ContentRuns;
            this.StyleID = StyleID;
        }
        
        /// <summary>
        /// The index of the paragraph; 0-based
        /// </summary>
        /// <value>The index of the paragraph; 0-based</value>
        [DataMember(Name="ParagraphIndex", EmitDefaultValue=false)]
        public int? ParagraphIndex { get; set; }

        /// <summary>
        /// The content runs in the paragraph - this is where text is stored; similar to a span in HTML
        /// </summary>
        /// <value>The content runs in the paragraph - this is where text is stored; similar to a span in HTML</value>
        [DataMember(Name="ContentRuns", EmitDefaultValue=false)]
        public List<DocxRun> ContentRuns { get; set; }

        /// <summary>
        /// Style ID of the style applied to the paragraph; null if no style is applied
        /// </summary>
        /// <value>Style ID of the style applied to the paragraph; null if no style is applied</value>
        [DataMember(Name="StyleID", EmitDefaultValue=false)]
        public string StyleID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxParagraph {\n");
            sb.Append("  ParagraphIndex: ").Append(ParagraphIndex).Append("\n");
            sb.Append("  ContentRuns: ").Append(ContentRuns).Append("\n");
            sb.Append("  StyleID: ").Append(StyleID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxParagraph);
        }

        /// <summary>
        /// Returns true if DocxParagraph instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxParagraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxParagraph input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParagraphIndex == input.ParagraphIndex ||
                    (this.ParagraphIndex != null &&
                    this.ParagraphIndex.Equals(input.ParagraphIndex))
                ) && 
                (
                    this.ContentRuns == input.ContentRuns ||
                    this.ContentRuns != null &&
                    this.ContentRuns.SequenceEqual(input.ContentRuns)
                ) && 
                (
                    this.StyleID == input.StyleID ||
                    (this.StyleID != null &&
                    this.StyleID.Equals(input.StyleID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParagraphIndex != null)
                    hashCode = hashCode * 59 + this.ParagraphIndex.GetHashCode();
                if (this.ContentRuns != null)
                    hashCode = hashCode * 59 + this.ContentRuns.GetHashCode();
                if (this.StyleID != null)
                    hashCode = hashCode * 59 + this.StyleID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
