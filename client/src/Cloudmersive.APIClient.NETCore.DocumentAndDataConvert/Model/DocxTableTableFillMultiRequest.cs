/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to update data in a table in a Word DOCX Document
    /// </summary>
    [DataContract]
    public partial class DocxTableTableFillMultiRequest :  IEquatable<DocxTableTableFillMultiRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxTableTableFillMultiRequest" /> class.
        /// </summary>
        /// <param name="inputFileUrl">Optional; Input URL of the document; use BeginEditing to create this.</param>
        /// <param name="inputFileData">Optional; Input Word Document file content for the operation.</param>
        /// <param name="tablesToFill">Tables and datasets to fill into the document.</param>
        public DocxTableTableFillMultiRequest(string inputFileUrl = default(string), byte[] inputFileData = default(byte[]), List<DocxTableSingleTableFill> tablesToFill = default(List<DocxTableSingleTableFill>))
        {
            this.InputFileUrl = inputFileUrl;
            this.InputFileData = inputFileData;
            this.TablesToFill = tablesToFill;
        }
        
        /// <summary>
        /// Optional; Input URL of the document; use BeginEditing to create this
        /// </summary>
        /// <value>Optional; Input URL of the document; use BeginEditing to create this</value>
        [DataMember(Name="InputFileUrl", EmitDefaultValue=false)]
        public string InputFileUrl { get; set; }

        /// <summary>
        /// Optional; Input Word Document file content for the operation
        /// </summary>
        /// <value>Optional; Input Word Document file content for the operation</value>
        [DataMember(Name="InputFileData", EmitDefaultValue=false)]
        public byte[] InputFileData { get; set; }

        /// <summary>
        /// Tables and datasets to fill into the document
        /// </summary>
        /// <value>Tables and datasets to fill into the document</value>
        [DataMember(Name="TablesToFill", EmitDefaultValue=false)]
        public List<DocxTableSingleTableFill> TablesToFill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxTableTableFillMultiRequest {\n");
            sb.Append("  InputFileUrl: ").Append(InputFileUrl).Append("\n");
            sb.Append("  InputFileData: ").Append(InputFileData).Append("\n");
            sb.Append("  TablesToFill: ").Append(TablesToFill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxTableTableFillMultiRequest);
        }

        /// <summary>
        /// Returns true if DocxTableTableFillMultiRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxTableTableFillMultiRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxTableTableFillMultiRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFileUrl == input.InputFileUrl ||
                    (this.InputFileUrl != null &&
                    this.InputFileUrl.Equals(input.InputFileUrl))
                ) && 
                (
                    this.InputFileData == input.InputFileData ||
                    (this.InputFileData != null &&
                    this.InputFileData.Equals(input.InputFileData))
                ) && 
                (
                    this.TablesToFill == input.TablesToFill ||
                    this.TablesToFill != null &&
                    this.TablesToFill.SequenceEqual(input.TablesToFill)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFileUrl != null)
                    hashCode = hashCode * 59 + this.InputFileUrl.GetHashCode();
                if (this.InputFileData != null)
                    hashCode = hashCode * 59 + this.InputFileData.GetHashCode();
                if (this.TablesToFill != null)
                    hashCode = hashCode * 59 + this.TablesToFill.GetHashCode();
                return hashCode;
            }
        }
    }

}
