/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to encrypt an existing Zip Archive file and protect it with a password
    /// </summary>
    [DataContract]
    public partial class ZipEncryptionAdvancedRequest :  IEquatable<ZipEncryptionAdvancedRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipEncryptionAdvancedRequest" /> class.
        /// </summary>
        /// <param name="inputFileContents">Input Zip File archive contents in bytes.</param>
        /// <param name="password">Password to place on the Zip file; the longer the password, the more secure.</param>
        /// <param name="encryptionAlgorithm">Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).  Default is AES-256..</param>
        public ZipEncryptionAdvancedRequest(byte[] inputFileContents = default(byte[]), string password = default(string), string encryptionAlgorithm = default(string))
        {
            this.InputFileContents = inputFileContents;
            this.Password = password;
            this.EncryptionAlgorithm = encryptionAlgorithm;
        }
        
        /// <summary>
        /// Input Zip File archive contents in bytes
        /// </summary>
        /// <value>Input Zip File archive contents in bytes</value>
        [DataMember(Name="InputFileContents", EmitDefaultValue=false)]
        public byte[] InputFileContents { get; set; }

        /// <summary>
        /// Password to place on the Zip file; the longer the password, the more secure
        /// </summary>
        /// <value>Password to place on the Zip file; the longer the password, the more secure</value>
        [DataMember(Name="Password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).  Default is AES-256.
        /// </summary>
        /// <value>Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).  Default is AES-256.</value>
        [DataMember(Name="EncryptionAlgorithm", EmitDefaultValue=false)]
        public string EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZipEncryptionAdvancedRequest {\n");
            sb.Append("  InputFileContents: ").Append(InputFileContents).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  EncryptionAlgorithm: ").Append(EncryptionAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZipEncryptionAdvancedRequest);
        }

        /// <summary>
        /// Returns true if ZipEncryptionAdvancedRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ZipEncryptionAdvancedRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZipEncryptionAdvancedRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFileContents == input.InputFileContents ||
                    (this.InputFileContents != null &&
                    this.InputFileContents.Equals(input.InputFileContents))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.EncryptionAlgorithm == input.EncryptionAlgorithm ||
                    (this.EncryptionAlgorithm != null &&
                    this.EncryptionAlgorithm.Equals(input.EncryptionAlgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFileContents != null)
                    hashCode = hashCode * 59 + this.InputFileContents.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.EncryptionAlgorithm != null)
                    hashCode = hashCode * 59 + this.EncryptionAlgorithm.GetHashCode();
                return hashCode;
            }
        }
    }

}
