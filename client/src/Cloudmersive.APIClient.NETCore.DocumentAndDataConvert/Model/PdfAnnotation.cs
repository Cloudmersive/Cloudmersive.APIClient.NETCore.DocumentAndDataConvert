/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// PDF Annotation details
    /// </summary>
    [DataContract]
    public partial class PdfAnnotation :  IEquatable<PdfAnnotation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfAnnotation" /> class.
        /// </summary>
        /// <param name="title">Title of the annotation; this is often the author of the annotation in Acrobat-created PDF files.</param>
        /// <param name="annotationType">Type of the annotation; possible values are Text.</param>
        /// <param name="pageNumber">The 1-based index of the page containing the annotation.</param>
        /// <param name="annotationIndex">The 0-based index of the annotation in the document.</param>
        /// <param name="subject">Subject of the annotation.</param>
        /// <param name="textContents">Text contents of the annotation.</param>
        /// <param name="creationDate">Date that the annotation was created.</param>
        /// <param name="modifiedDate">Date that the annotation was last modified.</param>
        /// <param name="leftX">Left X coordinate for the location of the annotation.</param>
        /// <param name="topY">Top Y coordination of the location of the annotation.</param>
        /// <param name="width">Width of the annotation.</param>
        /// <param name="height">Height of the annotation.</param>
        public PdfAnnotation(string title = default(string), string annotationType = default(string), int? pageNumber = default(int?), int? annotationIndex = default(int?), string subject = default(string), string textContents = default(string), DateTime? creationDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), double? leftX = default(double?), double? topY = default(double?), double? width = default(double?), double? height = default(double?))
        {
            this.Title = title;
            this.AnnotationType = annotationType;
            this.PageNumber = pageNumber;
            this.AnnotationIndex = annotationIndex;
            this.Subject = subject;
            this.TextContents = textContents;
            this.CreationDate = creationDate;
            this.ModifiedDate = modifiedDate;
            this.LeftX = leftX;
            this.TopY = topY;
            this.Width = width;
            this.Height = height;
        }
        
        /// <summary>
        /// Title of the annotation; this is often the author of the annotation in Acrobat-created PDF files
        /// </summary>
        /// <value>Title of the annotation; this is often the author of the annotation in Acrobat-created PDF files</value>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Type of the annotation; possible values are Text
        /// </summary>
        /// <value>Type of the annotation; possible values are Text</value>
        [DataMember(Name="AnnotationType", EmitDefaultValue=false)]
        public string AnnotationType { get; set; }

        /// <summary>
        /// The 1-based index of the page containing the annotation
        /// </summary>
        /// <value>The 1-based index of the page containing the annotation</value>
        [DataMember(Name="PageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// The 0-based index of the annotation in the document
        /// </summary>
        /// <value>The 0-based index of the annotation in the document</value>
        [DataMember(Name="AnnotationIndex", EmitDefaultValue=false)]
        public int? AnnotationIndex { get; set; }

        /// <summary>
        /// Subject of the annotation
        /// </summary>
        /// <value>Subject of the annotation</value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Text contents of the annotation
        /// </summary>
        /// <value>Text contents of the annotation</value>
        [DataMember(Name="TextContents", EmitDefaultValue=false)]
        public string TextContents { get; set; }

        /// <summary>
        /// Date that the annotation was created
        /// </summary>
        /// <value>Date that the annotation was created</value>
        [DataMember(Name="CreationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Date that the annotation was last modified
        /// </summary>
        /// <value>Date that the annotation was last modified</value>
        [DataMember(Name="ModifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Left X coordinate for the location of the annotation
        /// </summary>
        /// <value>Left X coordinate for the location of the annotation</value>
        [DataMember(Name="LeftX", EmitDefaultValue=false)]
        public double? LeftX { get; set; }

        /// <summary>
        /// Top Y coordination of the location of the annotation
        /// </summary>
        /// <value>Top Y coordination of the location of the annotation</value>
        [DataMember(Name="TopY", EmitDefaultValue=false)]
        public double? TopY { get; set; }

        /// <summary>
        /// Width of the annotation
        /// </summary>
        /// <value>Width of the annotation</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// Height of the annotation
        /// </summary>
        /// <value>Height of the annotation</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public double? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PdfAnnotation {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AnnotationType: ").Append(AnnotationType).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  AnnotationIndex: ").Append(AnnotationIndex).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TextContents: ").Append(TextContents).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  LeftX: ").Append(LeftX).Append("\n");
            sb.Append("  TopY: ").Append(TopY).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PdfAnnotation);
        }

        /// <summary>
        /// Returns true if PdfAnnotation instances are equal
        /// </summary>
        /// <param name="input">Instance of PdfAnnotation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PdfAnnotation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.AnnotationType == input.AnnotationType ||
                    (this.AnnotationType != null &&
                    this.AnnotationType.Equals(input.AnnotationType))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.AnnotationIndex == input.AnnotationIndex ||
                    (this.AnnotationIndex != null &&
                    this.AnnotationIndex.Equals(input.AnnotationIndex))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TextContents == input.TextContents ||
                    (this.TextContents != null &&
                    this.TextContents.Equals(input.TextContents))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.LeftX == input.LeftX ||
                    (this.LeftX != null &&
                    this.LeftX.Equals(input.LeftX))
                ) && 
                (
                    this.TopY == input.TopY ||
                    (this.TopY != null &&
                    this.TopY.Equals(input.TopY))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.AnnotationType != null)
                    hashCode = hashCode * 59 + this.AnnotationType.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.AnnotationIndex != null)
                    hashCode = hashCode * 59 + this.AnnotationIndex.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TextContents != null)
                    hashCode = hashCode * 59 + this.TextContents.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.LeftX != null)
                    hashCode = hashCode * 59 + this.LeftX.GetHashCode();
                if (this.TopY != null)
                    hashCode = hashCode * 59 + this.TopY.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }
    }

}
