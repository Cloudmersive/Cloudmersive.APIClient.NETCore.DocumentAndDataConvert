/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Details of the HTML to PDF request
    /// </summary>
    [DataContract]
    public partial class HtmlToPdfRequest :  IEquatable<HtmlToPdfRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HtmlToPdfRequest" /> class.
        /// </summary>
        /// <param name="html">HTML to render to PDF.</param>
        /// <param name="extraLoadingWait">Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds)..</param>
        /// <param name="includeBackgroundGraphics">Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true..</param>
        /// <param name="scaleFactor">Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%..</param>
        public HtmlToPdfRequest(string html = default(string), int? extraLoadingWait = default(int?), bool? includeBackgroundGraphics = default(bool?), int? scaleFactor = default(int?))
        {
            this.Html = html;
            this.ExtraLoadingWait = extraLoadingWait;
            this.IncludeBackgroundGraphics = includeBackgroundGraphics;
            this.ScaleFactor = scaleFactor;
        }
        
        /// <summary>
        /// HTML to render to PDF
        /// </summary>
        /// <value>HTML to render to PDF</value>
        [DataMember(Name="Html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).
        /// </summary>
        /// <value>Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).</value>
        [DataMember(Name="ExtraLoadingWait", EmitDefaultValue=false)]
        public int? ExtraLoadingWait { get; set; }

        /// <summary>
        /// Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.
        /// </summary>
        /// <value>Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.</value>
        [DataMember(Name="IncludeBackgroundGraphics", EmitDefaultValue=false)]
        public bool? IncludeBackgroundGraphics { get; set; }

        /// <summary>
        /// Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.
        /// </summary>
        /// <value>Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.</value>
        [DataMember(Name="ScaleFactor", EmitDefaultValue=false)]
        public int? ScaleFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HtmlToPdfRequest {\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  ExtraLoadingWait: ").Append(ExtraLoadingWait).Append("\n");
            sb.Append("  IncludeBackgroundGraphics: ").Append(IncludeBackgroundGraphics).Append("\n");
            sb.Append("  ScaleFactor: ").Append(ScaleFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HtmlToPdfRequest);
        }

        /// <summary>
        /// Returns true if HtmlToPdfRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HtmlToPdfRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HtmlToPdfRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.ExtraLoadingWait == input.ExtraLoadingWait ||
                    (this.ExtraLoadingWait != null &&
                    this.ExtraLoadingWait.Equals(input.ExtraLoadingWait))
                ) && 
                (
                    this.IncludeBackgroundGraphics == input.IncludeBackgroundGraphics ||
                    (this.IncludeBackgroundGraphics != null &&
                    this.IncludeBackgroundGraphics.Equals(input.IncludeBackgroundGraphics))
                ) && 
                (
                    this.ScaleFactor == input.ScaleFactor ||
                    (this.ScaleFactor != null &&
                    this.ScaleFactor.Equals(input.ScaleFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.ExtraLoadingWait != null)
                    hashCode = hashCode * 59 + this.ExtraLoadingWait.GetHashCode();
                if (this.IncludeBackgroundGraphics != null)
                    hashCode = hashCode * 59 + this.IncludeBackgroundGraphics.GetHashCode();
                if (this.ScaleFactor != null)
                    hashCode = hashCode * 59 + this.ScaleFactor.GetHashCode();
                return hashCode;
            }
        }
    }

}
