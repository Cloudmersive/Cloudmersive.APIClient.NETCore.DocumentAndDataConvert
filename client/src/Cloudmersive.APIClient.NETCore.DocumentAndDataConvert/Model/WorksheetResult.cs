/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// A single Excel XLSX file corresponding to one worksheet (tab) in the original spreadsheet
    /// </summary>
    [DataContract]
    public partial class WorksheetResult :  IEquatable<WorksheetResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorksheetResult" /> class.
        /// </summary>
        /// <param name="WorksheetNumber">Worksheet number of the converted page, starting with 1 for the left-most worksheet.</param>
        /// <param name="WorksheetName">The name of the worksheet.</param>
        /// <param name="URL">URL to the XLSX file of this worksheet; file is stored in an in-memory cache and will be deleted.</param>
        public WorksheetResult(int? WorksheetNumber = default(int?), string WorksheetName = default(string), string URL = default(string))
        {
            this.WorksheetNumber = WorksheetNumber;
            this.WorksheetName = WorksheetName;
            this.URL = URL;
        }
        
        /// <summary>
        /// Worksheet number of the converted page, starting with 1 for the left-most worksheet
        /// </summary>
        /// <value>Worksheet number of the converted page, starting with 1 for the left-most worksheet</value>
        [DataMember(Name="WorksheetNumber", EmitDefaultValue=false)]
        public int? WorksheetNumber { get; set; }

        /// <summary>
        /// The name of the worksheet
        /// </summary>
        /// <value>The name of the worksheet</value>
        [DataMember(Name="WorksheetName", EmitDefaultValue=false)]
        public string WorksheetName { get; set; }

        /// <summary>
        /// URL to the XLSX file of this worksheet; file is stored in an in-memory cache and will be deleted
        /// </summary>
        /// <value>URL to the XLSX file of this worksheet; file is stored in an in-memory cache and will be deleted</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorksheetResult {\n");
            sb.Append("  WorksheetNumber: ").Append(WorksheetNumber).Append("\n");
            sb.Append("  WorksheetName: ").Append(WorksheetName).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorksheetResult);
        }

        /// <summary>
        /// Returns true if WorksheetResult instances are equal
        /// </summary>
        /// <param name="input">Instance of WorksheetResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorksheetResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WorksheetNumber == input.WorksheetNumber ||
                    (this.WorksheetNumber != null &&
                    this.WorksheetNumber.Equals(input.WorksheetNumber))
                ) && 
                (
                    this.WorksheetName == input.WorksheetName ||
                    (this.WorksheetName != null &&
                    this.WorksheetName.Equals(input.WorksheetName))
                ) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorksheetNumber != null)
                    hashCode = hashCode * 59 + this.WorksheetNumber.GetHashCode();
                if (this.WorksheetName != null)
                    hashCode = hashCode * 59 + this.WorksheetName.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
