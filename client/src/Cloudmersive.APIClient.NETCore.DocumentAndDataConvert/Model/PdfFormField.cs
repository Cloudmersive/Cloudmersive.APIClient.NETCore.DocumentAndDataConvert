/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Field definition and value in the form
    /// </summary>
    [DataContract]
    public partial class PdfFormField :  IEquatable<PdfFormField>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfFormField" /> class.
        /// </summary>
        /// <param name="fieldName">Name of the form field.</param>
        /// <param name="fieldType">The data type of the field; possible values are Text (FieldValue will be a string), Checkbox (FieldValue can be \&quot;true\&quot; or \&quot;false\&quot;), ComboBox (FieldComboBoxSelectedIndex will also be populated), Other.</param>
        /// <param name="fieldValue">Value of the form field.</param>
        /// <param name="fieldComboBoxSelectedIndex">Applies to ComboBox field types only; specifies the selected index of the combo box selection if available.</param>
        public PdfFormField(string fieldName = default(string), string fieldType = default(string), string fieldValue = default(string), int? fieldComboBoxSelectedIndex = default(int?))
        {
            this.FieldName = fieldName;
            this.FieldType = fieldType;
            this.FieldValue = fieldValue;
            this.FieldComboBoxSelectedIndex = fieldComboBoxSelectedIndex;
        }
        
        /// <summary>
        /// Name of the form field
        /// </summary>
        /// <value>Name of the form field</value>
        [DataMember(Name="FieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// The data type of the field; possible values are Text (FieldValue will be a string), Checkbox (FieldValue can be \&quot;true\&quot; or \&quot;false\&quot;), ComboBox (FieldComboBoxSelectedIndex will also be populated), Other
        /// </summary>
        /// <value>The data type of the field; possible values are Text (FieldValue will be a string), Checkbox (FieldValue can be \&quot;true\&quot; or \&quot;false\&quot;), ComboBox (FieldComboBoxSelectedIndex will also be populated), Other</value>
        [DataMember(Name="FieldType", EmitDefaultValue=false)]
        public string FieldType { get; set; }

        /// <summary>
        /// Value of the form field
        /// </summary>
        /// <value>Value of the form field</value>
        [DataMember(Name="FieldValue", EmitDefaultValue=false)]
        public string FieldValue { get; set; }

        /// <summary>
        /// Applies to ComboBox field types only; specifies the selected index of the combo box selection if available
        /// </summary>
        /// <value>Applies to ComboBox field types only; specifies the selected index of the combo box selection if available</value>
        [DataMember(Name="FieldComboBoxSelectedIndex", EmitDefaultValue=false)]
        public int? FieldComboBoxSelectedIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PdfFormField {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("  FieldComboBoxSelectedIndex: ").Append(FieldComboBoxSelectedIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PdfFormField);
        }

        /// <summary>
        /// Returns true if PdfFormField instances are equal
        /// </summary>
        /// <param name="input">Instance of PdfFormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PdfFormField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.FieldValue == input.FieldValue ||
                    (this.FieldValue != null &&
                    this.FieldValue.Equals(input.FieldValue))
                ) && 
                (
                    this.FieldComboBoxSelectedIndex == input.FieldComboBoxSelectedIndex ||
                    (this.FieldComboBoxSelectedIndex != null &&
                    this.FieldComboBoxSelectedIndex.Equals(input.FieldComboBoxSelectedIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.FieldValue != null)
                    hashCode = hashCode * 59 + this.FieldValue.GetHashCode();
                if (this.FieldComboBoxSelectedIndex != null)
                    hashCode = hashCode * 59 + this.FieldComboBoxSelectedIndex.GetHashCode();
                return hashCode;
            }
        }
    }

}
