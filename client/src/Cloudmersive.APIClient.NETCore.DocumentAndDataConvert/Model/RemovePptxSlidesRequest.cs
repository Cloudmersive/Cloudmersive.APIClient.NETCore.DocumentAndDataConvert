/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Input to a Remove PowerPoint PPTX Presentation Slides request
    /// </summary>
    [DataContract]
    public partial class RemovePptxSlidesRequest :  IEquatable<RemovePptxSlidesRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemovePptxSlidesRequest" /> class.
        /// </summary>
        /// <param name="inputFileBytes">Optional: Bytes of the input file to operate on.</param>
        /// <param name="inputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="startDeleteSlideNumber">Slide number (1-based) to start deleting slides; inclusive.</param>
        /// <param name="endDeleteSlideNumber">Slide number (1-based) to stop deleting slides; inclusive.</param>
        public RemovePptxSlidesRequest(byte[] inputFileBytes = default(byte[]), string inputFileUrl = default(string), int? startDeleteSlideNumber = default(int?), int? endDeleteSlideNumber = default(int?))
        {
            this.InputFileBytes = inputFileBytes;
            this.InputFileUrl = inputFileUrl;
            this.StartDeleteSlideNumber = startDeleteSlideNumber;
            this.EndDeleteSlideNumber = endDeleteSlideNumber;
        }
        
        /// <summary>
        /// Optional: Bytes of the input file to operate on
        /// </summary>
        /// <value>Optional: Bytes of the input file to operate on</value>
        [DataMember(Name="InputFileBytes", EmitDefaultValue=false)]
        public byte[] InputFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputFileUrl", EmitDefaultValue=false)]
        public string InputFileUrl { get; set; }

        /// <summary>
        /// Slide number (1-based) to start deleting slides; inclusive
        /// </summary>
        /// <value>Slide number (1-based) to start deleting slides; inclusive</value>
        [DataMember(Name="StartDeleteSlideNumber", EmitDefaultValue=false)]
        public int? StartDeleteSlideNumber { get; set; }

        /// <summary>
        /// Slide number (1-based) to stop deleting slides; inclusive
        /// </summary>
        /// <value>Slide number (1-based) to stop deleting slides; inclusive</value>
        [DataMember(Name="EndDeleteSlideNumber", EmitDefaultValue=false)]
        public int? EndDeleteSlideNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemovePptxSlidesRequest {\n");
            sb.Append("  InputFileBytes: ").Append(InputFileBytes).Append("\n");
            sb.Append("  InputFileUrl: ").Append(InputFileUrl).Append("\n");
            sb.Append("  StartDeleteSlideNumber: ").Append(StartDeleteSlideNumber).Append("\n");
            sb.Append("  EndDeleteSlideNumber: ").Append(EndDeleteSlideNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemovePptxSlidesRequest);
        }

        /// <summary>
        /// Returns true if RemovePptxSlidesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RemovePptxSlidesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemovePptxSlidesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFileBytes == input.InputFileBytes ||
                    (this.InputFileBytes != null &&
                    this.InputFileBytes.Equals(input.InputFileBytes))
                ) && 
                (
                    this.InputFileUrl == input.InputFileUrl ||
                    (this.InputFileUrl != null &&
                    this.InputFileUrl.Equals(input.InputFileUrl))
                ) && 
                (
                    this.StartDeleteSlideNumber == input.StartDeleteSlideNumber ||
                    (this.StartDeleteSlideNumber != null &&
                    this.StartDeleteSlideNumber.Equals(input.StartDeleteSlideNumber))
                ) && 
                (
                    this.EndDeleteSlideNumber == input.EndDeleteSlideNumber ||
                    (this.EndDeleteSlideNumber != null &&
                    this.EndDeleteSlideNumber.Equals(input.EndDeleteSlideNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFileBytes != null)
                    hashCode = hashCode * 59 + this.InputFileBytes.GetHashCode();
                if (this.InputFileUrl != null)
                    hashCode = hashCode * 59 + this.InputFileUrl.GetHashCode();
                if (this.StartDeleteSlideNumber != null)
                    hashCode = hashCode * 59 + this.StartDeleteSlideNumber.GetHashCode();
                if (this.EndDeleteSlideNumber != null)
                    hashCode = hashCode * 59 + this.EndDeleteSlideNumber.GetHashCode();
                return hashCode;
            }
        }
    }

}
