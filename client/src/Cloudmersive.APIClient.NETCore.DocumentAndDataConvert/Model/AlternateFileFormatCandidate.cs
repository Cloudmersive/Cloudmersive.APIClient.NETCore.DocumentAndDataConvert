/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Alternate file format possibility
    /// </summary>
    [DataContract]
    public partial class AlternateFileFormatCandidate :  IEquatable<AlternateFileFormatCandidate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlternateFileFormatCandidate" /> class.
        /// </summary>
        /// <param name="probability">Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence).</param>
        /// <param name="detectedFileExtension">Detected file extension of the file format, with a leading period.</param>
        /// <param name="detectedMimeType">MIME type of this file extension.</param>
        public AlternateFileFormatCandidate(double? probability = default(double?), string detectedFileExtension = default(string), string detectedMimeType = default(string))
        {
            this.Probability = probability;
            this.DetectedFileExtension = detectedFileExtension;
            this.DetectedMimeType = detectedMimeType;
        }
        
        /// <summary>
        /// Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence)
        /// </summary>
        /// <value>Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence)</value>
        [DataMember(Name="Probability", EmitDefaultValue=false)]
        public double? Probability { get; set; }

        /// <summary>
        /// Detected file extension of the file format, with a leading period
        /// </summary>
        /// <value>Detected file extension of the file format, with a leading period</value>
        [DataMember(Name="DetectedFileExtension", EmitDefaultValue=false)]
        public string DetectedFileExtension { get; set; }

        /// <summary>
        /// MIME type of this file extension
        /// </summary>
        /// <value>MIME type of this file extension</value>
        [DataMember(Name="DetectedMimeType", EmitDefaultValue=false)]
        public string DetectedMimeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlternateFileFormatCandidate {\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  DetectedFileExtension: ").Append(DetectedFileExtension).Append("\n");
            sb.Append("  DetectedMimeType: ").Append(DetectedMimeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlternateFileFormatCandidate);
        }

        /// <summary>
        /// Returns true if AlternateFileFormatCandidate instances are equal
        /// </summary>
        /// <param name="input">Instance of AlternateFileFormatCandidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlternateFileFormatCandidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                ) && 
                (
                    this.DetectedFileExtension == input.DetectedFileExtension ||
                    (this.DetectedFileExtension != null &&
                    this.DetectedFileExtension.Equals(input.DetectedFileExtension))
                ) && 
                (
                    this.DetectedMimeType == input.DetectedMimeType ||
                    (this.DetectedMimeType != null &&
                    this.DetectedMimeType.Equals(input.DetectedMimeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                if (this.DetectedFileExtension != null)
                    hashCode = hashCode * 59 + this.DetectedFileExtension.GetHashCode();
                if (this.DetectedMimeType != null)
                    hashCode = hashCode * 59 + this.DetectedMimeType.GetHashCode();
                return hashCode;
            }
        }
    }

}
