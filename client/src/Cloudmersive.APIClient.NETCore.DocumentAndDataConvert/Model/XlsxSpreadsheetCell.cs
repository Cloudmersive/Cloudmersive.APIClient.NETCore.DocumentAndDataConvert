/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Cell in an Excel Spreadsheet worksheet
    /// </summary>
    [DataContract]
    public partial class XlsxSpreadsheetCell :  IEquatable<XlsxSpreadsheetCell>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XlsxSpreadsheetCell" /> class.
        /// </summary>
        /// <param name="Path">The Path of the location of this object; leave blank for new rows.</param>
        /// <param name="TextValue">Text value of the cell.</param>
        /// <param name="CellIdentifier">Cell reference of the cell, e.g. A1, Z22, etc..</param>
        /// <param name="StyleIndex">Identifier for the style to apply to this style.</param>
        /// <param name="Formula">Formula.</param>
        public XlsxSpreadsheetCell(string Path = default(string), string TextValue = default(string), string CellIdentifier = default(string), int? StyleIndex = default(int?), string Formula = default(string))
        {
            this.Path = Path;
            this.TextValue = TextValue;
            this.CellIdentifier = CellIdentifier;
            this.StyleIndex = StyleIndex;
            this.Formula = Formula;
        }
        
        /// <summary>
        /// The Path of the location of this object; leave blank for new rows
        /// </summary>
        /// <value>The Path of the location of this object; leave blank for new rows</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Text value of the cell
        /// </summary>
        /// <value>Text value of the cell</value>
        [DataMember(Name="TextValue", EmitDefaultValue=false)]
        public string TextValue { get; set; }

        /// <summary>
        /// Cell reference of the cell, e.g. A1, Z22, etc.
        /// </summary>
        /// <value>Cell reference of the cell, e.g. A1, Z22, etc.</value>
        [DataMember(Name="CellIdentifier", EmitDefaultValue=false)]
        public string CellIdentifier { get; set; }

        /// <summary>
        /// Identifier for the style to apply to this style
        /// </summary>
        /// <value>Identifier for the style to apply to this style</value>
        [DataMember(Name="StyleIndex", EmitDefaultValue=false)]
        public int? StyleIndex { get; set; }

        /// <summary>
        /// Gets or Sets Formula
        /// </summary>
        [DataMember(Name="Formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XlsxSpreadsheetCell {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  CellIdentifier: ").Append(CellIdentifier).Append("\n");
            sb.Append("  StyleIndex: ").Append(StyleIndex).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XlsxSpreadsheetCell);
        }

        /// <summary>
        /// Returns true if XlsxSpreadsheetCell instances are equal
        /// </summary>
        /// <param name="input">Instance of XlsxSpreadsheetCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XlsxSpreadsheetCell input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.TextValue == input.TextValue ||
                    (this.TextValue != null &&
                    this.TextValue.Equals(input.TextValue))
                ) && 
                (
                    this.CellIdentifier == input.CellIdentifier ||
                    (this.CellIdentifier != null &&
                    this.CellIdentifier.Equals(input.CellIdentifier))
                ) && 
                (
                    this.StyleIndex == input.StyleIndex ||
                    (this.StyleIndex != null &&
                    this.StyleIndex.Equals(input.StyleIndex))
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.TextValue != null)
                    hashCode = hashCode * 59 + this.TextValue.GetHashCode();
                if (this.CellIdentifier != null)
                    hashCode = hashCode * 59 + this.CellIdentifier.GetHashCode();
                if (this.StyleIndex != null)
                    hashCode = hashCode * 59 + this.StyleIndex.GetHashCode();
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
