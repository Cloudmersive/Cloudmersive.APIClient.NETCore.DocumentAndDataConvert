/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to edit a document comprised of chunks
    /// </summary>
    [DataContract]
    public partial class BeginEditingChunkRequest :  IEquatable<BeginEditingChunkRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeginEditingChunkRequest" /> class.
        /// </summary>
        /// <param name="documentID">Unique ID for this transaction or document.</param>
        /// <param name="base64EncodedChunk">The base64-encoded string content for this chunk.</param>
        /// <param name="chunkIndex">The 0-based index of this chunk.</param>
        /// <param name="chunkTotalCount">Total number of chunks.</param>
        public BeginEditingChunkRequest(string documentID = default(string), string base64EncodedChunk = default(string), int? chunkIndex = default(int?), int? chunkTotalCount = default(int?))
        {
            this.DocumentID = documentID;
            this.Base64EncodedChunk = base64EncodedChunk;
            this.ChunkIndex = chunkIndex;
            this.ChunkTotalCount = chunkTotalCount;
        }
        
        /// <summary>
        /// Unique ID for this transaction or document
        /// </summary>
        /// <value>Unique ID for this transaction or document</value>
        [DataMember(Name="DocumentID", EmitDefaultValue=false)]
        public string DocumentID { get; set; }

        /// <summary>
        /// The base64-encoded string content for this chunk
        /// </summary>
        /// <value>The base64-encoded string content for this chunk</value>
        [DataMember(Name="Base64EncodedChunk", EmitDefaultValue=false)]
        public string Base64EncodedChunk { get; set; }

        /// <summary>
        /// The 0-based index of this chunk
        /// </summary>
        /// <value>The 0-based index of this chunk</value>
        [DataMember(Name="ChunkIndex", EmitDefaultValue=false)]
        public int? ChunkIndex { get; set; }

        /// <summary>
        /// Total number of chunks
        /// </summary>
        /// <value>Total number of chunks</value>
        [DataMember(Name="ChunkTotalCount", EmitDefaultValue=false)]
        public int? ChunkTotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeginEditingChunkRequest {\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  Base64EncodedChunk: ").Append(Base64EncodedChunk).Append("\n");
            sb.Append("  ChunkIndex: ").Append(ChunkIndex).Append("\n");
            sb.Append("  ChunkTotalCount: ").Append(ChunkTotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BeginEditingChunkRequest);
        }

        /// <summary>
        /// Returns true if BeginEditingChunkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BeginEditingChunkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeginEditingChunkRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentID == input.DocumentID ||
                    (this.DocumentID != null &&
                    this.DocumentID.Equals(input.DocumentID))
                ) && 
                (
                    this.Base64EncodedChunk == input.Base64EncodedChunk ||
                    (this.Base64EncodedChunk != null &&
                    this.Base64EncodedChunk.Equals(input.Base64EncodedChunk))
                ) && 
                (
                    this.ChunkIndex == input.ChunkIndex ||
                    (this.ChunkIndex != null &&
                    this.ChunkIndex.Equals(input.ChunkIndex))
                ) && 
                (
                    this.ChunkTotalCount == input.ChunkTotalCount ||
                    (this.ChunkTotalCount != null &&
                    this.ChunkTotalCount.Equals(input.ChunkTotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentID != null)
                    hashCode = hashCode * 59 + this.DocumentID.GetHashCode();
                if (this.Base64EncodedChunk != null)
                    hashCode = hashCode * 59 + this.Base64EncodedChunk.GetHashCode();
                if (this.ChunkIndex != null)
                    hashCode = hashCode * 59 + this.ChunkIndex.GetHashCode();
                if (this.ChunkTotalCount != null)
                    hashCode = hashCode * 59 + this.ChunkTotalCount.GetHashCode();
                return hashCode;
            }
        }
    }

}
