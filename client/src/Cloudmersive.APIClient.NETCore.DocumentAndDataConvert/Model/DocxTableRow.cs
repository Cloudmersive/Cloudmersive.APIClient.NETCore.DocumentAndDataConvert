/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// A row in a Word Document (DOCX) file
    /// </summary>
    [DataContract]
    public partial class DocxTableRow :  IEquatable<DocxTableRow>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxTableRow" /> class.
        /// </summary>
        /// <param name="rowIndex">Index of the row, 0-based.</param>
        /// <param name="path">The Path of the location of this table row object; leave blank for new tables.</param>
        /// <param name="rowCells">Cells in the row; this is where the contents of the row is stored.</param>
        public DocxTableRow(int? rowIndex = default(int?), string path = default(string), List<DocxTableCell> rowCells = default(List<DocxTableCell>))
        {
            this.RowIndex = rowIndex;
            this.Path = path;
            this.RowCells = rowCells;
        }
        
        /// <summary>
        /// Index of the row, 0-based
        /// </summary>
        /// <value>Index of the row, 0-based</value>
        [DataMember(Name="RowIndex", EmitDefaultValue=false)]
        public int? RowIndex { get; set; }

        /// <summary>
        /// The Path of the location of this table row object; leave blank for new tables
        /// </summary>
        /// <value>The Path of the location of this table row object; leave blank for new tables</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Cells in the row; this is where the contents of the row is stored
        /// </summary>
        /// <value>Cells in the row; this is where the contents of the row is stored</value>
        [DataMember(Name="RowCells", EmitDefaultValue=false)]
        public List<DocxTableCell> RowCells { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxTableRow {\n");
            sb.Append("  RowIndex: ").Append(RowIndex).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RowCells: ").Append(RowCells).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxTableRow);
        }

        /// <summary>
        /// Returns true if DocxTableRow instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxTableRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxTableRow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RowIndex == input.RowIndex ||
                    (this.RowIndex != null &&
                    this.RowIndex.Equals(input.RowIndex))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.RowCells == input.RowCells ||
                    this.RowCells != null &&
                    this.RowCells.SequenceEqual(input.RowCells)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RowIndex != null)
                    hashCode = hashCode * 59 + this.RowIndex.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.RowCells != null)
                    hashCode = hashCode * 59 + this.RowCells.GetHashCode();
                return hashCode;
            }
        }
    }

}
