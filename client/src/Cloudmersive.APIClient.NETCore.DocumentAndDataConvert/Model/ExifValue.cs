/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// EXIF tag and value
    /// </summary>
    [DataContract]
    public partial class ExifValue :  IEquatable<ExifValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExifValue" /> class.
        /// </summary>
        /// <param name="Tag">Tag name for the EXIF value.</param>
        /// <param name="DataType">Date type of the EXIF value.</param>
        /// <param name="DataValue">Value, formatted as a string of the EXIF value.</param>
        public ExifValue(string Tag = default(string), string DataType = default(string), string DataValue = default(string))
        {
            this.Tag = Tag;
            this.DataType = DataType;
            this.DataValue = DataValue;
        }
        
        /// <summary>
        /// Tag name for the EXIF value
        /// </summary>
        /// <value>Tag name for the EXIF value</value>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Date type of the EXIF value
        /// </summary>
        /// <value>Date type of the EXIF value</value>
        [DataMember(Name="DataType", EmitDefaultValue=false)]
        public string DataType { get; set; }

        /// <summary>
        /// Value, formatted as a string of the EXIF value
        /// </summary>
        /// <value>Value, formatted as a string of the EXIF value</value>
        [DataMember(Name="DataValue", EmitDefaultValue=false)]
        public string DataValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExifValue {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DataValue: ").Append(DataValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExifValue);
        }

        /// <summary>
        /// Returns true if ExifValue instances are equal
        /// </summary>
        /// <param name="input">Instance of ExifValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExifValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.DataValue == input.DataValue ||
                    (this.DataValue != null &&
                    this.DataValue.Equals(input.DataValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DataValue != null)
                    hashCode = hashCode * 59 + this.DataValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
