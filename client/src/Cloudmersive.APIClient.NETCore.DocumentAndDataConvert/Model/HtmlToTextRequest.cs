/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Details of the HTML to Text request
    /// </summary>
    [DataContract]
    public partial class HtmlToTextRequest :  IEquatable<HtmlToTextRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HtmlToTextRequest" /> class.
        /// </summary>
        /// <param name="html">HTML to extract the text from.</param>
        public HtmlToTextRequest(string html = default(string))
        {
            this.Html = html;
        }
        
        /// <summary>
        /// HTML to extract the text from
        /// </summary>
        /// <value>HTML to extract the text from</value>
        [DataMember(Name="Html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HtmlToTextRequest {\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HtmlToTextRequest);
        }

        /// <summary>
        /// Returns true if HtmlToTextRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HtmlToTextRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HtmlToTextRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                return hashCode;
            }
        }
    }

}
