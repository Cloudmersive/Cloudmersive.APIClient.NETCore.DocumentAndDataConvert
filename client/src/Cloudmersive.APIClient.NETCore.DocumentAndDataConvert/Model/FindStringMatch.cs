/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Individual match result of finding a target string in a longer text string
    /// </summary>
    [DataContract]
    public partial class FindStringMatch :  IEquatable<FindStringMatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindStringMatch" /> class.
        /// </summary>
        /// <param name="CharacterOffsetStart">0-based index of the start of the match.</param>
        /// <param name="CharacterOffsetEnd">0-based index of the end of the match.</param>
        /// <param name="ContainingLine">Text content of the line containing the match.</param>
        public FindStringMatch(int? CharacterOffsetStart = default(int?), int? CharacterOffsetEnd = default(int?), string ContainingLine = default(string))
        {
            this.CharacterOffsetStart = CharacterOffsetStart;
            this.CharacterOffsetEnd = CharacterOffsetEnd;
            this.ContainingLine = ContainingLine;
        }
        
        /// <summary>
        /// 0-based index of the start of the match
        /// </summary>
        /// <value>0-based index of the start of the match</value>
        [DataMember(Name="CharacterOffsetStart", EmitDefaultValue=false)]
        public int? CharacterOffsetStart { get; set; }

        /// <summary>
        /// 0-based index of the end of the match
        /// </summary>
        /// <value>0-based index of the end of the match</value>
        [DataMember(Name="CharacterOffsetEnd", EmitDefaultValue=false)]
        public int? CharacterOffsetEnd { get; set; }

        /// <summary>
        /// Text content of the line containing the match
        /// </summary>
        /// <value>Text content of the line containing the match</value>
        [DataMember(Name="ContainingLine", EmitDefaultValue=false)]
        public string ContainingLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindStringMatch {\n");
            sb.Append("  CharacterOffsetStart: ").Append(CharacterOffsetStart).Append("\n");
            sb.Append("  CharacterOffsetEnd: ").Append(CharacterOffsetEnd).Append("\n");
            sb.Append("  ContainingLine: ").Append(ContainingLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindStringMatch);
        }

        /// <summary>
        /// Returns true if FindStringMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of FindStringMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindStringMatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterOffsetStart == input.CharacterOffsetStart ||
                    (this.CharacterOffsetStart != null &&
                    this.CharacterOffsetStart.Equals(input.CharacterOffsetStart))
                ) && 
                (
                    this.CharacterOffsetEnd == input.CharacterOffsetEnd ||
                    (this.CharacterOffsetEnd != null &&
                    this.CharacterOffsetEnd.Equals(input.CharacterOffsetEnd))
                ) && 
                (
                    this.ContainingLine == input.ContainingLine ||
                    (this.ContainingLine != null &&
                    this.ContainingLine.Equals(input.ContainingLine))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CharacterOffsetStart != null)
                    hashCode = hashCode * 59 + this.CharacterOffsetStart.GetHashCode();
                if (this.CharacterOffsetEnd != null)
                    hashCode = hashCode * 59 + this.CharacterOffsetEnd.GetHashCode();
                if (this.ContainingLine != null)
                    hashCode = hashCode * 59 + this.ContainingLine.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
