/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Text of a single page of a PDF
    /// </summary>
    [DataContract]
    public partial class PdfPageText :  IEquatable<PdfPageText>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfPageText" /> class.
        /// </summary>
        /// <param name="pageNumber">Page number of the page (1-based).</param>
        /// <param name="pageText">Text of the page.</param>
        public PdfPageText(int? pageNumber = default(int?), string pageText = default(string))
        {
            this.PageNumber = pageNumber;
            this.PageText = pageText;
        }
        
        /// <summary>
        /// Page number of the page (1-based)
        /// </summary>
        /// <value>Page number of the page (1-based)</value>
        [DataMember(Name="PageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Text of the page
        /// </summary>
        /// <value>Text of the page</value>
        [DataMember(Name="PageText", EmitDefaultValue=false)]
        public string PageText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PdfPageText {\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageText: ").Append(PageText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PdfPageText);
        }

        /// <summary>
        /// Returns true if PdfPageText instances are equal
        /// </summary>
        /// <param name="input">Instance of PdfPageText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PdfPageText input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.PageText == input.PageText ||
                    (this.PageText != null &&
                    this.PageText.Equals(input.PageText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.PageText != null)
                    hashCode = hashCode * 59 + this.PageText.GetHashCode();
                return hashCode;
            }
        }
    }

}
