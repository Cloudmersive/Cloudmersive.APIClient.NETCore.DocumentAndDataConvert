/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// A single string replacement request
    /// </summary>
    [DataContract]
    public partial class SingleReplaceString :  IEquatable<SingleReplaceString>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleReplaceString" /> class.
        /// </summary>
        /// <param name="matchString">String to search for and match against, to be replaced.</param>
        /// <param name="replaceString">String to replace the matched values with.</param>
        /// <param name="matchCase">True if the case should be matched, false for case insensitive match.</param>
        public SingleReplaceString(string matchString = default(string), string replaceString = default(string), bool? matchCase = default(bool?))
        {
            this.MatchString = matchString;
            this.ReplaceString = replaceString;
            this.MatchCase = matchCase;
        }
        
        /// <summary>
        /// String to search for and match against, to be replaced
        /// </summary>
        /// <value>String to search for and match against, to be replaced</value>
        [DataMember(Name="MatchString", EmitDefaultValue=false)]
        public string MatchString { get; set; }

        /// <summary>
        /// String to replace the matched values with
        /// </summary>
        /// <value>String to replace the matched values with</value>
        [DataMember(Name="ReplaceString", EmitDefaultValue=false)]
        public string ReplaceString { get; set; }

        /// <summary>
        /// True if the case should be matched, false for case insensitive match
        /// </summary>
        /// <value>True if the case should be matched, false for case insensitive match</value>
        [DataMember(Name="MatchCase", EmitDefaultValue=false)]
        public bool? MatchCase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleReplaceString {\n");
            sb.Append("  MatchString: ").Append(MatchString).Append("\n");
            sb.Append("  ReplaceString: ").Append(ReplaceString).Append("\n");
            sb.Append("  MatchCase: ").Append(MatchCase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleReplaceString);
        }

        /// <summary>
        /// Returns true if SingleReplaceString instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleReplaceString to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleReplaceString input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MatchString == input.MatchString ||
                    (this.MatchString != null &&
                    this.MatchString.Equals(input.MatchString))
                ) && 
                (
                    this.ReplaceString == input.ReplaceString ||
                    (this.ReplaceString != null &&
                    this.ReplaceString.Equals(input.ReplaceString))
                ) && 
                (
                    this.MatchCase == input.MatchCase ||
                    (this.MatchCase != null &&
                    this.MatchCase.Equals(input.MatchCase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MatchString != null)
                    hashCode = hashCode * 59 + this.MatchString.GetHashCode();
                if (this.ReplaceString != null)
                    hashCode = hashCode * 59 + this.ReplaceString.GetHashCode();
                if (this.MatchCase != null)
                    hashCode = hashCode * 59 + this.MatchCase.GetHashCode();
                return hashCode;
            }
        }
    }

}
