/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// XlsxImage
    /// </summary>
    [DataContract]
    public partial class XlsxImage :  IEquatable<XlsxImage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XlsxImage" /> class.
        /// </summary>
        /// <param name="path">The Path of the location of this object; leave blank for new rows.</param>
        /// <param name="imageDataEmbedId">Read-only; internal ID for the image contents.</param>
        /// <param name="imageDataContentType">Read-only; image data MIME content-type.</param>
        /// <param name="imageInternalFileName">Read-only; internal file name/path for the image.</param>
        /// <param name="imageContentsURL">URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents..</param>
        public XlsxImage(string path = default(string), string imageDataEmbedId = default(string), string imageDataContentType = default(string), string imageInternalFileName = default(string), string imageContentsURL = default(string))
        {
            this.Path = path;
            this.ImageDataEmbedId = imageDataEmbedId;
            this.ImageDataContentType = imageDataContentType;
            this.ImageInternalFileName = imageInternalFileName;
            this.ImageContentsURL = imageContentsURL;
        }
        
        /// <summary>
        /// The Path of the location of this object; leave blank for new rows
        /// </summary>
        /// <value>The Path of the location of this object; leave blank for new rows</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Read-only; internal ID for the image contents
        /// </summary>
        /// <value>Read-only; internal ID for the image contents</value>
        [DataMember(Name="ImageDataEmbedId", EmitDefaultValue=false)]
        public string ImageDataEmbedId { get; set; }

        /// <summary>
        /// Read-only; image data MIME content-type
        /// </summary>
        /// <value>Read-only; image data MIME content-type</value>
        [DataMember(Name="ImageDataContentType", EmitDefaultValue=false)]
        public string ImageDataContentType { get; set; }

        /// <summary>
        /// Read-only; internal file name/path for the image
        /// </summary>
        /// <value>Read-only; internal file name/path for the image</value>
        [DataMember(Name="ImageInternalFileName", EmitDefaultValue=false)]
        public string ImageInternalFileName { get; set; }

        /// <summary>
        /// URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.
        /// </summary>
        /// <value>URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.</value>
        [DataMember(Name="ImageContentsURL", EmitDefaultValue=false)]
        public string ImageContentsURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XlsxImage {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ImageDataEmbedId: ").Append(ImageDataEmbedId).Append("\n");
            sb.Append("  ImageDataContentType: ").Append(ImageDataContentType).Append("\n");
            sb.Append("  ImageInternalFileName: ").Append(ImageInternalFileName).Append("\n");
            sb.Append("  ImageContentsURL: ").Append(ImageContentsURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XlsxImage);
        }

        /// <summary>
        /// Returns true if XlsxImage instances are equal
        /// </summary>
        /// <param name="input">Instance of XlsxImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XlsxImage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ImageDataEmbedId == input.ImageDataEmbedId ||
                    (this.ImageDataEmbedId != null &&
                    this.ImageDataEmbedId.Equals(input.ImageDataEmbedId))
                ) && 
                (
                    this.ImageDataContentType == input.ImageDataContentType ||
                    (this.ImageDataContentType != null &&
                    this.ImageDataContentType.Equals(input.ImageDataContentType))
                ) && 
                (
                    this.ImageInternalFileName == input.ImageInternalFileName ||
                    (this.ImageInternalFileName != null &&
                    this.ImageInternalFileName.Equals(input.ImageInternalFileName))
                ) && 
                (
                    this.ImageContentsURL == input.ImageContentsURL ||
                    (this.ImageContentsURL != null &&
                    this.ImageContentsURL.Equals(input.ImageContentsURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ImageDataEmbedId != null)
                    hashCode = hashCode * 59 + this.ImageDataEmbedId.GetHashCode();
                if (this.ImageDataContentType != null)
                    hashCode = hashCode * 59 + this.ImageDataContentType.GetHashCode();
                if (this.ImageInternalFileName != null)
                    hashCode = hashCode * 59 + this.ImageInternalFileName.GetHashCode();
                if (this.ImageContentsURL != null)
                    hashCode = hashCode * 59 + this.ImageContentsURL.GetHashCode();
                return hashCode;
            }
        }
    }

}
