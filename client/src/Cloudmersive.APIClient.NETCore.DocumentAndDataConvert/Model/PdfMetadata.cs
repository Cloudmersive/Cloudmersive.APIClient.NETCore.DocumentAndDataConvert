/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Result of an autodetect/get-info operation
    /// </summary>
    [DataContract]
    public partial class PdfMetadata :  IEquatable<PdfMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfMetadata" /> class.
        /// </summary>
        /// <param name="Successful">True if the operation was successful, false otherwise.</param>
        /// <param name="Title">Title of the document.</param>
        /// <param name="Keywords">Keywords of the document.</param>
        /// <param name="Subject">Subject of the document.</param>
        /// <param name="Author">User name of the creator/author of the document, if available, null if not available.</param>
        /// <param name="Creator">Creator of the document.</param>
        /// <param name="DateModified">The timestamp that the document was last modified, if available, null if not available.</param>
        /// <param name="DateCreated">The timestamp that the document was created, if available, null if not available.</param>
        /// <param name="PageCount">The number of pages in the document.</param>
        public PdfMetadata(bool? Successful = default(bool?), string Title = default(string), string Keywords = default(string), string Subject = default(string), string Author = default(string), string Creator = default(string), DateTime? DateModified = default(DateTime?), DateTime? DateCreated = default(DateTime?), int? PageCount = default(int?))
        {
            this.Successful = Successful;
            this.Title = Title;
            this.Keywords = Keywords;
            this.Subject = Subject;
            this.Author = Author;
            this.Creator = Creator;
            this.DateModified = DateModified;
            this.DateCreated = DateCreated;
            this.PageCount = PageCount;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Title of the document
        /// </summary>
        /// <value>Title of the document</value>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Keywords of the document
        /// </summary>
        /// <value>Keywords of the document</value>
        [DataMember(Name="Keywords", EmitDefaultValue=false)]
        public string Keywords { get; set; }

        /// <summary>
        /// Subject of the document
        /// </summary>
        /// <value>Subject of the document</value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// User name of the creator/author of the document, if available, null if not available
        /// </summary>
        /// <value>User name of the creator/author of the document, if available, null if not available</value>
        [DataMember(Name="Author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Creator of the document
        /// </summary>
        /// <value>Creator of the document</value>
        [DataMember(Name="Creator", EmitDefaultValue=false)]
        public string Creator { get; set; }

        /// <summary>
        /// The timestamp that the document was last modified, if available, null if not available
        /// </summary>
        /// <value>The timestamp that the document was last modified, if available, null if not available</value>
        [DataMember(Name="DateModified", EmitDefaultValue=false)]
        public DateTime? DateModified { get; set; }

        /// <summary>
        /// The timestamp that the document was created, if available, null if not available
        /// </summary>
        /// <value>The timestamp that the document was created, if available, null if not available</value>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// The number of pages in the document
        /// </summary>
        /// <value>The number of pages in the document</value>
        [DataMember(Name="PageCount", EmitDefaultValue=false)]
        public int? PageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PdfMetadata {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PdfMetadata);
        }

        /// <summary>
        /// Returns true if PdfMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of PdfMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PdfMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.PageCount == input.PageCount ||
                    (this.PageCount != null &&
                    this.PageCount.Equals(input.PageCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.DateModified != null)
                    hashCode = hashCode * 59 + this.DateModified.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.PageCount != null)
                    hashCode = hashCode * 59 + this.PageCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
