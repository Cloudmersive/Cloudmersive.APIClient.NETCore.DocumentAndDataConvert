/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Result of finding a string
    /// </summary>
    [DataContract]
    public partial class FindStringRegexResponse :  IEquatable<FindStringRegexResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindStringRegexResponse" /> class.
        /// </summary>
        /// <param name="successful">True if successful, false otherwise.</param>
        /// <param name="matches">Regular expression matches.</param>
        /// <param name="matchCount">The number of matches.</param>
        public FindStringRegexResponse(bool? successful = default(bool?), List<FindRegexMatch> matches = default(List<FindRegexMatch>), int? matchCount = default(int?))
        {
            this.Successful = successful;
            this.Matches = matches;
            this.MatchCount = matchCount;
        }
        
        /// <summary>
        /// True if successful, false otherwise
        /// </summary>
        /// <value>True if successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Regular expression matches
        /// </summary>
        /// <value>Regular expression matches</value>
        [DataMember(Name="Matches", EmitDefaultValue=false)]
        public List<FindRegexMatch> Matches { get; set; }

        /// <summary>
        /// The number of matches
        /// </summary>
        /// <value>The number of matches</value>
        [DataMember(Name="MatchCount", EmitDefaultValue=false)]
        public int? MatchCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindStringRegexResponse {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  MatchCount: ").Append(MatchCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindStringRegexResponse);
        }

        /// <summary>
        /// Returns true if FindStringRegexResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FindStringRegexResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindStringRegexResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                ) && 
                (
                    this.MatchCount == input.MatchCount ||
                    (this.MatchCount != null &&
                    this.MatchCount.Equals(input.MatchCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Matches != null)
                    hashCode = hashCode * 59 + this.Matches.GetHashCode();
                if (this.MatchCount != null)
                    hashCode = hashCode * 59 + this.MatchCount.GetHashCode();
                return hashCode;
            }
        }
    }

}
