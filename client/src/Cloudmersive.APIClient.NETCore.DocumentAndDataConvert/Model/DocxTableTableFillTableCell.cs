/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Cell data to fill in to the DOCX Table
    /// </summary>
    [DataContract]
    public partial class DocxTableTableFillTableCell :  IEquatable<DocxTableTableFillTableCell>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocxTableTableFillTableCell" /> class.
        /// </summary>
        /// <param name="targetTag">Target tag to replace.</param>
        /// <param name="replacementValue">Replacement value for the target tag.</param>
        public DocxTableTableFillTableCell(string targetTag = default(string), string replacementValue = default(string))
        {
            this.TargetTag = targetTag;
            this.ReplacementValue = replacementValue;
        }
        
        /// <summary>
        /// Target tag to replace
        /// </summary>
        /// <value>Target tag to replace</value>
        [DataMember(Name="TargetTag", EmitDefaultValue=false)]
        public string TargetTag { get; set; }

        /// <summary>
        /// Replacement value for the target tag
        /// </summary>
        /// <value>Replacement value for the target tag</value>
        [DataMember(Name="ReplacementValue", EmitDefaultValue=false)]
        public string ReplacementValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocxTableTableFillTableCell {\n");
            sb.Append("  TargetTag: ").Append(TargetTag).Append("\n");
            sb.Append("  ReplacementValue: ").Append(ReplacementValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocxTableTableFillTableCell);
        }

        /// <summary>
        /// Returns true if DocxTableTableFillTableCell instances are equal
        /// </summary>
        /// <param name="input">Instance of DocxTableTableFillTableCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocxTableTableFillTableCell input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetTag == input.TargetTag ||
                    (this.TargetTag != null &&
                    this.TargetTag.Equals(input.TargetTag))
                ) && 
                (
                    this.ReplacementValue == input.ReplacementValue ||
                    (this.ReplacementValue != null &&
                    this.ReplacementValue.Equals(input.ReplacementValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetTag != null)
                    hashCode = hashCode * 59 + this.TargetTag.GetHashCode();
                if (this.ReplacementValue != null)
                    hashCode = hashCode * 59 + this.ReplacementValue.GetHashCode();
                return hashCode;
            }
        }
    }

}
