/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// A single Excel XLSX file corresponding to one worksheet (tab) in the original spreadsheet
    /// </summary>
    [DataContract]
    public partial class PresentationResult :  IEquatable<PresentationResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PresentationResult" /> class.
        /// </summary>
        /// <param name="slideNumber">Worksheet number of the converted page, starting with 1 for the left-most worksheet.</param>
        /// <param name="uRL">URL to the PPTX file of this slide; file is stored in an in-memory cache and will be deleted.</param>
        /// <param name="presentationContents">Contents of the presentation in bytes.</param>
        public PresentationResult(int? slideNumber = default(int?), string uRL = default(string), byte[] presentationContents = default(byte[]))
        {
            this.SlideNumber = slideNumber;
            this.URL = uRL;
            this.PresentationContents = presentationContents;
        }
        
        /// <summary>
        /// Worksheet number of the converted page, starting with 1 for the left-most worksheet
        /// </summary>
        /// <value>Worksheet number of the converted page, starting with 1 for the left-most worksheet</value>
        [DataMember(Name="SlideNumber", EmitDefaultValue=false)]
        public int? SlideNumber { get; set; }

        /// <summary>
        /// URL to the PPTX file of this slide; file is stored in an in-memory cache and will be deleted
        /// </summary>
        /// <value>URL to the PPTX file of this slide; file is stored in an in-memory cache and will be deleted</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }

        /// <summary>
        /// Contents of the presentation in bytes
        /// </summary>
        /// <value>Contents of the presentation in bytes</value>
        [DataMember(Name="PresentationContents", EmitDefaultValue=false)]
        public byte[] PresentationContents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PresentationResult {\n");
            sb.Append("  SlideNumber: ").Append(SlideNumber).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  PresentationContents: ").Append(PresentationContents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PresentationResult);
        }

        /// <summary>
        /// Returns true if PresentationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PresentationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PresentationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlideNumber == input.SlideNumber ||
                    (this.SlideNumber != null &&
                    this.SlideNumber.Equals(input.SlideNumber))
                ) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && 
                (
                    this.PresentationContents == input.PresentationContents ||
                    (this.PresentationContents != null &&
                    this.PresentationContents.Equals(input.PresentationContents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlideNumber != null)
                    hashCode = hashCode * 59 + this.SlideNumber.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.PresentationContents != null)
                    hashCode = hashCode * 59 + this.PresentationContents.GetHashCode();
                return hashCode;
            }
        }
    }

}
