/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to replace a regex string in a string
    /// </summary>
    [DataContract]
    public partial class ReplaceStringRegexRequest :  IEquatable<ReplaceStringRegexRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceStringRegexRequest" /> class.
        /// </summary>
        /// <param name="TextContent">Input text content.</param>
        /// <param name="RegularExpressionString">Target input regular expression (regex) string to match and be replaced; supports all regular expression values.</param>
        /// <param name="ReplaceWithString">Replacement for target string; supports referencing indexed regex matched values from RegularExpressionString, such as $1, $2, and so on.</param>
        public ReplaceStringRegexRequest(string TextContent = default(string), string RegularExpressionString = default(string), string ReplaceWithString = default(string))
        {
            this.TextContent = TextContent;
            this.RegularExpressionString = RegularExpressionString;
            this.ReplaceWithString = ReplaceWithString;
        }
        
        /// <summary>
        /// Input text content
        /// </summary>
        /// <value>Input text content</value>
        [DataMember(Name="TextContent", EmitDefaultValue=false)]
        public string TextContent { get; set; }

        /// <summary>
        /// Target input regular expression (regex) string to match and be replaced; supports all regular expression values
        /// </summary>
        /// <value>Target input regular expression (regex) string to match and be replaced; supports all regular expression values</value>
        [DataMember(Name="RegularExpressionString", EmitDefaultValue=false)]
        public string RegularExpressionString { get; set; }

        /// <summary>
        /// Replacement for target string; supports referencing indexed regex matched values from RegularExpressionString, such as $1, $2, and so on
        /// </summary>
        /// <value>Replacement for target string; supports referencing indexed regex matched values from RegularExpressionString, such as $1, $2, and so on</value>
        [DataMember(Name="ReplaceWithString", EmitDefaultValue=false)]
        public string ReplaceWithString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplaceStringRegexRequest {\n");
            sb.Append("  TextContent: ").Append(TextContent).Append("\n");
            sb.Append("  RegularExpressionString: ").Append(RegularExpressionString).Append("\n");
            sb.Append("  ReplaceWithString: ").Append(ReplaceWithString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplaceStringRegexRequest);
        }

        /// <summary>
        /// Returns true if ReplaceStringRegexRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplaceStringRegexRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceStringRegexRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextContent == input.TextContent ||
                    (this.TextContent != null &&
                    this.TextContent.Equals(input.TextContent))
                ) && 
                (
                    this.RegularExpressionString == input.RegularExpressionString ||
                    (this.RegularExpressionString != null &&
                    this.RegularExpressionString.Equals(input.RegularExpressionString))
                ) && 
                (
                    this.ReplaceWithString == input.ReplaceWithString ||
                    (this.ReplaceWithString != null &&
                    this.ReplaceWithString.Equals(input.ReplaceWithString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextContent != null)
                    hashCode = hashCode * 59 + this.TextContent.GetHashCode();
                if (this.RegularExpressionString != null)
                    hashCode = hashCode * 59 + this.RegularExpressionString.GetHashCode();
                if (this.ReplaceWithString != null)
                    hashCode = hashCode * 59 + this.ReplaceWithString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
