/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Request to create a Zip Archive
    /// </summary>
    [DataContract]
    public partial class CreateZipArchiveRequest :  IEquatable<CreateZipArchiveRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateZipArchiveRequest" /> class.
        /// </summary>
        /// <param name="FilesInZip">Top-level files in the root directory fo the zip file.</param>
        /// <param name="DirectoriesInZip">Top-level directories in the root directory of the zip; directories can contain sub-directories and files.</param>
        public CreateZipArchiveRequest(List<ZipFile> FilesInZip = default(List<ZipFile>), List<ZipDirectory> DirectoriesInZip = default(List<ZipDirectory>))
        {
            this.FilesInZip = FilesInZip;
            this.DirectoriesInZip = DirectoriesInZip;
        }
        
        /// <summary>
        /// Top-level files in the root directory fo the zip file
        /// </summary>
        /// <value>Top-level files in the root directory fo the zip file</value>
        [DataMember(Name="FilesInZip", EmitDefaultValue=false)]
        public List<ZipFile> FilesInZip { get; set; }

        /// <summary>
        /// Top-level directories in the root directory of the zip; directories can contain sub-directories and files
        /// </summary>
        /// <value>Top-level directories in the root directory of the zip; directories can contain sub-directories and files</value>
        [DataMember(Name="DirectoriesInZip", EmitDefaultValue=false)]
        public List<ZipDirectory> DirectoriesInZip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateZipArchiveRequest {\n");
            sb.Append("  FilesInZip: ").Append(FilesInZip).Append("\n");
            sb.Append("  DirectoriesInZip: ").Append(DirectoriesInZip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateZipArchiveRequest);
        }

        /// <summary>
        /// Returns true if CreateZipArchiveRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateZipArchiveRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateZipArchiveRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FilesInZip == input.FilesInZip ||
                    this.FilesInZip != null &&
                    this.FilesInZip.SequenceEqual(input.FilesInZip)
                ) && 
                (
                    this.DirectoriesInZip == input.DirectoriesInZip ||
                    this.DirectoriesInZip != null &&
                    this.DirectoriesInZip.SequenceEqual(input.DirectoriesInZip)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilesInZip != null)
                    hashCode = hashCode * 59 + this.FilesInZip.GetHashCode();
                if (this.DirectoriesInZip != null)
                    hashCode = hashCode * 59 + this.DirectoriesInZip.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
