/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Handlebar style form fields to fill in; form field that is handlebar style, such as \&quot;{{FieldName}}\&quot;
    /// </summary>
    [DataContract]
    public partial class FillHandlebarFormField :  IEquatable<FillHandlebarFormField>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FillHandlebarFormField" /> class.
        /// </summary>
        /// <param name="fieldName">Name of the field without the curly braces, e.g. \&quot;FieldName\&quot; for a field that is included in the text of the DOCX as \&quot;{{FieldName}}\&quot;.</param>
        /// <param name="valueToFill">Text value to fill in for the field in the resulting document.</param>
        public FillHandlebarFormField(string fieldName = default(string), string valueToFill = default(string))
        {
            this.FieldName = fieldName;
            this.ValueToFill = valueToFill;
        }
        
        /// <summary>
        /// Name of the field without the curly braces, e.g. \&quot;FieldName\&quot; for a field that is included in the text of the DOCX as \&quot;{{FieldName}}\&quot;
        /// </summary>
        /// <value>Name of the field without the curly braces, e.g. \&quot;FieldName\&quot; for a field that is included in the text of the DOCX as \&quot;{{FieldName}}\&quot;</value>
        [DataMember(Name="FieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Text value to fill in for the field in the resulting document
        /// </summary>
        /// <value>Text value to fill in for the field in the resulting document</value>
        [DataMember(Name="ValueToFill", EmitDefaultValue=false)]
        public string ValueToFill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FillHandlebarFormField {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  ValueToFill: ").Append(ValueToFill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FillHandlebarFormField);
        }

        /// <summary>
        /// Returns true if FillHandlebarFormField instances are equal
        /// </summary>
        /// <param name="input">Instance of FillHandlebarFormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FillHandlebarFormField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.ValueToFill == input.ValueToFill ||
                    (this.ValueToFill != null &&
                    this.ValueToFill.Equals(input.ValueToFill))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.ValueToFill != null)
                    hashCode = hashCode * 59 + this.ValueToFill.GetHashCode();
                return hashCode;
            }
        }
    }

}
