/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Result of base 64 decoding
    /// </summary>
    [DataContract]
    public partial class DetectLineEndingsResponse :  IEquatable<DetectLineEndingsResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectLineEndingsResponse" /> class.
        /// </summary>
        /// <param name="successful">True if successful, false otherwise.</param>
        /// <param name="primaryNewlineType">Type of newline in the file; possible vlaues are \&quot;Mac\&quot; (legacy Mac OS uses carriage return only); \&quot;Unix\&quot; (Unix and Linux OSes, and modern Mac OS); \&quot;Windows\&quot; (Windows operating systems).</param>
        /// <param name="primaryNewlineTerminator">Characters used to terminate a newline; can be carriage return, linefeed, or carriage return + linefeed.</param>
        /// <param name="inputLength">Length of the input string in characters.</param>
        public DetectLineEndingsResponse(bool? successful = default(bool?), string primaryNewlineType = default(string), string primaryNewlineTerminator = default(string), int? inputLength = default(int?))
        {
            this.Successful = successful;
            this.PrimaryNewlineType = primaryNewlineType;
            this.PrimaryNewlineTerminator = primaryNewlineTerminator;
            this.InputLength = inputLength;
        }
        
        /// <summary>
        /// True if successful, false otherwise
        /// </summary>
        /// <value>True if successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Type of newline in the file; possible vlaues are \&quot;Mac\&quot; (legacy Mac OS uses carriage return only); \&quot;Unix\&quot; (Unix and Linux OSes, and modern Mac OS); \&quot;Windows\&quot; (Windows operating systems)
        /// </summary>
        /// <value>Type of newline in the file; possible vlaues are \&quot;Mac\&quot; (legacy Mac OS uses carriage return only); \&quot;Unix\&quot; (Unix and Linux OSes, and modern Mac OS); \&quot;Windows\&quot; (Windows operating systems)</value>
        [DataMember(Name="PrimaryNewlineType", EmitDefaultValue=false)]
        public string PrimaryNewlineType { get; set; }

        /// <summary>
        /// Characters used to terminate a newline; can be carriage return, linefeed, or carriage return + linefeed
        /// </summary>
        /// <value>Characters used to terminate a newline; can be carriage return, linefeed, or carriage return + linefeed</value>
        [DataMember(Name="PrimaryNewlineTerminator", EmitDefaultValue=false)]
        public string PrimaryNewlineTerminator { get; set; }

        /// <summary>
        /// Length of the input string in characters
        /// </summary>
        /// <value>Length of the input string in characters</value>
        [DataMember(Name="InputLength", EmitDefaultValue=false)]
        public int? InputLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetectLineEndingsResponse {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  PrimaryNewlineType: ").Append(PrimaryNewlineType).Append("\n");
            sb.Append("  PrimaryNewlineTerminator: ").Append(PrimaryNewlineTerminator).Append("\n");
            sb.Append("  InputLength: ").Append(InputLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetectLineEndingsResponse);
        }

        /// <summary>
        /// Returns true if DetectLineEndingsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DetectLineEndingsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetectLineEndingsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.PrimaryNewlineType == input.PrimaryNewlineType ||
                    (this.PrimaryNewlineType != null &&
                    this.PrimaryNewlineType.Equals(input.PrimaryNewlineType))
                ) && 
                (
                    this.PrimaryNewlineTerminator == input.PrimaryNewlineTerminator ||
                    (this.PrimaryNewlineTerminator != null &&
                    this.PrimaryNewlineTerminator.Equals(input.PrimaryNewlineTerminator))
                ) && 
                (
                    this.InputLength == input.InputLength ||
                    (this.InputLength != null &&
                    this.InputLength.Equals(input.InputLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.PrimaryNewlineType != null)
                    hashCode = hashCode * 59 + this.PrimaryNewlineType.GetHashCode();
                if (this.PrimaryNewlineTerminator != null)
                    hashCode = hashCode * 59 + this.PrimaryNewlineTerminator.GetHashCode();
                if (this.InputLength != null)
                    hashCode = hashCode * 59 + this.InputLength.GetHashCode();
                return hashCode;
            }
        }
    }

}
