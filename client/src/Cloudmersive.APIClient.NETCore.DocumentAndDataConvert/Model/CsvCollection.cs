/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Collection of CSV Files
    /// </summary>
    [DataContract]
    public partial class CsvCollection :  IEquatable<CsvCollection>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CsvCollection" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="csvFiles">Array of CSV File results.</param>
        /// <param name="fileCount">Count of the number of CSV files produced.</param>
        public CsvCollection(bool? successful = default(bool?), List<CsvFileResult> csvFiles = default(List<CsvFileResult>), int? fileCount = default(int?))
        {
            this.Successful = successful;
            this.CsvFiles = csvFiles;
            this.FileCount = fileCount;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Array of CSV File results
        /// </summary>
        /// <value>Array of CSV File results</value>
        [DataMember(Name="CsvFiles", EmitDefaultValue=false)]
        public List<CsvFileResult> CsvFiles { get; set; }

        /// <summary>
        /// Count of the number of CSV files produced
        /// </summary>
        /// <value>Count of the number of CSV files produced</value>
        [DataMember(Name="FileCount", EmitDefaultValue=false)]
        public int? FileCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CsvCollection {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  CsvFiles: ").Append(CsvFiles).Append("\n");
            sb.Append("  FileCount: ").Append(FileCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CsvCollection);
        }

        /// <summary>
        /// Returns true if CsvCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of CsvCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CsvCollection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.CsvFiles == input.CsvFiles ||
                    this.CsvFiles != null &&
                    this.CsvFiles.SequenceEqual(input.CsvFiles)
                ) && 
                (
                    this.FileCount == input.FileCount ||
                    (this.FileCount != null &&
                    this.FileCount.Equals(input.FileCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.CsvFiles != null)
                    hashCode = hashCode * 59 + this.CsvFiles.GetHashCode();
                if (this.FileCount != null)
                    hashCode = hashCode * 59 + this.FileCount.GetHashCode();
                return hashCode;
            }
        }
    }

}
