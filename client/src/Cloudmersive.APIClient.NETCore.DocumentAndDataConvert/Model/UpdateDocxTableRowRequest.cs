/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model
{
    /// <summary>
    /// Input to a Update Table Row request
    /// </summary>
    [DataContract]
    public partial class UpdateDocxTableRowRequest :  IEquatable<UpdateDocxTableRowRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDocxTableRowRequest" /> class.
        /// </summary>
        /// <param name="InputFileBytes">Optional: Bytes of the input file to operate on.</param>
        /// <param name="InputFileUrl">Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public)..</param>
        /// <param name="RowToUpdate">Table row contents you would like to update the row with.</param>
        /// <param name="TableRowRowIndex">0-based index of the Table Row to update.</param>
        /// <param name="ExistingTablePath">Required; the path to the existing table to modify.</param>
        public UpdateDocxTableRowRequest(byte[] InputFileBytes = default(byte[]), string InputFileUrl = default(string), DocxTableRow RowToUpdate = default(DocxTableRow), int? TableRowRowIndex = default(int?), string ExistingTablePath = default(string))
        {
            this.InputFileBytes = InputFileBytes;
            this.InputFileUrl = InputFileUrl;
            this.RowToUpdate = RowToUpdate;
            this.TableRowRowIndex = TableRowRowIndex;
            this.ExistingTablePath = ExistingTablePath;
        }
        
        /// <summary>
        /// Optional: Bytes of the input file to operate on
        /// </summary>
        /// <value>Optional: Bytes of the input file to operate on</value>
        [DataMember(Name="InputFileBytes", EmitDefaultValue=false)]
        public byte[] InputFileBytes { get; set; }

        /// <summary>
        /// Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).
        /// </summary>
        /// <value>Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).</value>
        [DataMember(Name="InputFileUrl", EmitDefaultValue=false)]
        public string InputFileUrl { get; set; }

        /// <summary>
        /// Table row contents you would like to update the row with
        /// </summary>
        /// <value>Table row contents you would like to update the row with</value>
        [DataMember(Name="RowToUpdate", EmitDefaultValue=false)]
        public DocxTableRow RowToUpdate { get; set; }

        /// <summary>
        /// 0-based index of the Table Row to update
        /// </summary>
        /// <value>0-based index of the Table Row to update</value>
        [DataMember(Name="TableRowRowIndex", EmitDefaultValue=false)]
        public int? TableRowRowIndex { get; set; }

        /// <summary>
        /// Required; the path to the existing table to modify
        /// </summary>
        /// <value>Required; the path to the existing table to modify</value>
        [DataMember(Name="ExistingTablePath", EmitDefaultValue=false)]
        public string ExistingTablePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDocxTableRowRequest {\n");
            sb.Append("  InputFileBytes: ").Append(InputFileBytes).Append("\n");
            sb.Append("  InputFileUrl: ").Append(InputFileUrl).Append("\n");
            sb.Append("  RowToUpdate: ").Append(RowToUpdate).Append("\n");
            sb.Append("  TableRowRowIndex: ").Append(TableRowRowIndex).Append("\n");
            sb.Append("  ExistingTablePath: ").Append(ExistingTablePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateDocxTableRowRequest);
        }

        /// <summary>
        /// Returns true if UpdateDocxTableRowRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateDocxTableRowRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDocxTableRowRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputFileBytes == input.InputFileBytes ||
                    (this.InputFileBytes != null &&
                    this.InputFileBytes.Equals(input.InputFileBytes))
                ) && 
                (
                    this.InputFileUrl == input.InputFileUrl ||
                    (this.InputFileUrl != null &&
                    this.InputFileUrl.Equals(input.InputFileUrl))
                ) && 
                (
                    this.RowToUpdate == input.RowToUpdate ||
                    (this.RowToUpdate != null &&
                    this.RowToUpdate.Equals(input.RowToUpdate))
                ) && 
                (
                    this.TableRowRowIndex == input.TableRowRowIndex ||
                    (this.TableRowRowIndex != null &&
                    this.TableRowRowIndex.Equals(input.TableRowRowIndex))
                ) && 
                (
                    this.ExistingTablePath == input.ExistingTablePath ||
                    (this.ExistingTablePath != null &&
                    this.ExistingTablePath.Equals(input.ExistingTablePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputFileBytes != null)
                    hashCode = hashCode * 59 + this.InputFileBytes.GetHashCode();
                if (this.InputFileUrl != null)
                    hashCode = hashCode * 59 + this.InputFileUrl.GetHashCode();
                if (this.RowToUpdate != null)
                    hashCode = hashCode * 59 + this.RowToUpdate.GetHashCode();
                if (this.TableRowRowIndex != null)
                    hashCode = hashCode * 59 + this.TableRowRowIndex.GetHashCode();
                if (this.ExistingTablePath != null)
                    hashCode = hashCode * 59 + this.ExistingTablePath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
