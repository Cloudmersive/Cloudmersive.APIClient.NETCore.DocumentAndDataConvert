/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Api;
using Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NETCore.DocumentAndDataConvert.Test
{
    /// <summary>
    ///  Class for testing ConvertDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConvertDataApiTests
    {
        private ConvertDataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ConvertDataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ConvertDataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConvertDataApi
            //Assert.IsInstanceOfType(typeof(ConvertDataApi), instance, "instance is a ConvertDataApi");
        }

        
        /// <summary>
        /// Test ConvertDataCsvToJson
        /// </summary>
        [Test]
        public void ConvertDataCsvToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //var response = instance.ConvertDataCsvToJson(inputFile);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConvertDataJsonToXml
        /// </summary>
        [Test]
        public void ConvertDataJsonToXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object jsonObject = null;
            //var response = instance.ConvertDataJsonToXml(jsonObject);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test ConvertDataXlsToJson
        /// </summary>
        [Test]
        public void ConvertDataXlsToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //var response = instance.ConvertDataXlsToJson(inputFile);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConvertDataXlsxToJson
        /// </summary>
        [Test]
        public void ConvertDataXlsxToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //var response = instance.ConvertDataXlsxToJson(inputFile);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConvertDataXmlEditAddAttributeWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlEditAddAttributeWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string xPathExpression = null;
            //string xmlAttributeName = null;
            //string xmlAttributeValue = null;
            //var response = instance.ConvertDataXmlEditAddAttributeWithXPath(inputFile, xPathExpression, xmlAttributeName, xmlAttributeValue);
            //Assert.IsInstanceOf<XmlAddAttributeWithXPathResult> (response, "response is XmlAddAttributeWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlEditAddChildWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlEditAddChildWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string xPathExpression = null;
            //string xmlNodeToAdd = null;
            //var response = instance.ConvertDataXmlEditAddChildWithXPath(inputFile, xPathExpression, xmlNodeToAdd);
            //Assert.IsInstanceOf<XmlAddChildWithXPathResult> (response, "response is XmlAddChildWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlEditRemoveAllChildNodesWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlEditRemoveAllChildNodesWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string xPathExpression = null;
            //var response = instance.ConvertDataXmlEditRemoveAllChildNodesWithXPath(inputFile, xPathExpression);
            //Assert.IsInstanceOf<XmlRemoveAllChildrenWithXPathResult> (response, "response is XmlRemoveAllChildrenWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlEditReplaceWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlEditReplaceWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string xPathExpression = null;
            //string xmlNodeReplacement = null;
            //var response = instance.ConvertDataXmlEditReplaceWithXPath(inputFile, xPathExpression, xmlNodeReplacement);
            //Assert.IsInstanceOf<XmlReplaceWithXPathResult> (response, "response is XmlReplaceWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlEditSetValueWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlEditSetValueWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string xPathExpression = null;
            //string xmlValue = null;
            //var response = instance.ConvertDataXmlEditSetValueWithXPath(inputFile, xPathExpression, xmlValue);
            //Assert.IsInstanceOf<XmlSetValueWithXPathResult> (response, "response is XmlSetValueWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlFilterWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlFilterWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPathExpression = null;
            //System.IO.Stream inputFile = null;
            //var response = instance.ConvertDataXmlFilterWithXPath(xPathExpression, inputFile);
            //Assert.IsInstanceOf<XmlFIlterWithXPathResult> (response, "response is XmlFIlterWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlRemoveWithXPath
        /// </summary>
        [Test]
        public void ConvertDataXmlRemoveWithXPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPathExpression = null;
            //System.IO.Stream inputFile = null;
            //var response = instance.ConvertDataXmlRemoveWithXPath(xPathExpression, inputFile);
            //Assert.IsInstanceOf<XmlRemoveWithXPathResult> (response, "response is XmlRemoveWithXPathResult");
        }
        
        /// <summary>
        /// Test ConvertDataXmlToJson
        /// </summary>
        [Test]
        public void ConvertDataXmlToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //var response = instance.ConvertDataXmlToJson(inputFile);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ConvertDataXmlTransformWithXsltToXml
        /// </summary>
        [Test]
        public void ConvertDataXmlTransformWithXsltToXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //System.IO.Stream transformFile = null;
            //var response = instance.ConvertDataXmlTransformWithXsltToXml(inputFile, transformFile);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
    }

}
